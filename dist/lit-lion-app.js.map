{
  "version": 3,
  "sources": ["../node_modules/@lit/reactive-element/src/css-tag.ts", "../node_modules/@lit/reactive-element/src/reactive-element.ts", "../node_modules/lit-html/src/lit-html.ts", "../node_modules/lit-element/src/lit-element.ts", "../node_modules/@lion/core/node_modules/@lit/reactive-element/src/css-tag.ts", "../node_modules/@lion/core/node_modules/@lit/reactive-element/src/reactive-element.ts", "../node_modules/@lion/core/node_modules/lit-html/src/lit-html.ts", "../node_modules/@lion/core/node_modules/lit-element/src/lit-element.ts", "../node_modules/@lion/core/node_modules/lit-html/src/static.ts", "../node_modules/@lion/core/node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directive.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directive-helpers.ts", "../node_modules/@lion/core/node_modules/lit-html/src/async-directive.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/private-async-helpers.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/async-replace.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/async-append.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/cache.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/class-map.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/guard.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/live.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/ref.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/repeat.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/style-map.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/template-content.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/unsafe-html.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/unsafe-svg.ts", "../node_modules/@lion/core/node_modules/lit-html/src/directives/until.ts", "../node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js", "../node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js", "../node_modules/@lion/core/src/DisabledMixin.js", "../node_modules/@lion/core/src/DisabledWithTabIndexMixin.js", "../node_modules/@lion/core/src/SlotMixin.js", "../node_modules/@lion/core/src/browserDetection.js", "../node_modules/@lion/core/src/uuid.js", "../node_modules/@lion/form-core/src/FocusMixin.js", "../node_modules/@lion/form-core/src/utils/getAriaElementsInRightDomOrder.js", "../node_modules/@lion/form-core/src/validate/Unparseable.js", "../node_modules/@lion/form-core/src/registration/FormRegisteringMixin.js", "../node_modules/@lion/form-core/src/FormControlMixin.js", "../node_modules/singleton-manager/src/SingletonManagerClass.js", "../node_modules/singleton-manager/src/index.js", "../node_modules/@bundled-es-modules/message-format/MessageFormat.js", "../node_modules/@lion/localize/src/isLocalizeESModule.js", "../node_modules/@lion/localize/src/LocalizeManager.js", "../node_modules/@lion/localize/src/localize.js", "../node_modules/@lion/form-core/src/utils/AsyncQueue.js", "../node_modules/@lion/form-core/src/utils/pascalCase.js", "../node_modules/@lion/form-core/src/utils/SyncUpdatableMixin.js", "../node_modules/@lion/form-core/src/validate/LionValidationFeedback.js", "../node_modules/@lion/form-core/src/validate/Validator.js", "../node_modules/@lion/form-core/src/validate/ResultValidator.js", "../node_modules/@lion/form-core/src/validate/validators/Required.js", "../node_modules/@lion/form-core/src/validate/ValidateMixin.js", "../node_modules/@lion/form-core/src/FormatMixin.js", "../node_modules/@lion/form-core/src/InteractionStateMixin.js", "../node_modules/@lion/form-core/src/LionField.js", "../node_modules/@lion/form-core/src/registration/FormControlsCollection.js", "../node_modules/@lion/form-core/src/registration/FormRegistrarMixin.js", "../node_modules/@lion/form-core/src/NativeTextFieldMixin.js", "../node_modules/@lion/form-core/src/form-group/FormElementsHaveNoError.js", "../node_modules/@lion/form-core/src/form-group/FormGroupMixin.js", "../node_modules/@lion/fieldset/src/LionFieldset.js", "../node_modules/@lion/form/src/LionForm.js", "../node_modules/@lion/form/lion-form.js", "../node_modules/@lion/input/src/LionInput.js", "../node_modules/@lion/input/lion-input.js", "../node_modules/@lion/button/src/LionButton.js", "../node_modules/@lion/button/lion-button.js", "../src/components/SignInModal.js", "../src/components/HeaderComponent.js", "../src/components/FooterComponent.js", "../src/components/MainSection.js", "../src/lit-lion-app.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    for (const s of styles) {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    }\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get(this: ReactiveElement) {\n        return get?.call(this);\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set!.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that ust run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      options ??= (\n        this.constructor as typeof ReactiveElement\n      ).getPropertyOptions(name);\n      const hasChanged = options.hasChanged ?? notEqual;\n      const newValue = this[name as keyof this];\n      if (hasChanged(newValue, oldValue)) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    options: PropertyDeclaration\n  ) {\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (options.reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // changedProperties map, but only for the case of experimental\n      // decorators on accessors, which will not have already populated the\n      // changedProperties map. We can't know if these accessors had\n      // initializers, so we just set them anyway - a difference from\n      // experimental decorators on fields and standard decorators on\n      // auto-accessors.\n      // For context why experimentalDecorators with auto accessors are handled\n      // specifically also see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          if (\n            options.wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            this[p as keyof this] !== undefined\n          ) {\n            this._$changeProperty(p, this[p as keyof this], options);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.0.4');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\nimport type {TrustedHTML, TrustedTypesWindow} from 'trusted-types/lib';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? (global.ShadyDOM!.wrap as <T extends Node>(node: T) => T)\n    : <T extends Node>(node: T) => node;\n\nconst trustedTypes = (global as unknown as TrustedTypesWindow).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\nconst MATHML_RESULT = 3;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT | typeof MATHML_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg} when it hasn't been compiled by @lit-labs/compiler.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type UncompiledTemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\n/**\n * This is a template result that may be either uncompiled or compiled.\n *\n * In the future, TemplateResult will be this type. If you want to explicitly\n * note that a template result is potentially compiled, you can reference this\n * type and it will continue to behave the same through the next major version\n * of Lit. This can be useful for code that wants to prepare for the next\n * major version of Lit.\n */\nexport type MaybeCompiledTemplateResult<T extends ResultType = ResultType> =\n  | UncompiledTemplateResult<T>\n  | CompiledTemplateResult;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n * In Lit 4, this type will be an alias of\n * MaybeCompiledTemplateResult, so that code will get type errors if it assumes\n * that Lit templates are not compiled. When deliberately working with only\n * one, use either {@linkcode CompiledTemplateResult} or\n * {@linkcode UncompiledTemplateResult} explicitly.\n */\nexport type TemplateResult<T extends ResultType = ResultType> =\n  UncompiledTemplateResult<T>;\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport type MathMLTemplateResult = TemplateResult<typeof MATHML_RESULT>;\n\n/**\n * A TemplateResult that has been compiled by @lit-labs/compiler, skipping the\n * prepare step.\n */\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    if (DEV_MODE) {\n      // Import static-html.js results in a circular dependency which g3 doesn't\n      // handle. Instead we know that static values must have the field\n      // `_$litStatic$`.\n      if (\n        values.some((val) => (val as {_$litStatic$: unknown})?.['_$litStatic$'])\n      ) {\n        issueWarning(\n          '',\n          `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\\n` +\n            `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`\n        );\n      }\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus not be properly contained within an `<svg>` HTML\n * element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const num = mathml`<mn>1</mn>`;\n *\n * const eq = html`\n *   <math>\n *     ${num}\n *   </math>`;\n * ```\n *\n * The `mathml` *tag function* should only be used for MathML fragments, or\n * elements that would be contained **inside** a `<math>` HTML element. A common\n * error is placing a `<math>` *element* in a template tagged with the `mathml`\n * tag function. The `<math>` element is an HTML element and should be used\n * within a template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an MathML fragment from the\n * `render()` method, as the MathML fragment will be contained within the\n * element's shadow root and thus not be properly contained within a `<math>`\n * HTML element.\n */\nexport const mathml = tag(MATHML_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - they must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html =\n    type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n                ? doubleQuoteAttrEndRegex\n                : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n          ? (attrNames.push(attrName!),\n            s.slice(0, attrNameEndIndex) +\n              boundAttributeSuffix +\n              s.slice(attrNameEndIndex)) +\n            marker +\n            end\n          : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html +\n    (strings[l] || '<?>') +\n    (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: UncompiledTemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Re-parent SVG or MathML nodes into template root\n    if (type === SVG_RESULT || type === MATHML_RESULT) {\n      const wrapper = this.el.content.firstChild!;\n      wrapper.replaceWith(...wrapper.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          for (const name of (node as Element).getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = (node as Element).getAttribute(name)!;\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName)!;\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor:\n                  m[1] === '.'\n                    ? PropertyPart\n                    : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                        ? EventPart\n                        : AttributePart,\n              });\n              (node as Element).removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex,\n              });\n              (node as Element).removeAttribute(name);\n            }\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n\n    if (DEV_MODE) {\n      // If there was a duplicate attribute on a tag, then when the tag is\n      // parsed into an element the attribute gets de-duplicated. We can detect\n      // this mismatch if we haven't precisely consumed every attribute name\n      // when preparing the template. This works because `attrNames` is built\n      // from the template string and `attrNameIndex` comes from processing the\n      // resulting DOM.\n      if (attrNames.length !== attrNameIndex) {\n        throw new Error(\n          `Detected duplicate attribute bindings. This occurs if your template ` +\n            `has duplicate attributes on an element tag. For example ` +\n            `\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` +\n            `duplicate \"disabled\" attribute. The error was detected in ` +\n            `the following template: \\n` +\n            '`' +\n            strings.join('${...}') +\n            '`'\n        );\n      }\n    }\n\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'template prep',\n        template: this,\n        clonableTemplate: this.el,\n        parts: this.parts,\n        strings,\n      });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'set part',\n            part,\n            value: values[i],\n            valueIndex: i,\n            values,\n            templateInstance: this,\n          });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unused otherwise. The\n   * intention would be clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent &&\n            debugLogEvent({\n              kind: 'commit nothing to child',\n              start: this._$startNode,\n              end: this._$endNode,\n              parent: this._$parent,\n              options: this.options,\n            });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit node',\n          start: this._$startNode,\n          parent: this._$parent,\n          value: value,\n          options: this.options,\n        });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit text',\n          node,\n          value,\n          options: this.options,\n        });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: textNode,\n            value,\n            options: this.options,\n          });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: wrap(this._$startNode).nextSibling as Text,\n            value,\n            options: this.options,\n          });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as UncompiledTemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template updating',\n          template,\n          instance: this._$committedValue as TemplateInstance,\n          parts: (this._$committedValue as TemplateInstance)._$parts,\n          options: this.options,\n          values,\n        });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      instance._update(values);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated and updated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: UncompiledTemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this method\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type:\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART = ATTRIBUTE_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit attribute',\n          element: this.element,\n          name: this.name,\n          value,\n          options: this.options,\n        });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit property',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit boolean attribute',\n        element: this.element,\n        name: this.name,\n        value: !!(value && value !== nothing),\n        options: this.options,\n      });\n    (wrap(this.element) as Element).toggleAttribute(\n      this.name,\n      !!value && value !== nothing\n    );\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit event listener',\n        element: this.element,\n        name: this.name,\n        value: newListener,\n        options: this.options,\n        removeListener: shouldRemoveListener,\n        addListener: shouldAddListener,\n        oldListener,\n      });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit to element binding',\n        element: this.element,\n        value,\n        options: this.options,\n      });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('3.2.1');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'begin render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'end render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n * LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n * Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\n(LitElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', LitElement)\n] = true;\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('4.1.1');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    styles.forEach((s) => {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet requestUpdateThenable: (name: string) => {\n  then: (\n    onfulfilled?: (value: boolean) => void,\n    _onrejected?: () => void\n  ) => void;\n};\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n\n  requestUpdateThenable = (name) => ({\n    then: (\n      onfulfilled?: (value: boolean) => void,\n      _onrejected?: () => void\n    ) => {\n      issueWarning(\n        'request-update-promise',\n        `The \\`requestUpdate\\` method should no longer return a Promise but ` +\n          `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`\n      );\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    },\n  });\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K];\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind = 'change-in-update' | 'migration';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.finalize();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static [finalized] = true;\n\n  /**\n   * Memoized list of all element properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap = new Map();\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * The set of properties defined by this class that caused an accessor to be\n   * added during `createProperty`.\n   * @nocollapse\n   */\n  private static __reactivePropertyKeys?: Set<PropertyKey>;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // if this is a state property, force the attribute to false.\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (options as any).attribute = false;\n    }\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n    this.finalize();\n    this.elementProperties.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n        if (DEV_MODE) {\n          // If this class doesn't have its own set, create one and initialize\n          // with the values in the set from the nearest ancestor class, if any.\n          if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n            this.__reactivePropertyKeys = new Set(\n              this.__reactivePropertyKeys ?? []\n            );\n          }\n          this.__reactivePropertyKeys!.add(name);\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = (this as {} as {[key: string]: unknown})[\n          name as string\n        ];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as ReactiveElement).requestUpdate(\n          name,\n          oldValue,\n          options\n        );\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties, sets up element\n   * styling, and ensures any superclasses are also finalized. Returns true if\n   * the element was finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n    this[finalized] = true;\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    this.elementProperties = new Map(superCtor.elementProperties);\n    // initialize Map populated in observedAttributes\n    this.__attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...Object.getOwnPropertySymbols(props),\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    // DEV mode warnings\n    if (DEV_MODE) {\n      const warnRemovedOrRenamed = (name: string, renamed = false) => {\n        if (this.prototype.hasOwnProperty(name)) {\n          issueWarning(\n            renamed ? 'renamed-api' : 'removed-api',\n            `\\`${name}\\` is implemented on class ${this.name}. It ` +\n              `has been ${renamed ? 'renamed' : 'removed'} ` +\n              `in this version of LitElement.`\n          );\n        }\n      };\n      warnRemovedOrRenamed('initialize');\n      warnRemovedOrRenamed('requestUpdateInternal');\n      warnRemovedOrRenamed('_getUpdateComplete', true);\n    }\n    return true;\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | ShadowRoot;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  private __instanceProperties?: PropertyValues = new Map();\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: ReactiveController[];\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= []).push(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n    this.__controllers?.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof ReactiveElement).elementProperties.forEach(\n      (_v, p) => {\n        if (this.hasOwnProperty(p)) {\n          this.__instanceProperties!.set(p, this[p as keyof this]);\n          delete this[p as keyof this];\n        }\n      }\n    );\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): Element | ShadowRoot {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // create renderRoot before first update.\n    if (this.renderRoot === undefined) {\n      (\n        this as {\n          renderRoot: Element | DocumentFragment;\n        }\n      ).renderRoot = this.createRenderRoot();\n    }\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(\n    name: PropertyKey,\n    value: unknown,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n          'migration'\n        ) >= 0 &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      options =\n        options ||\n        (this.constructor as typeof ReactiveElement).getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n      if (hasChanged(this[name as keyof this], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n    // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n    return DEV_MODE\n      ? (requestUpdateThenable(this.localName) as unknown as void)\n      : undefined;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    return this.performUpdate();\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * Note: To ensure `performUpdate()` synchronously completes a pending update,\n   * it should not be overridden. In LitElement 2.x it was suggested to override\n   * `performUpdate()` to also customizing update scheduling. Instead, you should now\n   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n   * scheduling updates via `performUpdate()` continues to work, but will make\n   * also calling `performUpdate()` to synchronously process updates difficult.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void | Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    // create renderRoot before first update.\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties: string[] = [];\n        (\n          this.constructor as typeof ReactiveElement\n        ).__reactivePropertyKeys?.forEach((p) => {\n          if (this.hasOwnProperty(p) && !this.__instanceProperties?.has(p)) {\n            shadowedProperties.push(p as string);\n          }\n        });\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n    }\n    // Mixin instance properties once, if they exist.\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties!.forEach((v, p) => ((this as any)[p] = v));\n      this.__instanceProperties = undefined;\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n        'change-in-update'\n      ) >= 0\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) =>\n        this.__propertyToAttribute(k, this[k as keyof this], v)\n      );\n      this.__reflectingProperties = undefined;\n    }\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings!.indexOf(warning) < 0) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('1.6.3');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n// Use window for browser builds because IE11 doesn't have globalThis.\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? global.ShadyDOM!.wrap\n    : (node: Node) => node;\n\nconst trustedTypes = (global as unknown as Partial<Window>).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type TemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus cannot be used within an `<svg>` HTML element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n  null,\n  false\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!Array.isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string | undefined>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string | undefined> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s +\n          marker +\n          (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: TemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Reparent SVG nodes into template root\n    if (type === SVG_RESULT) {\n      const content = this.el.content;\n      const svgElement = content.firstChild!;\n      svgElement.remove();\n      content.append(...svgElement.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          // We defer removing bound attributes because on IE we might not be\n          // iterating attributes in their template order, and would sometimes\n          // remove an attribute that we still need to create a part for.\n          const attrsToRemove = [];\n          for (const name of (node as Element).getAttributeNames()) {\n            // `name` is the name of the attribute we're iterating over, but not\n            // _necessarily_ the name of the attribute we will create a part\n            // for. They can be different in browsers that don't iterate on\n            // attributes in source order. In that case the attrNames array\n            // contains the attribute name we'll process next. We only need the\n            // attribute name here to know if we should process a bound attribute\n            // on this element.\n            if (\n              name.endsWith(boundAttributeSuffix) ||\n              name.startsWith(marker)\n            ) {\n              const realName = attrNames[attrNameIndex++];\n              attrsToRemove.push(name);\n              if (realName !== undefined) {\n                // Lowercase for case-sensitive SVG attributes like viewBox\n                const value = (node as Element).getAttribute(\n                  realName.toLowerCase() + boundAttributeSuffix\n                )!;\n                const statics = value.split(marker);\n                const m = /([.?@])?(.*)/.exec(realName)!;\n                parts.push({\n                  type: ATTRIBUTE_PART,\n                  index: nodeIndex,\n                  name: m[2],\n                  strings: statics,\n                  ctor:\n                    m[1] === '.'\n                      ? PropertyPart\n                      : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                      ? EventPart\n                      : AttributePart,\n                });\n              } else {\n                parts.push({\n                  type: ELEMENT_PART,\n                  index: nodeIndex,\n                });\n              }\n            }\n          }\n          for (const name of attrsToRemove) {\n            (node as Element).removeAttribute(name);\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent?.({\n      kind: 'template prep',\n      template: this,\n      clonableTemplate: this.el,\n      parts: this.parts,\n      strings,\n    });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent?.({\n          kind: 'set part',\n          part,\n          value: values[i],\n          valueIndex: i,\n          values,\n          templateInstance: this,\n        });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unsed otherwise. The\n   * intention would clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent?.({\n            kind: 'commit nothing to child',\n            start: this._$startNode,\n            end: this._$endNode,\n            parent: this._$parent,\n            options: this.options,\n          });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and make do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent?.({\n        kind: 'commit node',\n        start: this._$startNode,\n        parent: this._$parent,\n        value: value,\n        options: this.options,\n      });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent?.({\n        kind: 'commit text',\n        node,\n        value,\n        options: this.options,\n      });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: textNode,\n          value,\n          options: this.options,\n        });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: wrap(this._$startNode).nextSibling as Text,\n          value,\n          options: this.options,\n        });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as TemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent?.({\n        kind: 'template updating',\n        template,\n        instance: this._$committedValue as TemplateInstance,\n        parts: (this._$committedValue as TemplateInstance)._$parts,\n        options: this.options,\n        values,\n      });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent?.({\n        kind: 'template instantiated',\n        template,\n        instance,\n        parts: instance._$parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      instance._update(values);\n      debugLogEvent?.({\n        kind: 'template instantiated and updated',\n        template,\n        instance,\n        parts: instance._$parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: TemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this metod\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type = ATTRIBUTE_PART as\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent?.({\n        kind: 'commit attribute',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent?.({\n      kind: 'commit property',\n      element: this.element,\n      name: this.name,\n      value,\n      options: this.options,\n    });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent?.({\n      kind: 'commit boolean attribute',\n      element: this.element,\n      name: this.name,\n      value: !!(value && value !== nothing),\n      options: this.options,\n    });\n    if (value && value !== nothing) {\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        emptyStringForBooleanAttribute\n      );\n    } else {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    }\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent?.({\n      kind: 'commit event listener',\n      element: this.element,\n      name: this.name,\n      value: newListener,\n      options: this.options,\n      removeListener: shouldRemoveListener,\n      addListener: shouldAddListener,\n      oldListener,\n    });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent?.({\n      kind: 'commit to element binding',\n      element: this.element,\n      value,\n      options: this.options,\n    });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('2.8.0');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent?.({\n    kind: 'begin render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent?.({\n    kind: 'end render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n\n// For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\nexport const UpdatingElement = ReactiveElement;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See @lit/reactive-element for more information.\n   */\n  protected static override ['finalized'] = true;\n\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n// DEV mode warnings\nif (DEV_MODE) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  // Note, for compatibility with closure compilation, this access\n  // needs to be as a string property index.\n  (LitElement as any)['finalize'] = function (this: typeof LitElement) {\n    const finalized = (ReactiveElement as any).finalize.call(this);\n    if (!finalized) {\n      return false;\n    }\n    const warnRemovedOrRenamed = (obj: any, name: string, renamed = false) => {\n      if (obj.hasOwnProperty(name)) {\n        const ctorName = (typeof obj === 'function' ? obj : obj.constructor)\n          .name;\n        issueWarning(\n          renamed ? 'renamed-api' : 'removed-api',\n          `\\`${name}\\` is implemented on class ${ctorName}. It ` +\n            `has been ${renamed ? 'renamed' : 'removed'} ` +\n            `in this version of LitElement.`\n        );\n      }\n    };\n    warnRemovedOrRenamed(this, 'render');\n    warnRemovedOrRenamed(this, 'getStyles', true);\n    warnRemovedOrRenamed((this as typeof LitElement).prototype, 'adoptStyles');\n    return true;\n  };\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('3.3.3');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * a attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements =\n  global.HTMLSlotElement?.prototype.assignedElements != null\n    ? (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot.assignedElements(opts)\n    : (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot\n          .assignedNodes(opts)\n          .filter(\n            (node): node is Element => node.nodeType === Node.ELEMENT_NODE\n          );\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options?: QueryAssignedElementsOptions) {\n  const {slot, selector} = options ?? {};\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements =\n          slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter((node) => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = (typeof PartType)[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {\n  AsyncDirective,\n  directive,\n  DirectiveParameters,\n} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef, forAwaitOf} from './private-async-helpers.js';\n\ntype Mapper<T> = (v: T, index?: number) => unknown;\n\nexport class AsyncReplaceDirective extends AsyncDirective {\n  private __value?: AsyncIterable<unknown>;\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  // @ts-expect-error value not used, but we want a nice parameter for docs\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render<T>(value: AsyncIterable<T>, _mapper?: Mapper<T>) {\n    return noChange;\n  }\n\n  override update(\n    _part: ChildPart,\n    [value, mapper]: DirectiveParameters<this>\n  ) {\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === this.__value) {\n      return;\n    }\n    this.__value = value;\n    let i = 0;\n    const {__weakThis: weakThis, __pauser: pauser} = this;\n    // Note, the callback avoids closing over `this` so that the directive\n    // can be gc'ed before the promise resolves; instead `this` is retrieved\n    // from `weakThis`, which can break the hard reference in the closure when\n    // the directive disconnects\n    forAwaitOf(value, async (v: unknown) => {\n      // The while loop here handles the case that the connection state\n      // thrashes, causing the pauser to resume and then get re-paused\n      while (pauser.get()) {\n        await pauser.get();\n      }\n      // If the callback gets here and there is no `this`, it means that the\n      // directive has been disconnected and garbage collected and we don't\n      // need to do anything else\n      const _this = weakThis.deref();\n      if (_this !== undefined) {\n        // Check to make sure that value is the still the current value of\n        // the part, and if not bail because a new value owns this part\n        if (_this.__value !== value) {\n          return false;\n        }\n\n        // As a convenience, because functional-programming-style\n        // transforms of iterables and async iterables requires a library,\n        // we accept a mapper function. This is especially convenient for\n        // rendering a template for each item.\n        if (mapper !== undefined) {\n          v = mapper(v, i);\n        }\n\n        _this.commitValue(v, i);\n        i++;\n      }\n      return true;\n    });\n    return noChange;\n  }\n\n  // Override point for AsyncAppend to append rather than replace\n  protected commitValue(value: unknown, _index: number) {\n    this.setValue(value);\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time. This directive may be used in any expression type.\n *\n * Async iterables are objects with a `[Symbol.asyncIterator]` method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace = directive(AsyncReplaceDirective);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart} from '../lit-html.js';\nimport {\n  directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\nimport {AsyncReplaceDirective} from './async-replace.js';\nimport {\n  clearPart,\n  insertPart,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nclass AsyncAppendDirective extends AsyncReplaceDirective {\n  private __childPart!: ChildPart;\n\n  // Override AsyncReplace to narrow the allowed part type to ChildPart only\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('asyncAppend can only be used in child expressions');\n    }\n  }\n\n  // Override AsyncReplace to save the part since we need to append into it\n  override update(part: ChildPart, params: DirectiveParameters<this>) {\n    this.__childPart = part;\n    return super.update(part, params);\n  }\n\n  // Override AsyncReplace to append rather than replace\n  protected override commitValue(value: unknown, index: number) {\n    // When we get the first value, clear the part. This lets the\n    // previous value display until we can replace it.\n    if (index === 0) {\n      clearPart(this.__childPart);\n    }\n    // Create and insert a new part and set its value to the next value\n    const newPart = insertPart(this.__childPart);\n    setChildPartValue(newPart, value);\n  }\n}\n\n/**\n * A directive that renders the items of an async iterable[1], appending new\n * values after previous values, similar to the built-in support for iterables.\n * This directive is usable only in child expressions.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is appended to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncAppend = directive(AsyncAppendDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {AsyncAppendDirective};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  TemplateResult,\n  ChildPart,\n  RootPart,\n  render,\n  nothing,\n  CompiledTemplateResult,\n} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n} from '../directive.js';\nimport {\n  clearPart,\n  getCommittedValue,\n  insertPart,\n  isCompiledTemplateResult,\n  isTemplateResult,\n  setCommittedValue,\n} from '../directive-helpers.js';\n\n/**\n * The template strings array contents are not compatible between the two\n * template result types as the compiled template contains a prepared string;\n * only use the returned template strings array as a cache key.\n */\nconst getStringsFromTemplateResult = (\n  result: TemplateResult | CompiledTemplateResult\n): TemplateStringsArray =>\n  isCompiledTemplateResult(result) ? result['_$litType$'].h : result.strings;\n\nclass CacheDirective extends Directive {\n  private _templateCache = new WeakMap<TemplateStringsArray, RootPart>();\n  private _value?: TemplateResult | CompiledTemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n  }\n\n  render(v: unknown) {\n    // Return an array of the value to induce lit-html to create a ChildPart\n    // for the value that we can move into the cache.\n    return [v];\n  }\n\n  override update(containerPart: ChildPart, [v]: DirectiveParameters<this>) {\n    const _valueKey = isTemplateResult(this._value)\n      ? getStringsFromTemplateResult(this._value)\n      : null;\n    const vKey = isTemplateResult(v) ? getStringsFromTemplateResult(v) : null;\n\n    // If the previous value is a TemplateResult and the new value is not,\n    // or is a different Template as the previous value, move the child part\n    // into the cache.\n    if (_valueKey !== null && (vKey === null || _valueKey !== vKey)) {\n      // This is always an array because we return [v] in render()\n      const partValue = getCommittedValue(containerPart) as Array<ChildPart>;\n      const childPart = partValue.pop()!;\n      let cachedContainerPart = this._templateCache.get(_valueKey);\n      if (cachedContainerPart === undefined) {\n        const fragment = document.createDocumentFragment();\n        cachedContainerPart = render(nothing, fragment);\n        cachedContainerPart.setConnected(false);\n        this._templateCache.set(_valueKey, cachedContainerPart);\n      }\n      // Move into cache\n      setCommittedValue(cachedContainerPart, [childPart]);\n      insertPart(cachedContainerPart, undefined, childPart);\n    }\n    // If the new value is a TemplateResult and the previous value is not,\n    // or is a different Template as the previous value, restore the child\n    // part from the cache.\n    if (vKey !== null) {\n      if (_valueKey === null || _valueKey !== vKey) {\n        const cachedContainerPart = this._templateCache.get(vKey);\n        if (cachedContainerPart !== undefined) {\n          // Move the cached part back into the container part value\n          const partValue = getCommittedValue(\n            cachedContainerPart\n          ) as Array<ChildPart>;\n          const cachedPart = partValue.pop()!;\n          // Move cached part back into DOM\n          clearPart(containerPart);\n          insertPart(containerPart, undefined, cachedPart);\n          setCommittedValue(containerPart, [cachedPart]);\n        }\n      }\n      // Because vKey is non null, v must be a TemplateResult.\n      this._value = v as TemplateResult | CompiledTemplateResult;\n    } else {\n      this._value = undefined;\n    }\n    return this.render(v);\n  }\n}\n\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```js\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive(CacheDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {CacheDirective};\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {noChange, Part} from '../lit-html.js';\nimport {directive, Directive, DirectiveParameters} from '../directive.js';\n\n// A sentinel that indicates guard() hasn't rendered anything yet\nconst initialValue = {};\n\nclass GuardDirective extends Directive {\n  private _previousValue: unknown = initialValue;\n\n  render(_value: unknown, f: () => unknown) {\n    return f();\n  }\n\n  override update(_part: Part, [value, f]: DirectiveParameters<this>) {\n    if (Array.isArray(value)) {\n      // Dirty-check arrays by item\n      if (\n        Array.isArray(this._previousValue) &&\n        this._previousValue.length === value.length &&\n        value.every((v, i) => v === (this._previousValue as Array<unknown>)[i])\n      ) {\n        return noChange;\n      }\n    } else if (this._previousValue === value) {\n      // Dirty-check non-arrays by identity\n      return noChange;\n    }\n\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    this._previousValue = Array.isArray(value) ? Array.from(value) : value;\n    const r = this.render(value, f);\n    return r;\n  }\n}\n\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Values are checked against previous values with strict equality (`===`), and\n * so the check won't detect nested property changes inside objects or arrays.\n * Arrays values have each item checked against the previous value at the same\n * index with strict equality. Nested arrays are also checked only by strict\n * equality.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * `\n * ```\n *\n * In this case, the template only rerenders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * `\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive(GuardDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {GuardDirective};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange, nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\nimport {isSingleExpression, setCommittedValue} from '../directive-helpers.js';\n\nclass LiveDirective extends Directive {\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      !(\n        partInfo.type === PartType.PROPERTY ||\n        partInfo.type === PartType.ATTRIBUTE ||\n        partInfo.type === PartType.BOOLEAN_ATTRIBUTE\n      )\n    ) {\n      throw new Error(\n        'The `live` directive is not allowed on child or event bindings'\n      );\n    }\n    if (!isSingleExpression(partInfo)) {\n      throw new Error('`live` bindings can only contain a single expression');\n    }\n  }\n\n  render(value: unknown) {\n    return value;\n  }\n\n  override update(part: AttributePart, [value]: DirectiveParameters<this>) {\n    if (value === noChange || value === nothing) {\n      return value;\n    }\n    const element = part.element;\n    const name = part.name;\n\n    if (part.type === PartType.PROPERTY) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (value === (element as any)[name]) {\n        return noChange;\n      }\n    } else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {\n      if (!!value === element.hasAttribute(name)) {\n        return noChange;\n      }\n    } else if (part.type === PartType.ATTRIBUTE) {\n      if (element.getAttribute(name) === String(value)) {\n        return noChange;\n      }\n    }\n    // Resets the part's value, causing its dirty-check to fail so that it\n    // always sets the value.\n    setCommittedValue(part);\n    return value;\n  }\n}\n\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want--if you want to overwrite the DOM\n * value with the bound value no matter what--use the `live()` directive:\n *\n * ```js\n * html`<input .value=${live(x)}>`\n * ```\n *\n * `live()` performs a strict equality check against the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nexport const live = directive(LiveDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {LiveDirective};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback: WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n> = new WeakMap();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an array but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of CSS properties and values.\n *\n * The key should be either a valid CSS property name string, like\n * `'background-color'`, or a valid JavaScript camel case property name\n * for CSSStyleDeclaration like `backgroundColor`.\n */\nexport interface StyleInfo {\n  [name: string]: string | number | undefined | null;\n}\n\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\n\nclass StyleMapDirective extends Directive {\n  _previousStyleProperties?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'style' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        'The `styleMap` directive must be used in the `style` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(styleInfo: Readonly<StyleInfo>) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.includes('-')\n        ? prop\n        : prop\n            .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n            .toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n\n  override update(part: AttributePart, [styleInfo]: DirectiveParameters<this>) {\n    const {style} = part.element as HTMLElement;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties!.forEach((name) => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties!.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = '';\n        }\n      }\n    });\n\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        const isImportant =\n          typeof value === 'string' && value.endsWith(importantFlag);\n        if (name.includes('-') || isImportant) {\n          style.setProperty(\n            name,\n            isImportant\n              ? (value as string).slice(0, flagTrim)\n              : (value as string),\n            isImportant ? important : ''\n          );\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {StyleMapDirective};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nclass TemplateContentDirective extends Directive {\n  private _previousTemplate?: HTMLTemplateElement;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('templateContent can only be used in child bindings');\n    }\n  }\n\n  render(template: HTMLTemplateElement) {\n    if (this._previousTemplate === template) {\n      return noChange;\n    }\n    this._previousTemplate = template;\n    return document.importNode(template.content, true);\n  }\n}\n\n/**\n * Renders the content of a template element as HTML.\n *\n * Note, the template should be developer controlled and not user controlled.\n * Rendering a user-controlled template with this directive\n * could lead to cross-site-scripting vulnerabilities.\n */\nexport const templateContent = directive(TemplateContentDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {TemplateContentDirective};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {directive} from '../directive.js';\nimport {UnsafeHTMLDirective} from './unsafe-html.js';\n\nconst SVG_RESULT = 2;\n\nclass UnsafeSVGDirective extends UnsafeHTMLDirective {\n  static override directiveName = 'unsafeSVG';\n  static override resultType = SVG_RESULT;\n}\n\n/**\n * Renders the result as SVG, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeSVG = directive(UnsafeSVGDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {UnsafeSVGDirective};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>) {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n", "const appliedClassMixins = new WeakMap();\n\n/** Vefify if the Mixin was previously applyed\n * @private\n * @param {function} mixin      Mixin being applyed\n * @param {object} superClass   Class receiving the new mixin\n * @returns {boolean}\n */\nfunction wasMixinPreviouslyApplied(mixin, superClass) {\n  let klass = superClass;\n  while (klass) {\n    if (appliedClassMixins.get(klass) === mixin) {\n      return true;\n    }\n    klass = Object.getPrototypeOf(klass);\n  }\n  return false;\n}\n\n/** Apply each mixin in the chain to make sure they are not applied more than once to the final class.\n * @export\n * @param {function} mixin      Mixin to be applyed\n * @returns {object}            Mixed class with mixin applied\n */\nexport function dedupeMixin(mixin) {\n  return superClass => {\n    if (wasMixinPreviouslyApplied(mixin, superClass)) {\n      return superClass;\n    }\n    const mixedClass = mixin(superClass);\n    appliedClassMixins.set(mixedClass, mixin);\n    return mixedClass;\n  };\n}\n", "import { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { adoptStyles } from '@lit/reactive-element/css-tag.js';\n\n/**\n * @typedef {import('./types').RenderOptions} RenderOptions\n * @typedef {import('./types').ScopedElementsMixin} ScopedElementsMixin\n * @typedef {import('./types').ScopedElementsHost} ScopedElementsHost\n * @typedef {import('./types').ScopedElementsMap} ScopedElementsMap\n * @typedef {import('@lit/reactive-element').CSSResultOrNative} CSSResultOrNative\n */\n\nconst version = '2.2.2';\n// eslint-disable-next-line dot-notation\nconst versions = window['scopedElementsVersions'] || (window['scopedElementsVersions'] = []);\nif (!versions.includes(version)) {\n  versions.push(version);\n}\n\n// @ts-ignore\nconst supportsScopedRegistry = !!ShadowRoot.prototype.createElement;\n\n/**\n * @template {import('./types').Constructor<HTMLElement>} T\n * @param {T} superclass\n * @return {T & import('./types').Constructor<ScopedElementsHost>}\n */\nconst ScopedElementsMixinImplementation = superclass =>\n  /** @type {ScopedElementsHost} */\n  class ScopedElementsHost extends superclass {\n    /**\n     * Obtains the scoped elements definitions map if specified.\n     *\n     * @returns {ScopedElementsMap}\n     */\n    static get scopedElements() {\n      return {};\n    }\n\n    static get scopedElementsVersion() {\n      return version;\n    }\n\n    /**\n     * Obtains the ShadowRoot options.\n     *\n     * @type {ShadowRootInit}\n     */\n    static get shadowRootOptions() {\n      return this.__shadowRootOptions;\n    }\n\n    /**\n     * Set the shadowRoot options.\n     *\n     * @param {ShadowRootInit} value\n     */\n    static set shadowRootOptions(value) {\n      this.__shadowRootOptions = value;\n    }\n\n    /**\n     * Obtains the element styles.\n     *\n     * @returns {CSSResultOrNative[]}\n     */\n    static get elementStyles() {\n      return this.__elementStyles;\n    }\n\n    static set elementStyles(styles) {\n      this.__elementStyles = styles;\n    }\n\n    // either TS or ESLint will complain here\n    // eslint-disable-next-line no-unused-vars\n    constructor(..._args) {\n      super();\n      /** @type {RenderOptions} */\n      this.renderOptions = this.renderOptions || undefined;\n    }\n\n    /**\n     * Obtains the CustomElementRegistry associated to the ShadowRoot.\n     *\n     * @returns {CustomElementRegistry}\n     */\n    get registry() {\n      // @ts-ignore\n      return this.constructor.__registry;\n    }\n\n    /**\n     * Set the CustomElementRegistry associated to the ShadowRoot\n     *\n     * @param {CustomElementRegistry} registry\n     */\n    set registry(registry) {\n      // @ts-ignore\n      this.constructor.__registry = registry;\n    }\n\n    createRenderRoot() {\n      const { scopedElements, shadowRootOptions, elementStyles } =\n        /** @type {typeof ScopedElementsHost} */ (this.constructor);\n\n      const shouldCreateRegistry =\n        !this.registry ||\n        // @ts-ignore\n        (this.registry === this.constructor.__registry &&\n          !Object.prototype.hasOwnProperty.call(this.constructor, '__registry'));\n\n      /**\n       * Create a new registry if:\n       * - the registry is not defined\n       * - this class doesn't have its own registry *AND* has no shared registry\n       */\n      if (shouldCreateRegistry) {\n        this.registry = supportsScopedRegistry ? new CustomElementRegistry() : customElements;\n        for (const [tagName, klass] of Object.entries(scopedElements)) {\n          this.defineScopedElement(tagName, klass);\n        }\n      }\n\n      /** @type {ShadowRootInit} */\n      const options = {\n        mode: 'open',\n        ...shadowRootOptions,\n        customElements: this.registry,\n        registry: this.registry,\n      };\n\n      const createdRoot = this.attachShadow(options);\n      if (supportsScopedRegistry) {\n        this.renderOptions.creationScope = createdRoot;\n      }\n\n      if (createdRoot instanceof ShadowRoot) {\n        adoptStyles(createdRoot, elementStyles);\n        this.renderOptions.renderBefore = this.renderOptions.renderBefore || createdRoot.firstChild;\n      }\n\n      return createdRoot;\n    }\n\n    createScopedElement(tagName) {\n      const root = supportsScopedRegistry ? this.shadowRoot : document;\n      // @ts-ignore polyfill to support createElement on shadowRoot is loaded\n      return root.createElement(tagName);\n    }\n\n    /**\n     * Defines a scoped element.\n     *\n     * @param {string} tagName\n     * @param {typeof HTMLElement} klass\n     */\n    defineScopedElement(tagName, klass) {\n      const registeredClass = this.registry.get(tagName);\n      if (registeredClass && supportsScopedRegistry === false && registeredClass !== klass) {\n        // eslint-disable-next-line no-console\n        console.error(\n          [\n            `You are trying to re-register the \"${tagName}\" custom element with a different class via ScopedElementsMixin.`,\n            'This is only possible with a CustomElementRegistry.',\n            'Your browser does not support this feature so you will need to load a polyfill for it.',\n            'Load \"@webcomponents/scoped-custom-element-registry\" before you register ANY web component to the global customElements registry.',\n            'e.g. add \"<script src=\"/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js\"></script>\" as your first script tag.',\n            'For more details you can visit https://open-wc.org/docs/development/scoped-elements/',\n          ].join('\\n'),\n        );\n      }\n      if (!registeredClass) {\n        return this.registry.define(tagName, klass);\n      }\n      return this.registry.get(tagName);\n    }\n\n    /**\n     * @deprecated use the native el.tagName instead\n     *\n     * @param {string} tagName\n     * @returns {string} the tag name\n     */\n    // eslint-disable-next-line class-methods-use-this\n    getScopedTagName(tagName) {\n      // @ts-ignore\n      return this.constructor.getScopedTagName(tagName);\n    }\n\n    /**\n     * @deprecated use the native el.tagName instead\n     *\n     * @param {string} tagName\n     * @returns {string} the tag name\n     */\n    // eslint-disable-next-line class-methods-use-this\n    static getScopedTagName(tagName) {\n      // @ts-ignore\n      return this.__registry.get(tagName) ? tagName : undefined;\n    }\n  };\n\nexport const ScopedElementsMixin = dedupeMixin(ScopedElementsMixinImplementation);\n", "import { dedupeMixin } from '@open-wc/dedupe-mixin';\n\n/**\n * @typedef {import('../types/DisabledMixinTypes').DisabledMixin} DisabledMixin\n */\n\n/**\n * @type {DisabledMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('../index').LitElement>} superclass\n */\nconst DisabledMixinImplementation = superclass =>\n  // eslint-disable-next-line no-shadow\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class extends superclass {\n    static get properties() {\n      return {\n        disabled: {\n          type: Boolean,\n          reflect: true,\n        },\n      };\n    }\n\n    constructor() {\n      super();\n      /** @protected */\n      this._requestedToBeDisabled = false;\n      /** @private */\n      this.__isUserSettingDisabled = true;\n      /** @private */\n      this.__restoreDisabledTo = false;\n      this.disabled = false;\n    }\n\n    makeRequestToBeDisabled() {\n      if (this._requestedToBeDisabled === false) {\n        this._requestedToBeDisabled = true;\n        this.__restoreDisabledTo = this.disabled;\n        this.__internalSetDisabled(true);\n      }\n    }\n\n    retractRequestToBeDisabled() {\n      if (this._requestedToBeDisabled === true) {\n        this._requestedToBeDisabled = false;\n        this.__internalSetDisabled(this.__restoreDisabledTo);\n      }\n    }\n\n    /**\n     * @param {boolean} value\n     * @private\n     */\n    __internalSetDisabled(value) {\n      this.__isUserSettingDisabled = false;\n      this.disabled = value;\n      this.__isUserSettingDisabled = true;\n    }\n\n    /**\n     * @param {PropertyKey} name\n     * @param {?} oldValue\n     */\n    requestUpdate(name, oldValue) {\n      super.requestUpdate(name, oldValue);\n      if (name === 'disabled') {\n        if (this.__isUserSettingDisabled) {\n          this.__restoreDisabledTo = this.disabled;\n        }\n        if (this.disabled === false && this._requestedToBeDisabled === true) {\n          this.__internalSetDisabled(true);\n        }\n      }\n    }\n  };\n\nexport const DisabledMixin = dedupeMixin(DisabledMixinImplementation);\n", "import { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { DisabledMixin } from './DisabledMixin.js';\n\n/**\n * @typedef {import('../types/DisabledWithTabIndexMixinTypes').DisabledWithTabIndexMixin} DisabledWithTabIndexMixin\n */\n\n/**\n * @type {DisabledWithTabIndexMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('../index').LitElement>} superclass\n */\nconst DisabledWithTabIndexMixinImplementation = superclass =>\n  // eslint-disable-next-line no-shadow\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class extends DisabledMixin(superclass) {\n    static get properties() {\n      return {\n        // we use a property here as if we use the native tabIndex we can not set a default value\n        // in the constructor as it synchronously sets the attribute which is not allowed in the\n        // constructor phase\n        tabIndex: {\n          type: Number,\n          reflect: true,\n          attribute: 'tabindex',\n        },\n      };\n    }\n\n    constructor() {\n      super();\n      /** @private */\n      this.__isUserSettingTabIndex = true;\n      /** @private */\n      this.__restoreTabIndexTo = 0;\n      this.__internalSetTabIndex(0);\n    }\n\n    makeRequestToBeDisabled() {\n      super.makeRequestToBeDisabled();\n      if (this._requestedToBeDisabled === false && this.tabIndex != null) {\n        this.__restoreTabIndexTo = this.tabIndex;\n      }\n    }\n\n    retractRequestToBeDisabled() {\n      super.retractRequestToBeDisabled();\n      if (this._requestedToBeDisabled === true) {\n        this.__internalSetTabIndex(this.__restoreTabIndexTo);\n      }\n    }\n\n    /**\n     * @param {number} value\n     * @private\n     */\n    __internalSetTabIndex(value) {\n      this.__isUserSettingTabIndex = false;\n      this.tabIndex = value;\n      this.__isUserSettingTabIndex = true;\n    }\n\n    /**\n     * @param {PropertyKey} name\n     * @param {?} oldValue\n     */\n    requestUpdate(name, oldValue) {\n      super.requestUpdate(name, oldValue);\n\n      if (name === 'disabled') {\n        if (this.disabled) {\n          this.__internalSetTabIndex(-1);\n        } else {\n          this.__internalSetTabIndex(this.__restoreTabIndexTo);\n        }\n      }\n\n      if (name === 'tabIndex') {\n        if (this.__isUserSettingTabIndex && this.tabIndex != null) {\n          this.__restoreTabIndexTo = this.tabIndex;\n        }\n\n        if (this.tabIndex !== -1 && this._requestedToBeDisabled === true) {\n          this.__internalSetTabIndex(-1);\n        }\n      }\n    }\n\n    /** @param {import('lit-element').PropertyValues } changedProperties */\n    firstUpdated(changedProperties) {\n      super.firstUpdated(changedProperties);\n      // for ShadyDom the timing is a little different and we need to make sure\n      // the tabindex gets correctly updated here\n      if (this.disabled) {\n        this.__internalSetTabIndex(-1);\n      }\n    }\n  };\n\nexport const DisabledWithTabIndexMixin = dedupeMixin(DisabledWithTabIndexMixinImplementation);\n", "/* eslint-disable class-methods-use-this */\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { render } from 'lit';\nimport { isTemplateResult } from 'lit/directive-helpers.js';\n\n/**\n * @typedef {import('../types/SlotMixinTypes').SlotMixin} SlotMixin\n * @typedef {import('../types/SlotMixinTypes').SlotsMap} SlotsMap\n * @typedef {import('../index').LitElement} LitElement\n */\n\n/**\n * @type {SlotMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<LitElement>} superclass\n */\nconst SlotMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class SlotMixin extends superclass {\n    /**\n     * @return {SlotsMap}\n     */\n    get slots() {\n      return {};\n    }\n\n    constructor() {\n      super();\n      /** @private */\n      this.__privateSlots = new Set(null);\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this._connectSlotMixin();\n    }\n\n    /**\n     * @private\n     * @param {import('@lion/core').TemplateResult} template\n     */\n    __renderAsNodes(template) {\n      // @ts-expect-error wait for browser support\n      const supportsScopedRegistry = !!ShadowRoot.prototype.createElement;\n      const registryRoot = supportsScopedRegistry ? this.shadowRoot : document;\n      // @ts-expect-error wait for browser support\n      const tempRenderTarget = registryRoot.createElement('div');\n      // Providing all options breaks Safari; keep host and creationScope\n      const { creationScope, host } = this.renderOptions;\n      render(template, tempRenderTarget, { creationScope, host });\n      return Array.from(tempRenderTarget.childNodes);\n    }\n\n    /**\n     * @protected\n     */\n    _connectSlotMixin() {\n      if (!this.__isConnectedSlotMixin) {\n        Object.keys(this.slots).forEach(slotName => {\n          const hasSlottableFromUser =\n            slotName === ''\n              ? // for default slot (''), we can't use el.slot because polyfill for IE11\n                // will do .querySelector('[slot=]') which produces a fatal error\n                // therefore we check if there's children that do not have a slot attr\n                Array.from(this.children).find(el => !el.hasAttribute('slot'))\n              : Array.from(this.children).find(el => el.slot === slotName);\n\n          if (!hasSlottableFromUser) {\n            const slotContent = this.slots[slotName]();\n            /** @type {Node[]} */\n            let nodes = [];\n\n            if (isTemplateResult(slotContent)) {\n              nodes = this.__renderAsNodes(slotContent);\n            } else if (!Array.isArray(slotContent)) {\n              nodes = [/** @type {Node} */ (slotContent)];\n            }\n\n            nodes.forEach(node => {\n              if (!(node instanceof Node)) {\n                return;\n              }\n              if (node instanceof Element && slotName !== '') {\n                node.setAttribute('slot', slotName);\n              }\n              this.appendChild(node);\n              this.__privateSlots.add(slotName);\n            });\n          }\n        });\n        this.__isConnectedSlotMixin = true;\n      }\n    }\n\n    /**\n     * @param {string} slotName Name of the slot\n     * @return {boolean} true if given slot name been created by SlotMixin\n     * @protected\n     */\n    _isPrivateSlot(slotName) {\n      return this.__privateSlots.has(slotName);\n    }\n  };\n\nexport const SlotMixin = dedupeMixin(SlotMixinImplementation);\n", "/**\n * From https://stackoverflow.com/questions/4565112/javascript-how-to-find-out-if-the-user-browser-is-chrome\n * @param {string} [flavor]\n */\nfunction checkChrome(flavor = 'google-chrome') {\n  const isChromium = /** @type {window & { chrome?: boolean}} */ (window).chrome;\n  if (flavor === 'chromium') {\n    return isChromium;\n  }\n  const winNav = window.navigator;\n  const vendorName = winNav.vendor;\n  const isOpera = typeof (/** @type {window & { opr?: boolean}} */ (window).opr) !== 'undefined';\n  const isIEedge = winNav.userAgent.indexOf('Edge') > -1;\n  const isIOSChrome = winNav.userAgent.match('CriOS');\n\n  if (flavor === 'ios') {\n    return isIOSChrome;\n  }\n\n  if (flavor === 'google-chrome') {\n    return (\n      isChromium !== null &&\n      typeof isChromium !== 'undefined' &&\n      vendorName === 'Google Inc.' &&\n      isOpera === false &&\n      isIEedge === false\n    );\n  }\n\n  return undefined;\n}\n\nexport const browserDetection = {\n  isIE11: /Trident/.test(window.navigator.userAgent),\n  isChrome: checkChrome(),\n  isIOSChrome: checkChrome('ios'),\n  isChromium: checkChrome('chromium'),\n  isMac: navigator.appVersion.indexOf('Mac') !== -1,\n};\n", "/**\n * Generates random unique identifier (for dom elements)\n * @param {string} prefix\n * @return {string} unique id\n */\nexport function uuid(prefix = '') {\n  const elementName = prefix.length > 0 ? `${prefix}-` : '';\n  return `${elementName}${Math.random().toString(36).substr(2, 10)}`;\n}\n", "import { dedupeMixin } from '@lion/core';\n\nconst windowWithOptionalPolyfill =\n  /** @type {Window & typeof globalThis & {applyFocusVisiblePolyfill?: function}} */ (window);\nconst polyfilledNodes = new WeakMap();\n\n/**\n * @param {Node} node\n */\nfunction applyFocusVisiblePolyfillWhenNeeded(node) {\n  if (windowWithOptionalPolyfill.applyFocusVisiblePolyfill && !polyfilledNodes.has(node)) {\n    windowWithOptionalPolyfill.applyFocusVisiblePolyfill(node);\n    polyfilledNodes.set(node, undefined);\n  }\n}\n\n/**\n * @typedef {import('../types/FocusMixinTypes').FocusMixin} FocusMixin\n * @type {FocusMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n */\nconst FocusMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class FocusMixin extends superclass {\n    /** @type {any} */\n    static get properties() {\n      return {\n        focused: { type: Boolean, reflect: true },\n        focusedVisible: { type: Boolean, reflect: true, attribute: 'focused-visible' },\n      };\n    }\n\n    constructor() {\n      super();\n\n      /**\n       * Whether the focusable element within (`._focusableNode`) is focused.\n       * Reflects to attribute '[focused]' as a styling hook\n       * @type {boolean}\n       */\n      this.focused = false;\n\n      /**\n       * Whether the focusable element within (`._focusableNode`) matches ':focus-visible'\n       * Reflects to attribute '[focused-visible]' as a styling hook\n       * See: https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\n       * @type {boolean}\n       */\n      this.focusedVisible = false;\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.__registerEventsForFocusMixin();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__teardownEventsForFocusMixin();\n    }\n\n    /**\n     * Calls `focus()` on focusable element within\n     */\n    focus() {\n      this._focusableNode?.focus();\n    }\n\n    /**\n     * Calls `blur()` on focusable element within\n     */\n    blur() {\n      this._focusableNode?.blur();\n    }\n\n    /**\n     * The focusable element:\n     * could be an input, textarea, select, button or any other element with tabindex > -1\n     * @protected\n     * @type {HTMLElement}\n     */\n    // @ts-ignore it's up to Subclassers to return the right element. This is needed for docs/types\n    // eslint-disable-next-line class-methods-use-this, getter-return, no-empty-function\n    get _focusableNode() {\n      // TODO: [v1]: remove return of _inputNode (it's now here for backwards compatibility)\n      // @ts-expect-error see above\n      return /** @type {HTMLElement} */ (this._inputNode || document.createElement('input'));\n    }\n\n    /**\n     * @private\n     */\n    __onFocus() {\n      this.focused = true;\n\n      if (typeof windowWithOptionalPolyfill.applyFocusVisiblePolyfill === 'function') {\n        this.focusedVisible = this._focusableNode.hasAttribute('data-focus-visible-added');\n      } else\n        try {\n          // Safari throws when matches is called\n          this.focusedVisible = this._focusableNode.matches(':focus-visible');\n        } catch (_) {\n          this.focusedVisible = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    __onBlur() {\n      this.focused = false;\n      this.focusedVisible = false;\n    }\n\n    /**\n     * @private\n     */\n    __registerEventsForFocusMixin() {\n      applyFocusVisiblePolyfillWhenNeeded(this.getRootNode());\n\n      /**\n       * focus\n       * @param {Event} ev\n       */\n      this.__redispatchFocus = ev => {\n        ev.stopPropagation();\n        this.dispatchEvent(new Event('focus'));\n      };\n      this._focusableNode.addEventListener('focus', this.__redispatchFocus);\n\n      /**\n       * blur\n       * @param {Event} ev\n       */\n      this.__redispatchBlur = ev => {\n        ev.stopPropagation();\n        this.dispatchEvent(new Event('blur'));\n      };\n      this._focusableNode.addEventListener('blur', this.__redispatchBlur);\n\n      /**\n       * focusin\n       * @param {Event} ev\n       */\n      this.__redispatchFocusin = ev => {\n        ev.stopPropagation();\n        this.__onFocus();\n        this.dispatchEvent(new Event('focusin', { bubbles: true, composed: true }));\n      };\n      this._focusableNode.addEventListener('focusin', this.__redispatchFocusin);\n\n      /**\n       * focusout\n       * @param {Event} ev\n       */\n      this.__redispatchFocusout = ev => {\n        ev.stopPropagation();\n        this.__onBlur();\n        this.dispatchEvent(new Event('focusout', { bubbles: true, composed: true }));\n      };\n      this._focusableNode.addEventListener('focusout', this.__redispatchFocusout);\n    }\n\n    /**\n     * @private\n     */\n    __teardownEventsForFocusMixin() {\n      this._focusableNode.removeEventListener(\n        'focus',\n        /** @type {EventListenerOrEventListenerObject} */ (this.__redispatchFocus),\n      );\n      this._focusableNode.removeEventListener(\n        'blur',\n        /** @type {EventListenerOrEventListenerObject} */ (this.__redispatchBlur),\n      );\n      this._focusableNode.removeEventListener(\n        'focusin',\n        /** @type {EventListenerOrEventListenerObject} */ (this.__redispatchFocusin),\n      );\n      this._focusableNode.removeEventListener(\n        'focusout',\n        /** @type {EventListenerOrEventListenerObject} */ (this.__redispatchFocusout),\n      );\n    }\n  };\n\n/**\n * For browsers that not support the [spec](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible),\n * be sure to load the polyfill into your application https://github.com/WICG/focus-visible\n * (or go for progressive enhancement).\n */\nexport const FocusMixin = dedupeMixin(FocusMixinImplementation);\n", "/* eslint-disable no-bitwise */\nimport { browserDetection } from '@lion/core';\n\nconst moveDownConditions = [\n  Node.DOCUMENT_POSITION_PRECEDING,\n  Node.DOCUMENT_POSITION_CONTAINS,\n  Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING,\n];\n\n/**\n * @desc Let the order of adding ids to aria element by DOM order, so that the screen reader\n * respects visual order when reading:\n * https://developers.google.com/web/fundamentals/accessibility/focus/dom-order-matters\n * @param {HTMLElement[]} descriptionElements - holds references to description or label elements whose\n * id should be returned\n * @param {Object} opts\n * @param {boolean} [opts.reverse]\n * @returns {HTMLElement[]} sorted set of elements based on dom order\n */\nexport function getAriaElementsInRightDomOrder(descriptionElements, { reverse } = {}) {\n  /**\n   * @param {HTMLElement} a\n   * @param {HTMLElement} b\n   * @return {-1|1}\n   */\n  const putPrecedingSiblingsAndLocalParentsFirst = (a, b) => {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n    const pos = a.compareDocumentPosition(b);\n\n    // Unfortunately, for IE, we have to switch the order (?)\n    if (moveDownConditions.includes(pos)) {\n      return browserDetection.isIE11 ? -1 : 1;\n    }\n    return browserDetection.isIE11 ? 1 : -1;\n  };\n\n  const descriptionEls = descriptionElements.filter(el => el); // filter out null references\n  descriptionEls.sort(putPrecedingSiblingsAndLocalParentsFirst);\n  if (reverse) {\n    descriptionEls.reverse();\n  }\n  return descriptionEls;\n}\n", "/**\n * A modelValue can demand a certain type (Date, Number, Iban etc.). A correct type will always be\n * translatable into a String representation (the value presented to the end user) via the\n * `formatter`. When the type is not valid (usually as a consequence of a user typing in an invalid\n * or incomplete viewValue), the current truth is captured in the `Unparseable` type.\n * For example: a viewValue can't be parsed (for instance 'foo' when the type should be Number).\n\n * The model(value) concept as implemented in lion-web is conceptually comparable to those found in\n * popular systems like Angular and Vue.\n\n * The Unparseable type is an addition on top of this that mainly is added for the following two\n * purposes:\n * - restoring user sessions\n * - realtime updated with all value changes\n */\nexport class Unparseable {\n  /** @param {string} value */\n  constructor(value) {\n    /**\n     * Meta info for restoring serialized Unparseable values\n     * @type {'unparseable'}\n     */\n    this.type = 'unparseable';\n    /**\n     * Stores current view value. For instance, value '09-' is an unparseable Date.\n     * This info can be used to restore previous form states.\n     * @type {string}\n     */\n    this.viewValue = value;\n  }\n\n  toString() {\n    return JSON.stringify({ type: this.type, viewValue: this.viewValue });\n  }\n}\n", "import { dedupeMixin } from '@lion/core';\n\n/**\n * @typedef {import('@lion/core').LitElement} LitElement\n * @typedef {import('../../types/FormControlMixinTypes').FormControlHost} FormControlHost\n * @typedef {import('../../types/registration/FormRegisteringMixinTypes').FormRegisteringMixin} FormRegisteringMixin\n * @typedef {import('../../types/registration/FormRegisteringMixinTypes').FormRegisteringHost} FormRegisteringHost\n * @typedef {import('../../types/registration/FormRegistrarMixinTypes').ElementWithParentFormGroup} ElementWithParentFormGroup\n * @typedef {import('../../types/registration/FormRegistrarMixinTypes').FormRegistrarHost} FormRegistrarHost\n */\n\n/**\n * #FormRegisteringMixin:\n *\n * This Mixin registers a form element to a Registrar\n *\n * @type {FormRegisteringMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<LitElement>} superclass\n */\nconst FormRegisteringMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class extends superclass {\n    constructor() {\n      super();\n      /**\n       * The registrar this FormControl registers to, Usually a descendant of FormGroup or\n       * ChoiceGroup\n       * @type {FormRegistrarHost | undefined}\n       */\n      this._parentFormGroup = undefined;\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.dispatchEvent(\n        new CustomEvent('form-element-register', {\n          detail: { element: this },\n          bubbles: true,\n        }),\n      );\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__unregisterFormElement();\n    }\n\n    /**\n     * Putting this in a separate method makes testing easier\n     * @private\n     */\n    __unregisterFormElement() {\n      if (this._parentFormGroup) {\n        this._parentFormGroup.removeFormElement(/** @type {* & FormRegisteringHost} */ (this));\n      }\n    }\n  };\n\nexport const FormRegisteringMixin = dedupeMixin(FormRegisteringMixinImplementation);\n", "import { css, dedupeMixin, html, nothing, SlotMixin, DisabledMixin, uuid } from '@lion/core';\nimport { getAriaElementsInRightDomOrder } from './utils/getAriaElementsInRightDomOrder.js';\nimport { Unparseable } from './validate/Unparseable.js';\nimport { FormRegisteringMixin } from './registration/FormRegisteringMixin.js';\n\n/**\n * @typedef {import('@lion/core').TemplateResult} TemplateResult\n * @typedef {import('@lion/core').CSSResult} CSSResult\n * @typedef {import('@lion/core').CSSResultArray} CSSResultArray\n * @typedef {import('@lion/core/types/SlotMixinTypes').SlotsMap} SlotsMap\n * @typedef {import('./validate/LionValidationFeedback').LionValidationFeedback} LionValidationFeedback\n * @typedef {import('../types/choice-group/ChoiceInputMixinTypes').ChoiceInputHost} ChoiceInputHost\n * @typedef {import('../types/FormControlMixinTypes.js').FormControlHost} FormControlHost\n * @typedef {import('../types/FormControlMixinTypes.js').HTMLElementWithValue} HTMLElementWithValue\n * @typedef {import('../types/FormControlMixinTypes.js').FormControlMixin} FormControlMixin\n * @typedef {import('../types/FormControlMixinTypes.js').ModelValueEventDetails} ModelValueEventDetails\n */\n\n/**\n * #FormControlMixin :\n *\n * This Mixin is a shared fundament for all form components, it's applied on:\n * - LionField (which is extended to LionInput, LionTextarea, LionSelect etc. etc.)\n * - LionFieldset (which is extended to LionRadioGroup, LionCheckboxGroup, LionForm)\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n * @type {FormControlMixin}\n */\nconst FormControlMixinImplementation = superclass =>\n  // eslint-disable-next-line no-shadow, no-unused-vars\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class FormControlMixin extends FormRegisteringMixin(DisabledMixin(SlotMixin(superclass))) {\n    /** @type {any} */\n    static get properties() {\n      return {\n        name: { type: String, reflect: true },\n        readOnly: { type: Boolean, attribute: 'readonly', reflect: true },\n        label: String, // FIXME: { attribute: false } breaks a bunch of tests, but shouldn't...\n        labelSrOnly: { type: Boolean, attribute: 'label-sr-only', reflect: true },\n        helpText: { type: String, attribute: 'help-text' },\n        modelValue: { attribute: false },\n        _ariaLabelledNodes: { attribute: false },\n        _ariaDescribedNodes: { attribute: false },\n        _repropagationRole: { attribute: false },\n        _isRepropagationEndpoint: { attribute: false },\n      };\n    }\n\n    /**\n     * The label text for the input node.\n     * When no light dom defined via [slot=label], this value will be used.\n     * @type {string}\n     */\n    get label() {\n      return this.__label || (this._labelNode && this._labelNode.textContent) || '';\n    }\n\n    /**\n     * @param {string} newValue\n     */\n    set label(newValue) {\n      const oldValue = this.label;\n      /** @type {string} */\n      this.__label = newValue;\n      this.requestUpdate('label', oldValue);\n    }\n\n    /**\n     * The helpt text for the input node.\n     * When no light dom defined via [slot=help-text], this value will be used\n     * @type {string}\n     */\n    get helpText() {\n      return this.__helpText || (this._helpTextNode && this._helpTextNode.textContent) || '';\n    }\n\n    /**\n     * @param {string} newValue\n     */\n    set helpText(newValue) {\n      const oldValue = this.helpText;\n      /** @type {string} */\n      this.__helpText = newValue;\n      this.requestUpdate('helpText', oldValue);\n    }\n\n    /**\n     * Will be used in validation messages to refer to the current field\n     * @type {string}\n     */\n    get fieldName() {\n      return this.__fieldName || this.label || this.name || '';\n    }\n\n    /**\n     * @param {string} value\n     */\n    set fieldName(value) {\n      /** @type {string} */\n      this.__fieldName = value;\n    }\n\n    /**\n     * @configure SlotMixin\n     */\n    get slots() {\n      return {\n        ...super.slots,\n        label: () => {\n          const label = document.createElement('label');\n          label.textContent = this.label;\n          return label;\n        },\n        'help-text': () => {\n          const helpText = document.createElement('div');\n          helpText.textContent = this.helpText;\n          return helpText;\n        },\n      };\n    }\n\n    /**\n     * The interactive (form) element. Can be a native element like input/textarea/select or\n     * an element with tabindex > -1\n     * @protected\n     */\n    get _inputNode() {\n      return /** @type {HTMLElementWithValue} */ (this.__getDirectSlotChild('input'));\n    }\n\n    /**\n     * Element where label will be rendered to\n     * @protected\n     */\n    get _labelNode() {\n      return /** @type {HTMLElement} */ (this.__getDirectSlotChild('label'));\n    }\n\n    /**\n     * Element where help text will be rendered to\n     * @protected\n     */\n    get _helpTextNode() {\n      return /** @type {HTMLElement} */ (this.__getDirectSlotChild('help-text'));\n    }\n\n    /**\n     * Element where validation feedback will be rendered to\n     * @protected\n     */\n    get _feedbackNode() {\n      return /** @type {LionValidationFeedback} */ (this.__getDirectSlotChild('feedback'));\n    }\n\n    constructor() {\n      super();\n\n      /**\n       * The name the element will be registered with to the .formElements collection\n       * of the parent. Also, it serves as the key of key/value pairs in\n       *  modelValue/serializedValue objects\n       * @type {string}\n       */\n      this.name = '';\n\n      /**\n       * A Boolean attribute which, if present, indicates that the user should not be able to edit\n       * the value of the input. The difference between disabled and readonly is that read-only\n       * controls can still function, whereas disabled controls generally do not function as\n       * controls until they are enabled.\n       * (From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\n       * @type {boolean}\n       */\n      this.readOnly = false;\n\n      /**\n       * The label text for the input node.\n       * When no value is defined, textContent of [slot=label] will be used\n       * @type {string}\n       */\n      this.label = '';\n\n      /**\n       * The label will only be visible for srceen readers when true\n       * @type {boolean}\n       */\n      this.labelSrOnly = false;\n\n      /**\n       * The helpt text for the input node.\n       * When no value is defined, textContent of [slot=help-text] will be used\n       * @type {string}\n       */\n      this.helpText = '';\n\n      /**\n       * The model value is the result of the parser function(when available).\n       * It should be considered as the internal value used for validation and reasoning/logic.\n       * The model value is 'ready for consumption' by the outside world (think of a Date\n       * object or a float). The modelValue can(and is recommended to) be used as both input\n       * value and output value of the `LionField`.\n       *\n       * Examples:\n       * - For a date input: a String '20/01/1999' will be converted to new Date('1999/01/20')\n       * - For a number input: a formatted String '1.234,56' will be converted to a Number:\n       *   1234.56\n       */\n      // TODO: we can probably set this up properly once propert effects run from firstUpdated\n      // this.modelValue = undefined;\n      /**\n       * Unique id that can be used in all light dom\n       * @type {string}\n       * @protected\n       */\n      this._inputId = uuid(this.localName);\n\n      /**\n       * Contains all elements that should end up in aria-labelledby of `._inputNode`\n       * @type {HTMLElement[]}\n       */\n      this._ariaLabelledNodes = [];\n\n      /**\n       * Contains all elements that should end up in aria-describedby of `._inputNode`\n       * @type {HTMLElement[]}\n       */\n      this._ariaDescribedNodes = [];\n\n      /**\n       * Based on the role, details of handling model-value-changed repropagation differ.\n       * @type {'child'|'choice-group'|'fieldset'}\n       */\n      this._repropagationRole = 'child';\n\n      /**\n       * By default, a field with _repropagationRole 'choice-group' will act as an\n       * 'endpoint'. This means it will be considered as an individual field: for\n       * a select, individual options will not be part of the formPath. They\n       * will.\n       * Similarly, components that (a11y wise) need to be fieldsets, but 'interaction wise'\n       * (from Application Developer perspective) need to be more like fields\n       * (think of an amount-input with a currency select box next to it), can set this\n       * to true to hide private internals in the formPath.\n       * @type {boolean}\n       */\n      this._isRepropagationEndpoint = false;\n\n      this.addEventListener(\n        'model-value-changed',\n        /** @type {EventListenerOrEventListenerObject} */ (this.__repropagateChildrenValues),\n      );\n      /** @type {EventListener} */\n      this._onLabelClick = this._onLabelClick.bind(this);\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this._enhanceLightDomClasses();\n      this._enhanceLightDomA11y();\n      this._triggerInitialModelValueChangedEvent();\n\n      if (this._labelNode) {\n        this._labelNode.addEventListener('click', this._onLabelClick);\n      }\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      if (this._labelNode) {\n        this._labelNode.removeEventListener('click', this._onLabelClick);\n      }\n    }\n\n    /** @param {import('@lion/core').PropertyValues } changedProperties */\n    updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('_ariaLabelledNodes')) {\n        this.__reflectAriaAttr(\n          'aria-labelledby',\n          this._ariaLabelledNodes,\n          this.__reorderAriaLabelledNodes,\n        );\n      }\n\n      if (changedProperties.has('_ariaDescribedNodes')) {\n        this.__reflectAriaAttr(\n          'aria-describedby',\n          this._ariaDescribedNodes,\n          this.__reorderAriaDescribedNodes,\n        );\n      }\n\n      if (changedProperties.has('label') && this._labelNode) {\n        this._labelNode.textContent = this.label;\n      }\n\n      if (changedProperties.has('helpText') && this._helpTextNode) {\n        this._helpTextNode.textContent = this.helpText;\n      }\n\n      if (changedProperties.has('name')) {\n        this.dispatchEvent(\n          /** @privateEvent */\n          new CustomEvent('form-element-name-changed', {\n            detail: { oldName: changedProperties.get('name'), newName: this.name },\n            bubbles: true,\n          }),\n        );\n      }\n    }\n\n    /** @protected */\n    _triggerInitialModelValueChangedEvent() {\n      this._dispatchInitialModelValueChangedEvent();\n    }\n\n    /** @protected */\n    _enhanceLightDomClasses() {\n      if (this._inputNode) {\n        this._inputNode.classList.add('form-control');\n      }\n    }\n\n    /** @protected */\n    _enhanceLightDomA11y() {\n      const { _inputNode, _labelNode, _helpTextNode, _feedbackNode } = this;\n\n      if (_inputNode) {\n        _inputNode.id = _inputNode.id || this._inputId;\n      }\n      if (_labelNode) {\n        _labelNode.setAttribute('for', this._inputId);\n        this.addToAriaLabelledBy(_labelNode, { idPrefix: 'label' });\n      }\n      if (_helpTextNode) {\n        this.addToAriaDescribedBy(_helpTextNode, { idPrefix: 'help-text' });\n      }\n      if (_feedbackNode) {\n        // Generic focus/blur handling that works for both Fields/FormGroups\n        this.addEventListener('focusin', () => {\n          _feedbackNode.setAttribute('aria-live', 'polite');\n        });\n        this.addEventListener('focusout', () => {\n          _feedbackNode.setAttribute('aria-live', 'assertive');\n        });\n\n        this.addToAriaDescribedBy(_feedbackNode, { idPrefix: 'feedback' });\n      }\n      this._enhanceLightDomA11yForAdditionalSlots();\n    }\n\n    /**\n     * Enhances additional slots(prefix, suffix, before, after) defined by developer.\n     *\n     * When boolean attribute data-label or data-description is found,\n     * the slot element will be connected to the input via aria-labelledby or aria-describedby\n     * @param {string[]} additionalSlots\n     * @protected\n     */\n    _enhanceLightDomA11yForAdditionalSlots(\n      additionalSlots = ['prefix', 'suffix', 'before', 'after'],\n    ) {\n      additionalSlots.forEach(additionalSlot => {\n        const element = this.__getDirectSlotChild(additionalSlot);\n        if (element) {\n          if (element.hasAttribute('data-label')) {\n            this.addToAriaLabelledBy(element, { idPrefix: additionalSlot });\n          }\n          if (element.hasAttribute('data-description')) {\n            this.addToAriaDescribedBy(element, { idPrefix: additionalSlot });\n          }\n        }\n      });\n    }\n\n    /**\n     * Will handle help text, validation feedback and character counter,\n     * prefix/suffix/before/after (if they contain data-description flag attr).\n     * Also, contents of id references that will be put in the <lion-field>._ariaDescribedby property\n     * from an external context, will be read by a screen reader.\n     * @param {string} attrName\n     * @param {HTMLElement[]} nodes\n     * @param {boolean|undefined} reorder\n     */\n    __reflectAriaAttr(attrName, nodes, reorder) {\n      if (this._inputNode) {\n        if (reorder) {\n          const insideNodes = nodes.filter(n => this.contains(n));\n          const outsideNodes = nodes.filter(n => !this.contains(n));\n\n          // eslint-disable-next-line no-param-reassign\n          nodes = [...getAriaElementsInRightDomOrder(insideNodes), ...outsideNodes];\n        }\n        const string = nodes.map(n => n.id).join(' ');\n        this._inputNode.setAttribute(attrName, string);\n      }\n    }\n\n    /**\n     * Default Render Result:\n     * <div class=\"form-field__group-one\">\n     *   <div class=\"form-field__label\">\n     *     <slot name=\"label\"></slot>\n     *   </div>\n     *   <small class=\"form-field__help-text\">\n     *     <slot name=\"help-text\"></slot>\n     *   </small>\n     * </div>\n     * <div class=\"form-field__group-two\">\n     *   <div class=\"input-group\">\n     *     <div class=\"input-group__before\">\n     *       <slot name=\"before\"></slot>\n     *     </div>\n     *     <div class=\"input-group__container\">\n     *       <div class=\"input-group__prefix\">\n     *         <slot name=\"prefix\"></slot>\n     *       </div>\n     *       <div class=\"input-group__input\">\n     *         <slot name=\"input\"></slot>\n     *       </div>\n     *       <div class=\"input-group__suffix\">\n     *         <slot name=\"suffix\"></slot>\n     *       </div>\n     *     </div>\n     *     <div class=\"input-group__after\">\n     *       <slot name=\"after\"></slot>\n     *     </div>\n     *   </div>\n     *   <div class=\"form-field__feedback\">\n     *     <slot name=\"feedback\"></slot>\n     *   </div>\n     * </div>\n     */\n    render() {\n      return html`\n        <div class=\"form-field__group-one\">${this._groupOneTemplate()}</div>\n        <div class=\"form-field__group-two\">${this._groupTwoTemplate()}</div>\n      `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    _groupOneTemplate() {\n      return html` ${this._labelTemplate()} ${this._helpTextTemplate()} `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    _groupTwoTemplate() {\n      return html` ${this._inputGroupTemplate()} ${this._feedbackTemplate()} `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _labelTemplate() {\n      return html`\n        <div class=\"form-field__label\">\n          <slot name=\"label\"></slot>\n        </div>\n      `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _helpTextTemplate() {\n      return html`\n        <small class=\"form-field__help-text\">\n          <slot name=\"help-text\"></slot>\n        </small>\n      `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    _inputGroupTemplate() {\n      return html`\n        <div class=\"input-group\">\n          ${this._inputGroupBeforeTemplate()}\n          <div class=\"input-group__container\">\n            ${this._inputGroupPrefixTemplate()} ${this._inputGroupInputTemplate()}\n            ${this._inputGroupSuffixTemplate()}\n          </div>\n          ${this._inputGroupAfterTemplate()}\n        </div>\n      `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _inputGroupBeforeTemplate() {\n      return html`\n        <div class=\"input-group__before\">\n          <slot name=\"before\"></slot>\n        </div>\n      `;\n    }\n\n    /**\n     * @return {TemplateResult | nothing}\n     * @protected\n     */\n    _inputGroupPrefixTemplate() {\n      return !Array.from(this.children).find(child => child.slot === 'prefix')\n        ? nothing\n        : html`\n            <div class=\"input-group__prefix\">\n              <slot name=\"prefix\"></slot>\n            </div>\n          `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _inputGroupInputTemplate() {\n      return html`\n        <div class=\"input-group__input\">\n          <slot name=\"input\"></slot>\n        </div>\n      `;\n    }\n\n    /**\n     * @return {TemplateResult | nothing}\n     * @protected\n     */\n    _inputGroupSuffixTemplate() {\n      return !Array.from(this.children).find(child => child.slot === 'suffix')\n        ? nothing\n        : html`\n            <div class=\"input-group__suffix\">\n              <slot name=\"suffix\"></slot>\n            </div>\n          `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _inputGroupAfterTemplate() {\n      return html`\n        <div class=\"input-group__after\">\n          <slot name=\"after\"></slot>\n        </div>\n      `;\n    }\n\n    /**\n     * @return {TemplateResult}\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _feedbackTemplate() {\n      return html`\n        <div class=\"form-field__feedback\">\n          <slot name=\"feedback\"></slot>\n        </div>\n      `;\n    }\n\n    /**\n     * Used for Required validation and computation of interaction states\n     * @param {any} modelValue\n     * @return {boolean}\n     * @protected\n     */\n    _isEmpty(modelValue = /** @type {any} */ (this).modelValue) {\n      let value = modelValue;\n      if (/** @type {any} */ (this).modelValue instanceof Unparseable) {\n        value = /** @type {any} */ (this).modelValue.viewValue;\n      }\n\n      // Checks for empty platform types: Objects, Arrays, Dates\n      if (typeof value === 'object' && value !== null && !(value instanceof Date)) {\n        return !Object.keys(value).length;\n      }\n\n      // eslint-disable-next-line no-mixed-operators\n      // Checks for empty platform types: Numbers, Booleans\n      const isNumberValue = typeof value === 'number' && (value === 0 || Number.isNaN(value));\n      const isBooleanValue = typeof value === 'boolean' && value === false;\n\n      return !value && !isNumberValue && !isBooleanValue;\n    }\n\n    /**\n     * All CSS below is written from a generic mindset, following BEM conventions:\n     * https://en.bem.info/methodology/\n     * Although the CSS and HTML are implemented by the component, they should be regarded as\n     * totally decoupled.\n     *\n     * Not only does this force us to write better structured css, it also allows for future\n     * reusability in many different ways like:\n     *  - disabling shadow DOM for a component (for water proof encapsulation can be combined with\n     *    a build step)\n     *  - easier translation to more flexible, WebComponents agnostic solutions like JSS\n     *    (allowing extends, mixins, reasoning, IDE integration, tree shaking etc.)\n     *  - export to a CSS module for reuse in an outer context\n     *\n     *\n     * Please note that the HTML structure is purposely 'loose', allowing multiple design systems\n     * to be compatible\n     * with the CSS component.\n     * Note that every occurence of '::slotted(*)' can be rewritten to '> *' for use in an other\n     * context\n     */\n\n    /**\n     * {block} .form-field\n     *\n     * Structure:\n     * - {element}  .form-field__label : a wrapper element around the projected label\n     * - {element}  .form-field__help-text (optional) : a wrapper element around the projected\n     *               help-text\n     * - {block}    .input-group : a container around the input element, including prefixes and\n     *               suffixes\n     * - {element}  .form-field__feedback (optional) : a wrapper element around the projected\n     *               (validation) feedback message\n     *\n     * Modifiers:\n     * - {state} [disabled] when .form-control (<input>, <textarea> etc.) has disabled set\n     *            to true\n     * - {state} [filled] whether <input> has a value\n     * - {state} [touched] whether the user had blurred the field once\n     * - {state} [dirty] whether the value has changed since initial value\n     *\n     * TODO: update states below\n     * These classes are now attributes. Check them agains the new attribute names inside ValidateMixin\n     * and InteractionStateMixin. Some states got renamed. Make sure to use the correct ones!\n     * - {state} .state-focused: when .form-control (<input>, <textarea> etc.) <input> has focus\n     * - {state} .state-invalid: when input has error(s) (regardless of whether they should be\n     *            shown to the user)\n     * - {state} .state-error: when input has error(s) and this/these should be shown to the user\n     * - {state} .state-warning: when input has warning(s) and this/these should be shown to the\n     *            user\n     * - {state} .state-info: when input has info feedback message(s) and this/these should be shown\n     *            to the user\n     * - {state} .state-success: when input has success feedback message(s) and this/these should be\n     *            shown to the user\n     */\n\n    /**\n     * {block} .input-group\n     *\n     * Structure:\n     * - {element} .input-group__before (optional) : a prefix that resides outside the container\n     * - {element} .input-group__container : an inner container: this element contains all styling\n     *  - {element} .input-group__prefix (optional) : a prefix that resides in the container,\n     *               allowing it to be detectable as a :first-child\n     *  - {element} .input-group__input : a wrapper around the form-control component\n     *   - {block} .form-control : the actual input element (input/select/textarea)\n     *  - {element} .input-group__suffix (optional) : a suffix that resides inside the container,\n     *               allowing it to be detectable as a :last-child\n     *  - {element} .input-group__bottom (optional) : placeholder element for additional styling\n     *               (like an animated line for material design input)\n     * - {element} .input-group__after (optional) :  a suffix that resides outside the container\n     */\n    static get styles() {\n      return [\n        css`\n          /**********************\n            {block} .form-field\n           ********************/\n\n          :host {\n            display: block;\n          }\n\n          :host([hidden]) {\n            display: none;\n          }\n\n          :host([disabled]) {\n            pointer-events: none;\n          }\n\n          :host([disabled]) .form-field__label ::slotted(*),\n          :host([disabled]) .form-field__help-text ::slotted(*) {\n            color: var(--disabled-text-color, #767676);\n          }\n\n          :host([label-sr-only]) .form-field__label {\n            position: absolute;\n            top: 0;\n            width: 1px;\n            height: 1px;\n            overflow: hidden;\n            clip-path: inset(100%);\n            clip: rect(1px, 1px, 1px, 1px);\n            white-space: nowrap;\n            border: 0;\n            margin: 0;\n            padding: 0;\n          }\n\n          /***********************\n            {block} .input-group\n           *********************/\n\n          .input-group__container {\n            display: flex;\n          }\n\n          .input-group__input {\n            flex: 1;\n            display: flex;\n          }\n\n          /***** {state} :disabled *****/\n          :host([disabled]) .input-group ::slotted([slot='input']) {\n            color: var(--disabled-text-color, #767676);\n          }\n\n          /***********************\n            {block} .form-control\n           **********************/\n\n          .input-group__container > .input-group__input ::slotted(.form-control) {\n            flex: 1 1 auto;\n            margin: 0; /* remove input margin in Safari */\n            font-size: 100%; /* normalize default input font-size */\n          }\n        `,\n      ];\n    }\n\n    /**\n     * This function exposes descripion elements that a FormGroup should expose to its\n     * children. See FormGroupMixin.__getAllDescriptionElementsInParentChain()\n     * @return {Array.<HTMLElement>}\n     * @protected\n     */\n    // Returns dom references to all elements that should be referred to by field(s)\n    _getAriaDescriptionElements() {\n      return [this._helpTextNode, this._feedbackNode];\n    }\n\n    /**\n     * Allows to add extra element references to aria-labelledby attribute.\n     * @param {HTMLElement} element\n     * @param {{idPrefix?:string; reorder?: boolean}} customConfig\n     */\n    addToAriaLabelledBy(element, { idPrefix = '', reorder = true } = {}) {\n      // eslint-disable-next-line no-param-reassign\n      element.id = element.id || `${idPrefix}-${this._inputId}`;\n      if (!this._ariaLabelledNodes.includes(element)) {\n        this._ariaLabelledNodes = [...this._ariaLabelledNodes, element];\n        // This value will be read when we need to reflect to attr\n        /** @type {boolean} */\n        this.__reorderAriaLabelledNodes = Boolean(reorder);\n      }\n    }\n\n    /**\n     * Allows to remove element references from aria-labelledby attribute.\n     * @param {HTMLElement} element\n     */\n    removeFromAriaLabelledBy(element) {\n      if (this._ariaLabelledNodes.includes(element)) {\n        this._ariaLabelledNodes.splice(this._ariaLabelledNodes.indexOf(element), 1);\n        this._ariaLabelledNodes = [...this._ariaLabelledNodes];\n        // This value will be read when we need to reflect to attr\n        /** @type {boolean} */\n        this.__reorderAriaLabelledNodes = false;\n      }\n    }\n\n    /**\n     * Allows to add element references to aria-describedby attribute.\n     * @param {HTMLElement} element\n     * @param {{idPrefix?:string; reorder?: boolean}} customConfig\n     */\n    addToAriaDescribedBy(element, { idPrefix = '', reorder = true } = {}) {\n      // eslint-disable-next-line no-param-reassign\n      element.id = element.id || `${idPrefix}-${this._inputId}`;\n      if (!this._ariaDescribedNodes.includes(element)) {\n        this._ariaDescribedNodes = [...this._ariaDescribedNodes, element];\n        // This value will be read when we need to reflect to attr\n        /** @type {boolean} */\n        this.__reorderAriaDescribedNodes = Boolean(reorder);\n      }\n    }\n\n    /**\n     * Allows to remove element references from aria-describedby attribute.\n     * @param {HTMLElement} element\n     */\n    removeFromAriaDescribedBy(element) {\n      if (this._ariaDescribedNodes.includes(element)) {\n        this._ariaDescribedNodes.splice(this._ariaDescribedNodes.indexOf(element), 1);\n        this._ariaDescribedNodes = [...this._ariaDescribedNodes];\n        // This value will be read when we need to reflect to attr\n        /** @type {boolean} */\n        this.__reorderAriaLabelledNodes = false;\n      }\n    }\n\n    /**\n     * @param {string} slotName\n     * @return {HTMLElement | undefined}\n     */\n    __getDirectSlotChild(slotName) {\n      return /** @type {HTMLElement[]} */ (Array.from(this.children)).find(\n        el => el.slot === slotName,\n      );\n    }\n\n    _dispatchInitialModelValueChangedEvent() {\n      // When we are not a fieldset / choice-group, we don't need to wait for our children\n      // to send a unified event\n      if (this._repropagationRole === 'child') {\n        return;\n      }\n\n      // Initially we don't repropagate model-value-changed events coming\n      // from children. On firstUpdated we re-dispatch this event to maintain\n      // 'count consistency' (to not confuse the application developer with a\n      // large number of initial events). Initially the source field will not\n      // be part of the formPath but afterwards it will.\n      /** @type {boolean} */\n      this.__repropagateChildrenInitialized = true;\n      this.dispatchEvent(\n        new CustomEvent('model-value-changed', {\n          bubbles: true,\n          detail: /** @type {ModelValueEventDetails} */ ({\n            formPath: [this],\n            initialize: true,\n            isTriggeredByUser: false,\n          }),\n        }),\n      );\n    }\n\n    /**\n     * Hook for Subclassers to add logic before repropagation\n     * @configurable\n     * @param {CustomEvent} ev\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    _onBeforeRepropagateChildrenValues(ev) {}\n\n    /**\n     * @param {CustomEvent} ev\n     */\n    __repropagateChildrenValues(ev) {\n      // Allows sub classes to internally listen to the children change events\n      // (before stopImmediatePropagation is called below).\n      this._onBeforeRepropagateChildrenValues(ev);\n      // Normalize target, we also might get it from 'portals' (rich select)\n      const target = (ev.detail && ev.detail.element) || ev.target;\n      const isEndpoint =\n        this._isRepropagationEndpoint || this._repropagationRole === 'choice-group';\n\n      // Prevent eternal loops after we sent the event below.\n      if (target === this) {\n        return;\n      }\n\n      // A. Stop sibling handlers\n      //\n      // Make sure our sibling event listeners (added by Application developers) will not get\n      // the child model-value-changed event, but the repropagated one at the bottom of this\n      // method\n      ev.stopImmediatePropagation();\n\n      // B1. Are we still initializing? If so, halt...\n      //\n      // Stop repropagating children events before firstUpdated and make sure we de not\n      // repropagate init events of our children (we already sent our own\n      // initial model-value-change event in firstUpdated)\n      const isGroup = this._repropagationRole !== 'child'; // => fieldset or choice-group\n      const isSelfInitializing = isGroup && !this.__repropagateChildrenInitialized;\n      const isChildGroupInitializing = ev.detail && ev.detail.initialize;\n      if (isSelfInitializing || isChildGroupInitializing) {\n        return;\n      }\n\n      // B2. Are we a single choice choice-group? If so, halt when target unchecked\n      // and something else is checked, meaning we will get\n      // another model-value-changed dispatch for the checked target\n      //\n      // We only send the checked changed up (not the unchecked). In this way a choice group\n      // (radio-group, checkbox-group, select/listbox) acts as an 'endpoint' (a single Field)\n      // just like the native <select>\n      if (!this._repropagationCondition(target)) {\n        return;\n      }\n\n      // C1. We are ready to dispatch. Create a formPath\n      //\n      // Compute the formPath. Choice groups are regarded 'end points'\n      let parentFormPath = [];\n      if (!isEndpoint) {\n        parentFormPath = (ev.detail && ev.detail.formPath) || [target];\n      }\n      const formPath = [...parentFormPath, this];\n\n      // C2. Finally, redispatch a fresh model-value-changed event from our host, consumable\n      // for an Application Developer\n      //\n      // Since for a11y everything needs to be in lightdom, we don't add 'composed:true'\n      this.dispatchEvent(\n        new CustomEvent('model-value-changed', {\n          bubbles: true,\n          detail: /** @type {ModelValueEventDetails} */ ({\n            formPath,\n            isTriggeredByUser: Boolean(ev.detail?.isTriggeredByUser),\n          }),\n        }),\n      );\n    }\n\n    /**\n     * Based on provided target, this condition determines whether received model-value-changed\n     * event should be repropagated\n     * @param {FormControlHost} target\n     * @protected\n     * @overridable\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _repropagationCondition(target) {\n      return Boolean(target);\n    }\n\n    /**\n     * @overridable\n     * A Subclasser should only override this method if the interactive element\n     * ([slot=input]) is not a native element(like input, textarea, select)\n     * that already receives focus on label click.\n     *\n     * @example\n     * _onLabelClick() {\n     *   this._invokerNode.focus();\n     * }\n     * @protected\n     */\n    // eslint-disable-next-line class-methods-use-this\n    _onLabelClick() {}\n  };\n\nexport const FormControlMixin = dedupeMixin(FormControlMixinImplementation);\n", "const sym = Symbol.for('lion::SingletonManagerClassStorage');\n\n/**\n * Allow compatibility with node-js (for ssr).\n * In the future, we can just use globalThis directly\n * (for now, we're backwards compatible with browsers that still only use window, since we don't know all contexts singleton-manager is used in).\n */\n// eslint-disable-next-line no-undef\nconst globalThisOrWindow = globalThis || window;\nexport class SingletonManagerClass {\n  constructor() {\n    /** @protected */\n    this._map = globalThisOrWindow[sym]\n      ? globalThisOrWindow[sym]\n      : (globalThisOrWindow[sym] = new Map());\n  }\n\n  /**\n   * Ignores already existing keys (e.g. it will not override)\n   *\n   * @param {string} key\n   * @param {any} value\n   */\n  set(key, value) {\n    if (!this.has(key)) {\n      this._map.set(key, value);\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @returns\n   */\n  get(key) {\n    return this._map.get(key);\n  }\n\n  /**\n   * @param {string} key\n   */\n  has(key) {\n    return this._map.has(key);\n  }\n}\n", "import { SingletonManagerClass } from './SingletonManagerClass.js';\n\nexport { SingletonManagerClass };\nexport const singletonManager = new SingletonManagerClass();\n", "function createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n// @flow\nvar LONG = 'long';\nvar SHORT = 'short';\nvar NARROW = 'narrow';\nvar NUMERIC = 'numeric';\nvar TWODIGIT = '2-digit';\n\n/**\n * formatting information\n **/\nvar formatMessageFormats = {\n  number: {\n    decimal: {\n      style: 'decimal'\n    },\n    integer: {\n      style: 'decimal',\n      maximumFractionDigits: 0\n    },\n    currency: {\n      style: 'currency',\n      currency: 'USD'\n    },\n    percent: {\n      style: 'percent'\n    },\n    default: {\n      style: 'decimal'\n    }\n  },\n  date: {\n    short: {\n      month: NUMERIC,\n      day: NUMERIC,\n      year: TWODIGIT\n    },\n    medium: {\n      month: SHORT,\n      day: NUMERIC,\n      year: NUMERIC\n    },\n    long: {\n      month: LONG,\n      day: NUMERIC,\n      year: NUMERIC\n    },\n    full: {\n      month: LONG,\n      day: NUMERIC,\n      year: NUMERIC,\n      weekday: LONG\n    },\n    default: {\n      month: SHORT,\n      day: NUMERIC,\n      year: NUMERIC\n    }\n  },\n  time: {\n    short: {\n      hour: NUMERIC,\n      minute: NUMERIC\n    },\n    medium: {\n      hour: NUMERIC,\n      minute: NUMERIC,\n      second: NUMERIC\n    },\n    long: {\n      hour: NUMERIC,\n      minute: NUMERIC,\n      second: NUMERIC,\n      timeZoneName: SHORT\n    },\n    full: {\n      hour: NUMERIC,\n      minute: NUMERIC,\n      second: NUMERIC,\n      timeZoneName: SHORT\n    },\n    default: {\n      hour: NUMERIC,\n      minute: NUMERIC,\n      second: NUMERIC\n    }\n  },\n  duration: {\n    default: {\n      hours: {\n        minimumIntegerDigits: 1,\n        maximumFractionDigits: 0\n      },\n      minutes: {\n        minimumIntegerDigits: 2,\n        maximumFractionDigits: 0\n      },\n      seconds: {\n        minimumIntegerDigits: 2,\n        maximumFractionDigits: 3\n      }\n    }\n  },\n  parseNumberPattern: function (pattern/*: ?string */) {\n    if (!pattern) return\n    var options = {};\n    var currency = pattern.match(/\\b[A-Z]{3}\\b/i);\n    var syms = pattern.replace(/[^\u00A4]/g, '').length;\n    if (!syms && currency) syms = 1;\n    if (syms) {\n      options.style = 'currency';\n      options.currencyDisplay = syms === 1 ? 'symbol' : syms === 2 ? 'code' : 'name';\n      options.currency = currency ? currency[0].toUpperCase() : 'USD';\n    } else if (pattern.indexOf('%') >= 0) {\n      options.style = 'percent';\n    }\n    if (!/[@#0]/.test(pattern)) return options.style ? options : undefined\n    options.useGrouping = pattern.indexOf(',') >= 0;\n    if (/E\\+?[@#0]+/i.test(pattern) || pattern.indexOf('@') >= 0) {\n      var size = pattern.replace(/E\\+?[@#0]+|[^@#0]/gi, '');\n      options.minimumSignificantDigits = Math.min(Math.max(size.replace(/[^@0]/g, '').length, 1), 21);\n      options.maximumSignificantDigits = Math.min(Math.max(size.length, 1), 21);\n    } else {\n      var parts = pattern.replace(/[^#0.]/g, '').split('.');\n      var integer = parts[0];\n      var n = integer.length - 1;\n      while (integer[n] === '0') --n;\n      options.minimumIntegerDigits = Math.min(Math.max(integer.length - 1 - n, 1), 21);\n      var fraction = parts[1] || '';\n      n = 0;\n      while (fraction[n] === '0') ++n;\n      options.minimumFractionDigits = Math.min(Math.max(n, 0), 20);\n      while (fraction[n] === '#') ++n;\n      options.maximumFractionDigits = Math.min(Math.max(n, 0), 20);\n    }\n    return options\n  },\n  parseDatePattern: function (pattern/*: ?string */) {\n    if (!pattern) return\n    var options = {};\n    for (var i = 0; i < pattern.length;) {\n      var current = pattern[i];\n      var n = 1;\n      while (pattern[++i] === current) ++n;\n      switch (current) {\n        case 'G':\n          options.era = n === 5 ? NARROW : n === 4 ? LONG : SHORT;\n          break\n        case 'y':\n        case 'Y':\n          options.year = n === 2 ? TWODIGIT : NUMERIC;\n          break\n        case 'M':\n        case 'L':\n          n = Math.min(Math.max(n - 1, 0), 4);\n          options.month = [ NUMERIC, TWODIGIT, SHORT, LONG, NARROW ][n];\n          break\n        case 'E':\n        case 'e':\n        case 'c':\n          options.weekday = n === 5 ? NARROW : n === 4 ? LONG : SHORT;\n          break\n        case 'd':\n        case 'D':\n          options.day = n === 2 ? TWODIGIT : NUMERIC;\n          break\n        case 'h':\n        case 'K':\n          options.hour12 = true;\n          options.hour = n === 2 ? TWODIGIT : NUMERIC;\n          break\n        case 'H':\n        case 'k':\n          options.hour12 = false;\n          options.hour = n === 2 ? TWODIGIT : NUMERIC;\n          break\n        case 'm':\n          options.minute = n === 2 ? TWODIGIT : NUMERIC;\n          break\n        case 's':\n        case 'S':\n          options.second = n === 2 ? TWODIGIT : NUMERIC;\n          break\n        case 'z':\n        case 'Z':\n        case 'v':\n        case 'V':\n          options.timeZoneName = n === 1 ? SHORT : LONG;\n          break\n      }\n    }\n    return Object.keys(options).length ? options : undefined\n  }\n};\n\n// @flow\n// \"lookup\" algorithm http://tools.ietf.org/html/rfc4647#section-3.4\n// assumes normalized language tags, and matches in a case sensitive manner\nvar lookupClosestLocale = function lookupClosestLocale (locale/*: string | string[] | void */, available/*: { [string]: any } */)/*: ?string */ {\n  if (typeof locale === 'string' && available[locale]) return locale\n  var locales = [].concat(locale || []);\n  for (var l = 0, ll = locales.length; l < ll; ++l) {\n    var current = locales[l].split('-');\n    while (current.length) {\n      var candidate = current.join('-');\n      if (available[candidate]) return candidate\n      current.pop();\n    }\n  }\n};\n\n// @flow\n\n/*:: export type Rule = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other' */\nvar zero = 'zero', one = 'one', two = 'two', few = 'few', many = 'many', other = 'other';\nvar f = [\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return 0 <= n && n <= 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var n = +s;\n    return i === 0 || n === 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 0 ? zero\n      : n === 1 ? one\n      : n === 2 ? two\n      : 3 <= n % 100 && n % 100 <= 10 ? few\n      : 11 <= n % 100 && n % 100 <= 99 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    return i === 1 && v === 0 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n % 10 === 1 && n % 100 !== 11 ? one\n      : (2 <= n % 10 && n % 10 <= 4) && (n % 100 < 12 || 14 < n % 100) ? few\n      : n % 10 === 0 || (5 <= n % 10 && n % 10 <= 9) || (11 <= n % 100 && n % 100 <= 14) ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n % 10 === 1 && (n % 100 !== 11 && n % 100 !== 71 && n % 100 !== 91) ? one\n      : n % 10 === 2 && (n % 100 !== 12 && n % 100 !== 72 && n % 100 !== 92) ? two\n      : ((3 <= n % 10 && n % 10 <= 4) || n % 10 === 9) && ((n % 100 < 10 || 19 < n % 100) && (n % 100 < 70 || 79 < n % 100) && (n % 100 < 90 || 99 < n % 100)) ? few\n      : n !== 0 && n % 1000000 === 0 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    var f = +(s + '.').split('.')[1];\n    return v === 0 && i % 10 === 1 && i % 100 !== 11 || f % 10 === 1 && f % 100 !== 11 ? one\n      : v === 0 && (2 <= i % 10 && i % 10 <= 4) && (i % 100 < 12 || 14 < i % 100) || (2 <= f % 10 && f % 10 <= 4) && (f % 100 < 12 || 14 < f % 100) ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    return i === 1 && v === 0 ? one\n      : (2 <= i && i <= 4) && v === 0 ? few\n      : v !== 0 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 0 ? zero\n      : n === 1 ? one\n      : n === 2 ? two\n      : n === 3 ? few\n      : n === 6 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var t = +('' + s).replace(/^[^.]*.?|0+$/g, '');\n    var n = +s;\n    return n === 1 || t !== 0 && (i === 0 || i === 1) ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    var f = +(s + '.').split('.')[1];\n    return v === 0 && i % 100 === 1 || f % 100 === 1 ? one\n      : v === 0 && i % 100 === 2 || f % 100 === 2 ? two\n      : v === 0 && (3 <= i % 100 && i % 100 <= 4) || (3 <= f % 100 && f % 100 <= 4) ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    return i === 0 || i === 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    var f = +(s + '.').split('.')[1];\n    return v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && (i % 10 !== 4 && i % 10 !== 6 && i % 10 !== 9) || v !== 0 && (f % 10 !== 4 && f % 10 !== 6 && f % 10 !== 9) ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 ? one\n      : n === 2 ? two\n      : 3 <= n && n <= 6 ? few\n      : 7 <= n && n <= 10 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 || n === 11 ? one\n      : n === 2 || n === 12 ? two\n      : ((3 <= n && n <= 10) || (13 <= n && n <= 19)) ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    return v === 0 && i % 10 === 1 ? one\n      : v === 0 && i % 10 === 2 ? two\n      : v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80) ? few\n      : v !== 0 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    var n = +s;\n    return i === 1 && v === 0 ? one\n      : i === 2 && v === 0 ? two\n      : v === 0 && (n < 0 || 10 < n) && n % 10 === 0 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var t = +('' + s).replace(/^[^.]*.?|0+$/g, '');\n    return t === 0 && i % 10 === 1 && i % 100 !== 11 || t !== 0 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 ? one\n      : n === 2 ? two\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 0 ? zero\n      : n === 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var n = +s;\n    return n === 0 ? zero\n      : (i === 0 || i === 1) && n !== 0 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var f = +(s + '.').split('.')[1];\n    var n = +s;\n    return n % 10 === 1 && (n % 100 < 11 || 19 < n % 100) ? one\n      : (2 <= n % 10 && n % 10 <= 9) && (n % 100 < 11 || 19 < n % 100) ? few\n      : f !== 0 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var v = (s + '.').split('.')[1].length;\n    var f = +(s + '.').split('.')[1];\n    var n = +s;\n    return n % 10 === 0 || (11 <= n % 100 && n % 100 <= 19) || v === 2 && (11 <= f % 100 && f % 100 <= 19) ? zero\n      : n % 10 === 1 && n % 100 !== 11 || v === 2 && f % 10 === 1 && f % 100 !== 11 || v !== 2 && f % 10 === 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    var f = +(s + '.').split('.')[1];\n    return v === 0 && i % 10 === 1 && i % 100 !== 11 || f % 10 === 1 && f % 100 !== 11 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    var n = +s;\n    return i === 1 && v === 0 ? one\n      : v !== 0 || n === 0 || n !== 1 && (1 <= n % 100 && n % 100 <= 19) ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 ? one\n      : n === 0 || (2 <= n % 100 && n % 100 <= 10) ? few\n      : 11 <= n % 100 && n % 100 <= 19 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    return i === 1 && v === 0 ? one\n      : v === 0 && (2 <= i % 10 && i % 10 <= 4) && (i % 100 < 12 || 14 < i % 100) ? few\n      : v === 0 && i !== 1 && (0 <= i % 10 && i % 10 <= 1) || v === 0 && (5 <= i % 10 && i % 10 <= 9) || v === 0 && (12 <= i % 100 && i % 100 <= 14) ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    return 0 <= i && i <= 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    return v === 0 && i % 10 === 1 && i % 100 !== 11 ? one\n      : v === 0 && (2 <= i % 10 && i % 10 <= 4) && (i % 100 < 12 || 14 < i % 100) ? few\n      : v === 0 && i % 10 === 0 || v === 0 && (5 <= i % 10 && i % 10 <= 9) || v === 0 && (11 <= i % 100 && i % 100 <= 14) ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var n = +s;\n    return i === 0 || n === 1 ? one\n      : 2 <= n && n <= 10 ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var f = +(s + '.').split('.')[1];\n    var n = +s;\n    return (n === 0 || n === 1) || i === 0 && f === 1 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    var v = (s + '.').split('.')[1].length;\n    return v === 0 && i % 100 === 1 ? one\n      : v === 0 && i % 100 === 2 ? two\n      : v === 0 && (3 <= i % 100 && i % 100 <= 4) || v !== 0 ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return (0 <= n && n <= 1) || (11 <= n && n <= 99) ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 || n === 5 || n === 7 || n === 8 || n === 9 || n === 10 ? one\n      : n === 2 || n === 3 ? two\n      : n === 4 ? few\n      : n === 6 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    return (i % 10 === 1 || i % 10 === 2 || i % 10 === 5 || i % 10 === 7 || i % 10 === 8) || (i % 100 === 20 || i % 100 === 50 || i % 100 === 70 || i % 100 === 80) ? one\n      : (i % 10 === 3 || i % 10 === 4) || (i % 1000 === 100 || i % 1000 === 200 || i % 1000 === 300 || i % 1000 === 400 || i % 1000 === 500 || i % 1000 === 600 || i % 1000 === 700 || i % 1000 === 800 || i % 1000 === 900) ? few\n      : i === 0 || i % 10 === 6 || (i % 100 === 40 || i % 100 === 60 || i % 100 === 90) ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return (n % 10 === 2 || n % 10 === 3) && (n % 100 !== 12 && n % 100 !== 13) ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 || n === 3 ? one\n      : n === 2 ? two\n      : n === 4 ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 0 || n === 7 || n === 8 || n === 9 ? zero\n      : n === 1 ? one\n      : n === 2 ? two\n      : n === 3 || n === 4 ? few\n      : n === 5 || n === 6 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n % 10 === 1 && n % 100 !== 11 ? one\n      : n % 10 === 2 && n % 100 !== 12 ? two\n      : n % 10 === 3 && n % 100 !== 13 ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 ? one\n      : n === 2 || n === 3 ? two\n      : n === 4 ? few\n      : n === 6 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 || n === 5 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 11 || n === 8 || n === 80 || n === 800 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    return i === 1 ? one\n      : i === 0 || ((2 <= i % 100 && i % 100 <= 20) || i % 100 === 40 || i % 100 === 60 || i % 100 === 80) ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n % 10 === 6 || n % 10 === 9 || n % 10 === 0 && n !== 0 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var i = Math.floor(Math.abs(+s));\n    return i % 10 === 1 && i % 100 !== 11 ? one\n      : i % 10 === 2 && i % 100 !== 12 ? two\n      : (i % 10 === 7 || i % 10 === 8) && (i % 100 !== 17 && i % 100 !== 18) ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 ? one\n      : n === 2 || n === 3 ? two\n      : n === 4 ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return 1 <= n && n <= 4 ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return (n === 1 || n === 5 || (7 <= n && n <= 9)) ? one\n      : n === 2 || n === 3 ? two\n      : n === 4 ? few\n      : n === 6 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n === 1 ? one\n      : n % 10 === 4 && n % 100 !== 14 ? many\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return (n % 10 === 1 || n % 10 === 2) && (n % 100 !== 11 && n % 100 !== 12) ? one\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return (n % 10 === 6 || n % 10 === 9) || n === 10 ? few\n      : other\n  },\n  function (s/*: string | number */)/*: Rule */ {\n    var n = +s;\n    return n % 10 === 3 && n % 100 !== 13 ? few\n      : other\n  }\n];\n\nvar plurals = {\n  af: { cardinal: f[0] },\n  ak: { cardinal: f[1] },\n  am: { cardinal: f[2] },\n  ar: { cardinal: f[3] },\n  ars: { cardinal: f[3] },\n  as: { cardinal: f[2], ordinal: f[34] },\n  asa: { cardinal: f[0] },\n  ast: { cardinal: f[4] },\n  az: { cardinal: f[0], ordinal: f[35] },\n  be: { cardinal: f[5], ordinal: f[36] },\n  bem: { cardinal: f[0] },\n  bez: { cardinal: f[0] },\n  bg: { cardinal: f[0] },\n  bh: { cardinal: f[1] },\n  bn: { cardinal: f[2], ordinal: f[34] },\n  br: { cardinal: f[6] },\n  brx: { cardinal: f[0] },\n  bs: { cardinal: f[7] },\n  ca: { cardinal: f[4], ordinal: f[37] },\n  ce: { cardinal: f[0] },\n  cgg: { cardinal: f[0] },\n  chr: { cardinal: f[0] },\n  ckb: { cardinal: f[0] },\n  cs: { cardinal: f[8] },\n  cy: { cardinal: f[9], ordinal: f[38] },\n  da: { cardinal: f[10] },\n  de: { cardinal: f[4] },\n  dsb: { cardinal: f[11] },\n  dv: { cardinal: f[0] },\n  ee: { cardinal: f[0] },\n  el: { cardinal: f[0] },\n  en: { cardinal: f[4], ordinal: f[39] },\n  eo: { cardinal: f[0] },\n  es: { cardinal: f[0] },\n  et: { cardinal: f[4] },\n  eu: { cardinal: f[0] },\n  fa: { cardinal: f[2] },\n  ff: { cardinal: f[12] },\n  fi: { cardinal: f[4] },\n  fil: { cardinal: f[13], ordinal: f[0] },\n  fo: { cardinal: f[0] },\n  fr: { cardinal: f[12], ordinal: f[0] },\n  fur: { cardinal: f[0] },\n  fy: { cardinal: f[4] },\n  ga: { cardinal: f[14], ordinal: f[0] },\n  gd: { cardinal: f[15] },\n  gl: { cardinal: f[4] },\n  gsw: { cardinal: f[0] },\n  gu: { cardinal: f[2], ordinal: f[40] },\n  guw: { cardinal: f[1] },\n  gv: { cardinal: f[16] },\n  ha: { cardinal: f[0] },\n  haw: { cardinal: f[0] },\n  he: { cardinal: f[17] },\n  hi: { cardinal: f[2], ordinal: f[40] },\n  hr: { cardinal: f[7] },\n  hsb: { cardinal: f[11] },\n  hu: { cardinal: f[0], ordinal: f[41] },\n  hy: { cardinal: f[12], ordinal: f[0] },\n  io: { cardinal: f[4] },\n  is: { cardinal: f[18] },\n  it: { cardinal: f[4], ordinal: f[42] },\n  iu: { cardinal: f[19] },\n  iw: { cardinal: f[17] },\n  jgo: { cardinal: f[0] },\n  ji: { cardinal: f[4] },\n  jmc: { cardinal: f[0] },\n  ka: { cardinal: f[0], ordinal: f[43] },\n  kab: { cardinal: f[12] },\n  kaj: { cardinal: f[0] },\n  kcg: { cardinal: f[0] },\n  kk: { cardinal: f[0], ordinal: f[44] },\n  kkj: { cardinal: f[0] },\n  kl: { cardinal: f[0] },\n  kn: { cardinal: f[2] },\n  ks: { cardinal: f[0] },\n  ksb: { cardinal: f[0] },\n  ksh: { cardinal: f[20] },\n  ku: { cardinal: f[0] },\n  kw: { cardinal: f[19] },\n  ky: { cardinal: f[0] },\n  lag: { cardinal: f[21] },\n  lb: { cardinal: f[0] },\n  lg: { cardinal: f[0] },\n  ln: { cardinal: f[1] },\n  lt: { cardinal: f[22] },\n  lv: { cardinal: f[23] },\n  mas: { cardinal: f[0] },\n  mg: { cardinal: f[1] },\n  mgo: { cardinal: f[0] },\n  mk: { cardinal: f[24], ordinal: f[45] },\n  ml: { cardinal: f[0] },\n  mn: { cardinal: f[0] },\n  mo: { cardinal: f[25], ordinal: f[0] },\n  mr: { cardinal: f[2], ordinal: f[46] },\n  mt: { cardinal: f[26] },\n  nah: { cardinal: f[0] },\n  naq: { cardinal: f[19] },\n  nb: { cardinal: f[0] },\n  nd: { cardinal: f[0] },\n  ne: { cardinal: f[0], ordinal: f[47] },\n  nl: { cardinal: f[4] },\n  nn: { cardinal: f[0] },\n  nnh: { cardinal: f[0] },\n  no: { cardinal: f[0] },\n  nr: { cardinal: f[0] },\n  nso: { cardinal: f[1] },\n  ny: { cardinal: f[0] },\n  nyn: { cardinal: f[0] },\n  om: { cardinal: f[0] },\n  or: { cardinal: f[0], ordinal: f[48] },\n  os: { cardinal: f[0] },\n  pa: { cardinal: f[1] },\n  pap: { cardinal: f[0] },\n  pl: { cardinal: f[27] },\n  prg: { cardinal: f[23] },\n  ps: { cardinal: f[0] },\n  pt: { cardinal: f[28] },\n  'pt-PT': { cardinal: f[4] },\n  rm: { cardinal: f[0] },\n  ro: { cardinal: f[25], ordinal: f[0] },\n  rof: { cardinal: f[0] },\n  ru: { cardinal: f[29] },\n  rwk: { cardinal: f[0] },\n  saq: { cardinal: f[0] },\n  scn: { cardinal: f[4], ordinal: f[42] },\n  sd: { cardinal: f[0] },\n  sdh: { cardinal: f[0] },\n  se: { cardinal: f[19] },\n  seh: { cardinal: f[0] },\n  sh: { cardinal: f[7] },\n  shi: { cardinal: f[30] },\n  si: { cardinal: f[31] },\n  sk: { cardinal: f[8] },\n  sl: { cardinal: f[32] },\n  sma: { cardinal: f[19] },\n  smi: { cardinal: f[19] },\n  smj: { cardinal: f[19] },\n  smn: { cardinal: f[19] },\n  sms: { cardinal: f[19] },\n  sn: { cardinal: f[0] },\n  so: { cardinal: f[0] },\n  sq: { cardinal: f[0], ordinal: f[49] },\n  sr: { cardinal: f[7] },\n  ss: { cardinal: f[0] },\n  ssy: { cardinal: f[0] },\n  st: { cardinal: f[0] },\n  sv: { cardinal: f[4], ordinal: f[50] },\n  sw: { cardinal: f[4] },\n  syr: { cardinal: f[0] },\n  ta: { cardinal: f[0] },\n  te: { cardinal: f[0] },\n  teo: { cardinal: f[0] },\n  ti: { cardinal: f[1] },\n  tig: { cardinal: f[0] },\n  tk: { cardinal: f[0], ordinal: f[51] },\n  tl: { cardinal: f[13], ordinal: f[0] },\n  tn: { cardinal: f[0] },\n  tr: { cardinal: f[0] },\n  ts: { cardinal: f[0] },\n  tzm: { cardinal: f[33] },\n  ug: { cardinal: f[0] },\n  uk: { cardinal: f[29], ordinal: f[52] },\n  ur: { cardinal: f[4] },\n  uz: { cardinal: f[0] },\n  ve: { cardinal: f[0] },\n  vo: { cardinal: f[0] },\n  vun: { cardinal: f[0] },\n  wa: { cardinal: f[1] },\n  wae: { cardinal: f[0] },\n  xh: { cardinal: f[0] },\n  xog: { cardinal: f[0] },\n  yi: { cardinal: f[4] },\n  zu: { cardinal: f[2] },\n  lo: { ordinal: f[0] },\n  ms: { ordinal: f[0] },\n  vi: { ordinal: f[0] }\n};\n\nvar formatMessageInterpret = createCommonjsModule(function (module, exports) {\n\n\n\n\n/*::\nimport type {\n  AST,\n  SubMessages\n} from '../format-message-parse'\ntype Locale = string\ntype Locales = Locale | Locale[]\ntype Placeholder = any[] // https://github.com/facebook/flow/issues/4050\nexport type Type = (Placeholder, Locales) => (any, ?Object) => any\nexport type Types = { [string]: Type }\n*/\n\nexports = module.exports = function interpret (\n  ast/*: AST */,\n  locale/*:: ?: Locales */,\n  types/*:: ?: Types */\n)/*: (args?: Object) => string */ {\n  return interpretAST(ast, null, locale || 'en', types || {}, true)\n};\n\nexports.toParts = function toParts (\n  ast/*: AST */,\n  locale/*:: ?: Locales */,\n  types/*:: ?: Types */\n)/*: (args?: Object) => any[] */ {\n  return interpretAST(ast, null, locale || 'en', types || {}, false)\n};\n\nfunction interpretAST (\n  elements/*: any[] */,\n  parent/*: ?Placeholder */,\n  locale/*: Locales */,\n  types/*: Types */,\n  join/*: boolean */\n)/*: Function */ {\n  var parts = elements.map(function (element) {\n    return interpretElement(element, parent, locale, types, join)\n  });\n\n  if (!join) {\n    return function format (args) {\n      return parts.reduce(function (parts, part) {\n        return parts.concat(part(args))\n      }, [])\n    }\n  }\n\n  if (parts.length === 1) return parts[0]\n  return function format (args) {\n    var message = '';\n    for (var e = 0; e < parts.length; ++e) {\n      message += parts[e](args);\n    }\n    return message\n  }\n}\n\nfunction interpretElement (\n  element/*: Placeholder */,\n  parent/*: ?Placeholder */,\n  locale/*: Locales */,\n  types/*: Types */,\n  join/*: boolean */\n)/*: Function */ {\n  if (typeof element === 'string') {\n    var value/*: string */ = element;\n    return function format () { return value }\n  }\n\n  var id = element[0];\n  var type = element[1];\n\n  if (parent && element[0] === '#') {\n    id = parent[0];\n    var offset = parent[2];\n    var formatter = (types.number || defaults.number)([ id, 'number' ], locale);\n    return function format (args) {\n      return formatter(getArg(id, args) - offset, args)\n    }\n  }\n\n  // pre-process children\n  var children;\n  if (type === 'plural' || type === 'selectordinal') {\n    children = {};\n    Object.keys(element[3]).forEach(function (key) {\n      children[key] = interpretAST(element[3][key], element, locale, types, join);\n    });\n    element = [ element[0], element[1], element[2], children ];\n  } else if (element[2] && typeof element[2] === 'object') {\n    children = {};\n    Object.keys(element[2]).forEach(function (key) {\n      children[key] = interpretAST(element[2][key], element, locale, types, join);\n    });\n    element = [ element[0], element[1], children ];\n  }\n\n  var getFrmt = type && (types[type] || defaults[type]);\n  if (getFrmt) {\n    var frmt = getFrmt(element, locale);\n    return function format (args) {\n      return frmt(getArg(id, args), args)\n    }\n  }\n\n  return join\n    ? function format (args) { return String(getArg(id, args)) }\n    : function format (args) { return getArg(id, args) }\n}\n\nfunction getArg (id/*: string */, args/*: ?Object */)/*: any */ {\n  if (args && (id in args)) return args[id]\n  var parts = id.split('.');\n  var a = args;\n  for (var i = 0, ii = parts.length; a && i < ii; ++i) {\n    a = a[parts[i]];\n  }\n  return a\n}\n\nfunction interpretNumber (element/*: Placeholder */, locales/*: Locales */) {\n  var style = element[2];\n  var options = formatMessageFormats.number[style] || formatMessageFormats.parseNumberPattern(style) || formatMessageFormats.number.default;\n  return new Intl.NumberFormat(locales, options).format\n}\n\nfunction interpretDuration (element/*: Placeholder */, locales/*: Locales */) {\n  var style = element[2];\n  var options = formatMessageFormats.duration[style] || formatMessageFormats.duration.default;\n  var fs = new Intl.NumberFormat(locales, options.seconds).format;\n  var fm = new Intl.NumberFormat(locales, options.minutes).format;\n  var fh = new Intl.NumberFormat(locales, options.hours).format;\n  var sep = /^fi$|^fi-|^da/.test(String(locales)) ? '.' : ':';\n\n  return function (s, args) {\n    s = +s;\n    if (!isFinite(s)) return fs(s)\n    var h = ~~(s / 60 / 60); // ~~ acts much like Math.trunc\n    var m = ~~(s / 60 % 60);\n    var dur = (h ? (fh(Math.abs(h)) + sep) : '') +\n      fm(Math.abs(m)) + sep + fs(Math.abs(s % 60));\n    return s < 0 ? fh(-1).replace(fh(1), dur) : dur\n  }\n}\n\nfunction interpretDateTime (element/*: Placeholder */, locales/*: Locales */) {\n  var type = element[1];\n  var style = element[2];\n  var options = formatMessageFormats[type][style] || formatMessageFormats.parseDatePattern(style) || formatMessageFormats[type].default;\n  return new Intl.DateTimeFormat(locales, options).format\n}\n\nfunction interpretPlural (element/*: Placeholder */, locales/*: Locales */) {\n  var type = element[1];\n  var pluralType = type === 'selectordinal' ? 'ordinal' : 'cardinal';\n  var offset = element[2];\n  var children = element[3];\n  var pluralRules;\n  if (Intl.PluralRules && Intl.PluralRules.supportedLocalesOf(locales).length > 0) {\n    pluralRules = new Intl.PluralRules(locales, { type: pluralType });\n  } else {\n    var locale = lookupClosestLocale(locales, plurals);\n    var select = (locale && plurals[locale][pluralType]) || returnOther;\n    pluralRules = { select: select };\n  }\n\n  return function (value, args) {\n    var clause =\n      children['=' + +value] ||\n      children[pluralRules.select(value - offset)] ||\n      children.other;\n    return clause(args)\n  }\n}\n\nfunction returnOther (/*:: n:number */) { return 'other' }\n\nfunction interpretSelect (element/*: Placeholder */, locales/*: Locales */) {\n  var children = element[2];\n  return function (value, args) {\n    var clause = children[value] || children.other;\n    return clause(args)\n  }\n}\n\nvar defaults/*: Types */ = {\n  number: interpretNumber,\n  ordinal: interpretNumber, // TODO: support rbnf\n  spellout: interpretNumber, // TODO: support rbnf\n  duration: interpretDuration,\n  date: interpretDateTime,\n  time: interpretDateTime,\n  plural: interpretPlural,\n  selectordinal: interpretPlural,\n  select: interpretSelect\n};\nexports.types = defaults;\n});\nvar formatMessageInterpret_1 = formatMessageInterpret.toParts;\nvar formatMessageInterpret_2 = formatMessageInterpret.types;\n\nvar formatMessageParse = createCommonjsModule(function (module, exports) {\n\n/*::\nexport type AST = Element[]\nexport type Element = string | Placeholder\nexport type Placeholder = Plural | Styled | Typed | Simple\nexport type Plural = [ string, 'plural' | 'selectordinal', number, SubMessages ]\nexport type Styled = [ string, string, string | SubMessages ]\nexport type Typed = [ string, string ]\nexport type Simple = [ string ]\nexport type SubMessages = { [string]: AST }\nexport type Token = [ TokenType, string ]\nexport type TokenType = 'text' | 'space' | 'id' | 'type' | 'style' | 'offset' | 'number' | 'selector' | 'syntax'\ntype Context = {|\n  pattern: string,\n  index: number,\n  tagsType: ?string,\n  tokens: ?Token[]\n|}\n*/\n\nvar ARG_OPN = '{';\nvar ARG_CLS = '}';\nvar ARG_SEP = ',';\nvar NUM_ARG = '#';\nvar TAG_OPN = '<';\nvar TAG_CLS = '>';\nvar TAG_END = '</';\nvar TAG_SELF_CLS = '/>';\nvar ESC = '\\'';\nvar OFFSET = 'offset:';\nvar simpleTypes = [\n  'number',\n  'date',\n  'time',\n  'ordinal',\n  'duration',\n  'spellout'\n];\nvar submTypes = [\n  'plural',\n  'select',\n  'selectordinal'\n];\n\n/**\n * parse\n *\n * Turns this:\n *  `You have { numBananas, plural,\n *       =0 {no bananas}\n *      one {a banana}\n *    other {# bananas}\n *  } for sale`\n *\n * into this:\n *  [ \"You have \", [ \"numBananas\", \"plural\", 0, {\n *       \"=0\": [ \"no bananas\" ],\n *      \"one\": [ \"a banana\" ],\n *    \"other\": [ [ '#' ], \" bananas\" ]\n *  } ], \" for sale.\" ]\n *\n * tokens:\n *  [\n *    [ \"text\", \"You have \" ],\n *    [ \"syntax\", \"{\" ],\n *    [ \"space\", \" \" ],\n *    [ \"id\", \"numBananas\" ],\n *    [ \"syntax\", \", \" ],\n *    [ \"space\", \" \" ],\n *    [ \"type\", \"plural\" ],\n *    [ \"syntax\", \",\" ],\n *    [ \"space\", \"\\n     \" ],\n *    [ \"selector\", \"=0\" ],\n *    [ \"space\", \" \" ],\n *    [ \"syntax\", \"{\" ],\n *    [ \"text\", \"no bananas\" ],\n *    [ \"syntax\", \"}\" ],\n *    [ \"space\", \"\\n    \" ],\n *    [ \"selector\", \"one\" ],\n *    [ \"space\", \" \" ],\n *    [ \"syntax\", \"{\" ],\n *    [ \"text\", \"a banana\" ],\n *    [ \"syntax\", \"}\" ],\n *    [ \"space\", \"\\n  \" ],\n *    [ \"selector\", \"other\" ],\n *    [ \"space\", \" \" ],\n *    [ \"syntax\", \"{\" ],\n *    [ \"syntax\", \"#\" ],\n *    [ \"text\", \" bananas\" ],\n *    [ \"syntax\", \"}\" ],\n *    [ \"space\", \"\\n\" ],\n *    [ \"syntax\", \"}\" ],\n *    [ \"text\", \" for sale.\" ]\n *  ]\n **/\nexports = module.exports = function parse (\n  pattern/*: string */,\n  options/*:: ?: { tagsType?: string, tokens?: Token[] } */\n)/*: AST */ {\n  return parseAST({\n    pattern: String(pattern),\n    index: 0,\n    tagsType: (options && options.tagsType) || null,\n    tokens: (options && options.tokens) || null\n  }, '')\n};\n\nfunction parseAST (current/*: Context */, parentType/*: string */)/*: AST */ {\n  var pattern = current.pattern;\n  var length = pattern.length;\n  var elements/*: AST */ = [];\n  var start = current.index;\n  var text = parseText(current, parentType);\n  if (text) elements.push(text);\n  if (text && current.tokens) current.tokens.push([ 'text', pattern.slice(start, current.index) ]);\n  while (current.index < length) {\n    if (pattern[current.index] === ARG_CLS) {\n      if (!parentType) throw expected(current)\n      break\n    }\n    if (parentType && current.tagsType && pattern.slice(current.index, current.index + TAG_END.length) === TAG_END) break\n    elements.push(parsePlaceholder(current));\n    start = current.index;\n    text = parseText(current, parentType);\n    if (text) elements.push(text);\n    if (text && current.tokens) current.tokens.push([ 'text', pattern.slice(start, current.index) ]);\n  }\n  return elements\n}\n\nfunction parseText (current/*: Context */, parentType/*: string */)/*: string */ {\n  var pattern = current.pattern;\n  var length = pattern.length;\n  var isHashSpecial = (parentType === 'plural' || parentType === 'selectordinal');\n  var isAngleSpecial = !!current.tagsType;\n  var isArgStyle = (parentType === '{style}');\n  var text = '';\n  while (current.index < length) {\n    var char = pattern[current.index];\n    if (\n      char === ARG_OPN || char === ARG_CLS ||\n      (isHashSpecial && char === NUM_ARG) ||\n      (isAngleSpecial && char === TAG_OPN) ||\n      (isArgStyle && isWhitespace(char.charCodeAt(0)))\n    ) {\n      break\n    } else if (char === ESC) {\n      char = pattern[++current.index];\n      if (char === ESC) { // double is always 1 '\n        text += char;\n        ++current.index;\n      } else if (\n        // only when necessary\n        char === ARG_OPN || char === ARG_CLS ||\n        (isHashSpecial && char === NUM_ARG) ||\n        (isAngleSpecial && char === TAG_OPN) ||\n        isArgStyle\n      ) {\n        text += char;\n        while (++current.index < length) {\n          char = pattern[current.index];\n          if (char === ESC && pattern[current.index + 1] === ESC) { // double is always 1 '\n            text += ESC;\n            ++current.index;\n          } else if (char === ESC) { // end of quoted\n            ++current.index;\n            break\n          } else {\n            text += char;\n          }\n        }\n      } else { // lone ' is just a '\n        text += ESC;\n        // already incremented\n      }\n    } else {\n      text += char;\n      ++current.index;\n    }\n  }\n  return text\n}\n\nfunction isWhitespace (code/*: number */)/*: boolean */ {\n  return (\n    (code >= 0x09 && code <= 0x0D) ||\n    code === 0x20 || code === 0x85 || code === 0xA0 || code === 0x180E ||\n    (code >= 0x2000 && code <= 0x200D) ||\n    code === 0x2028 || code === 0x2029 || code === 0x202F || code === 0x205F ||\n    code === 0x2060 || code === 0x3000 || code === 0xFEFF\n  )\n}\n\nfunction skipWhitespace (current/*: Context */)/*: void */ {\n  var pattern = current.pattern;\n  var length = pattern.length;\n  var start = current.index;\n  while (current.index < length && isWhitespace(pattern.charCodeAt(current.index))) {\n    ++current.index;\n  }\n  if (start < current.index && current.tokens) {\n    current.tokens.push([ 'space', current.pattern.slice(start, current.index) ]);\n  }\n}\n\nfunction parsePlaceholder (current/*: Context */)/*: Placeholder */ {\n  var pattern = current.pattern;\n  if (pattern[current.index] === NUM_ARG) {\n    if (current.tokens) current.tokens.push([ 'syntax', NUM_ARG ]);\n    ++current.index; // move passed #\n    return [ NUM_ARG ]\n  }\n\n  var tag = parseTag(current);\n  if (tag) return tag\n\n  /* istanbul ignore if should be unreachable if parseAST and parseText are right */\n  if (pattern[current.index] !== ARG_OPN) throw expected(current, ARG_OPN)\n  if (current.tokens) current.tokens.push([ 'syntax', ARG_OPN ]);\n  ++current.index; // move passed {\n  skipWhitespace(current);\n\n  var id = parseId(current);\n  if (!id) throw expected(current, 'placeholder id')\n  if (current.tokens) current.tokens.push([ 'id', id ]);\n  skipWhitespace(current);\n\n  var char = pattern[current.index];\n  if (char === ARG_CLS) { // end placeholder\n    if (current.tokens) current.tokens.push([ 'syntax', ARG_CLS ]);\n    ++current.index; // move passed }\n    return [ id ]\n  }\n\n  if (char !== ARG_SEP) throw expected(current, ARG_SEP + ' or ' + ARG_CLS)\n  if (current.tokens) current.tokens.push([ 'syntax', ARG_SEP ]);\n  ++current.index; // move passed ,\n  skipWhitespace(current);\n\n  var type = parseId(current);\n  if (!type) throw expected(current, 'placeholder type')\n  if (current.tokens) current.tokens.push([ 'type', type ]);\n  skipWhitespace(current);\n  char = pattern[current.index];\n  if (char === ARG_CLS) { // end placeholder\n    if (current.tokens) current.tokens.push([ 'syntax', ARG_CLS ]);\n    if (type === 'plural' || type === 'selectordinal' || type === 'select') {\n      throw expected(current, type + ' sub-messages')\n    }\n    ++current.index; // move passed }\n    return [ id, type ]\n  }\n\n  if (char !== ARG_SEP) throw expected(current, ARG_SEP + ' or ' + ARG_CLS)\n  if (current.tokens) current.tokens.push([ 'syntax', ARG_SEP ]);\n  ++current.index; // move passed ,\n  skipWhitespace(current);\n\n  var arg;\n  if (type === 'plural' || type === 'selectordinal') {\n    var offset = parsePluralOffset(current);\n    skipWhitespace(current);\n    arg = [ id, type, offset, parseSubMessages(current, type) ];\n  } else if (type === 'select') {\n    arg = [ id, type, parseSubMessages(current, type) ];\n  } else if (simpleTypes.indexOf(type) >= 0) {\n    arg = [ id, type, parseSimpleFormat(current) ];\n  } else { // custom placeholder type\n    var index = current.index;\n    var format/*: string | SubMessages */ = parseSimpleFormat(current);\n    skipWhitespace(current);\n    if (pattern[current.index] === ARG_OPN) {\n      current.index = index; // rewind, since should have been submessages\n      format = parseSubMessages(current, type);\n    }\n    arg = [ id, type, format ];\n  }\n\n  skipWhitespace(current);\n  if (pattern[current.index] !== ARG_CLS) throw expected(current, ARG_CLS)\n  if (current.tokens) current.tokens.push([ 'syntax', ARG_CLS ]);\n  ++current.index; // move passed }\n  return arg\n}\n\nfunction parseTag (current/*: Context */)/*: ?Placeholder */ {\n  var tagsType = current.tagsType;\n  if (!tagsType || current.pattern[current.index] !== TAG_OPN) return\n\n  if (current.pattern.slice(current.index, current.index + TAG_END.length) === TAG_END) {\n    throw expected(current, null, 'closing tag without matching opening tag')\n  }\n  if (current.tokens) current.tokens.push([ 'syntax', TAG_OPN ]);\n  ++current.index; // move passed <\n\n  var id = parseId(current, true);\n  if (!id) throw expected(current, 'placeholder id')\n  if (current.tokens) current.tokens.push([ 'id', id ]);\n  skipWhitespace(current);\n\n  if (current.pattern.slice(current.index, current.index + TAG_SELF_CLS.length) === TAG_SELF_CLS) {\n    if (current.tokens) current.tokens.push([ 'syntax', TAG_SELF_CLS ]);\n    current.index += TAG_SELF_CLS.length;\n    return [ id, tagsType ]\n  }\n  if (current.pattern[current.index] !== TAG_CLS) throw expected(current, TAG_CLS)\n  if (current.tokens) current.tokens.push([ 'syntax', TAG_CLS ]);\n  ++current.index; // move passed >\n\n  var children = parseAST(current, tagsType);\n\n  var end = current.index;\n  if (current.pattern.slice(current.index, current.index + TAG_END.length) !== TAG_END) throw expected(current, TAG_END + id + TAG_CLS)\n  if (current.tokens) current.tokens.push([ 'syntax', TAG_END ]);\n  current.index += TAG_END.length;\n  var closeId = parseId(current, true);\n  if (closeId && current.tokens) current.tokens.push([ 'id', closeId ]);\n  if (id !== closeId) {\n    current.index = end; // rewind for better error message\n    throw expected(current, TAG_END + id + TAG_CLS, TAG_END + closeId + TAG_CLS)\n  }\n  skipWhitespace(current);\n  if (current.pattern[current.index] !== TAG_CLS) throw expected(current, TAG_CLS)\n  if (current.tokens) current.tokens.push([ 'syntax', TAG_CLS ]);\n  ++current.index; // move passed >\n\n  return [ id, tagsType, { children: children } ]\n}\n\nfunction parseId (current/*: Context */, isTag/*:: ?: boolean */)/*: string */ {\n  var pattern = current.pattern;\n  var length = pattern.length;\n  var id = '';\n  while (current.index < length) {\n    var char = pattern[current.index];\n    if (\n      char === ARG_OPN || char === ARG_CLS || char === ARG_SEP ||\n      char === NUM_ARG || char === ESC || isWhitespace(char.charCodeAt(0)) ||\n      (isTag && (char === TAG_OPN || char === TAG_CLS || char === '/'))\n    ) break\n    id += char;\n    ++current.index;\n  }\n  return id\n}\n\nfunction parseSimpleFormat (current/*: Context */)/*: string */ {\n  var start = current.index;\n  var style = parseText(current, '{style}');\n  if (!style) throw expected(current, 'placeholder style name')\n  if (current.tokens) current.tokens.push([ 'style', current.pattern.slice(start, current.index) ]);\n  return style\n}\n\nfunction parsePluralOffset (current/*: Context */)/*: number */ {\n  var pattern = current.pattern;\n  var length = pattern.length;\n  var offset = 0;\n  if (pattern.slice(current.index, current.index + OFFSET.length) === OFFSET) {\n    if (current.tokens) current.tokens.push([ 'offset', 'offset' ], [ 'syntax', ':' ]);\n    current.index += OFFSET.length; // move passed offset:\n    skipWhitespace(current);\n    var start = current.index;\n    while (current.index < length && isDigit(pattern.charCodeAt(current.index))) {\n      ++current.index;\n    }\n    if (start === current.index) throw expected(current, 'offset number')\n    if (current.tokens) current.tokens.push([ 'number', pattern.slice(start, current.index) ]);\n    offset = +pattern.slice(start, current.index);\n  }\n  return offset\n}\n\nfunction isDigit (code/*: number */)/*: boolean */ {\n  return (code >= 0x30 && code <= 0x39)\n}\n\nfunction parseSubMessages (current/*: Context */, parentType/*: string */)/*: SubMessages */ {\n  var pattern = current.pattern;\n  var length = pattern.length;\n  var options/*: SubMessages */ = {};\n  while (current.index < length && pattern[current.index] !== ARG_CLS) {\n    var selector = parseId(current);\n    if (!selector) throw expected(current, 'sub-message selector')\n    if (current.tokens) current.tokens.push([ 'selector', selector ]);\n    skipWhitespace(current);\n    options[selector] = parseSubMessage(current, parentType);\n    skipWhitespace(current);\n  }\n  if (!options.other && submTypes.indexOf(parentType) >= 0) {\n    throw expected(current, null, null, '\"other\" sub-message must be specified in ' + parentType)\n  }\n  return options\n}\n\nfunction parseSubMessage (current/*: Context */, parentType/*: string */)/*: AST */ {\n  if (current.pattern[current.index] !== ARG_OPN) throw expected(current, ARG_OPN + ' to start sub-message')\n  if (current.tokens) current.tokens.push([ 'syntax', ARG_OPN ]);\n  ++current.index; // move passed {\n  var message = parseAST(current, parentType);\n  if (current.pattern[current.index] !== ARG_CLS) throw expected(current, ARG_CLS + ' to end sub-message')\n  if (current.tokens) current.tokens.push([ 'syntax', ARG_CLS ]);\n  ++current.index; // move passed }\n  return message\n}\n\nfunction expected (current/*: Context */, expected/*:: ?: ?string */, found/*:: ?: ?string */, message/*:: ?: string */) {\n  var pattern = current.pattern;\n  var lines = pattern.slice(0, current.index).split(/\\r?\\n/);\n  var offset = current.index;\n  var line = lines.length;\n  var column = lines.slice(-1)[0].length;\n  found = found || (\n    (current.index >= pattern.length) ? 'end of message pattern'\n      : (parseId(current) || pattern[current.index])\n  );\n  if (!message) message = errorMessage(expected, found);\n  message += ' in ' + pattern.replace(/\\r?\\n/g, '\\n');\n  return new SyntaxError(message, expected, found, offset, line, column)\n}\n\nfunction errorMessage (expected/*: ?string */, found/* string */) {\n  if (!expected) return 'Unexpected ' + found + ' found'\n  return 'Expected ' + expected + ' but found ' + found\n}\n\n/**\n * SyntaxError\n *  Holds information about bad syntax found in a message pattern\n **/\nfunction SyntaxError (message/*: string */, expected/*: ?string */, found/*: ?string */, offset/*: number */, line/*: number */, column/*: number */) {\n  Error.call(this, message);\n  this.name = 'SyntaxError';\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.offset = offset;\n  this.line = line;\n  this.column = column;\n}\nSyntaxError.prototype = Object.create(Error.prototype);\nexports.SyntaxError = SyntaxError;\n});\nvar formatMessageParse_1 = formatMessageParse.SyntaxError;\n\nvar supportedExp = new RegExp(\n  '^(' + Object.keys(plurals).join('|') + ')\\\\b'\n);\n\n/*::\nimport type { Types } from 'format-message-interpret'\nimport type { AST } from 'format-message-parse'\ntype Options = {\n  types: Types\n}\ntype Internals = {\n  ast: AST,\n  format: (args?: Object) => string,\n  locale: string,\n  locales?: string | string[],\n  toParts?: (args?: Object) => any[],\n  options?: Options\n}\n*/\n\nvar internals/*: WeakMap<MessageFormat, Internals> */ = new WeakMap();\n\n/*!\n * Intl.MessageFormat prollyfill\n * Copyright(c) 2015 Andy VanWagoner\n * MIT licensed\n **/\nfunction MessageFormat (\n  pattern/*: string */,\n  locales/*:: ?: string | string[] */,\n  options/*:: ?: Options */\n) {\n  if (!(this instanceof MessageFormat) || internals.has(this)) {\n    throw new TypeError('calling MessageFormat constructor without new is invalid')\n  }\n  var ast = formatMessageParse(pattern);\n  internals.set(this, {\n    ast: ast,\n    format: formatMessageInterpret(ast, locales, options && options.types),\n    locale: MessageFormat.supportedLocalesOf(locales)[0] || 'en',\n    locales: locales,\n    options: options\n  });\n}\nvar messageFormat = MessageFormat;\n\n// $FlowFixMe It thinks `value` needs to be defined for format\nObject.defineProperties(MessageFormat.prototype, {\n  format: {\n    configurable: true,\n    get: function format () {\n      var values = internals.get(this);\n      if (!values) throw new TypeError('MessageFormat.prototype.format called on value that\\'s not an object initialized as a MessageFormat')\n      return values.format\n    }\n  },\n  formatToParts: {\n    configurable: true,\n    writable: true,\n    value: function formatToParts (args/*:: ?: Object */) {\n      var values = internals.get(this);\n      if (!values) throw new TypeError('MessageFormat.prototype.formatToParts called on value that\\'s not an object initialized as a MessageFormat')\n      var frmt = values.toParts || (values.toParts = formatMessageInterpret.toParts(\n        values.ast,\n        values.locales,\n        values.options && values.options.types\n      ));\n      return frmt(args)\n    }\n  },\n  resolvedOptions: {\n    configurable: true,\n    writable: true,\n    value: function resolvedOptions () {\n      var values = internals.get(this);\n      if (!values) throw new TypeError('MessageFormat.prototype.resolvedOptions called on value that\\'s not an object initialized as a MessageFormat')\n      return {\n        locale: values.locale\n      }\n    }\n  }\n});\n\n/* istanbul ignore else */\nif (typeof Symbol !== 'undefined') {\n  Object.defineProperty(MessageFormat.prototype, Symbol.toStringTag, { value: 'Object' });\n}\n\nObject.defineProperties(MessageFormat, {\n  supportedLocalesOf: {\n    configurable: true,\n    writable: true,\n    value: function supportedLocalesOf (requestedLocales/*:: ?: string | string[] */) {\n      return [].concat(\n        Intl.NumberFormat.supportedLocalesOf(requestedLocales),\n        Intl.DateTimeFormat.supportedLocalesOf(requestedLocales),\n        Intl.PluralRules ? Intl.PluralRules.supportedLocalesOf(requestedLocales) : [],\n        [].concat(requestedLocales || []).filter(function (locale) {\n          return supportedExp.test(locale)\n        })\n      ).filter(function (v, i, a) { return a.indexOf(v) === i })\n    }\n  }\n});\n\nexport default messageFormat;\n", "/**\n * @param {Object.<string, Object>} obj\n * @returns {boolean}\n */\nexport default function isLocalizeESModule(obj) {\n  return !!(obj && obj.default && typeof obj.default === 'object' && Object.keys(obj).length === 1);\n}\n", "// @ts-expect-error [external]: no types for this package\nimport MessageFormat from '@bundled-es-modules/message-format/MessageFormat.js';\nimport isLocalizeESModule from './isLocalizeESModule.js';\n\n/**\n * @typedef {import('../types/LocalizeMixinTypes').NamespaceObject} NamespaceObject\n */\n\n/** @typedef {import('../types/LocalizeMixinTypes').DatePostProcessor} DatePostProcessor */\n/** @typedef {import('../types/LocalizeMixinTypes').NumberPostProcessor} NumberPostProcessor */\n\n/**\n * `LocalizeManager` manages your translations (includes loading)\n */\nexport class LocalizeManager {\n  // eslint-disable-line no-unused-vars\n  constructor({\n    autoLoadOnLocaleChange = false,\n    fallbackLocale = '',\n    showKeyAsFallback = false,\n  } = {}) {\n    /** @private */\n    this.__delegationTarget = document.createDocumentFragment();\n    /** @protected */\n    this._autoLoadOnLocaleChange = !!autoLoadOnLocaleChange;\n    /** @protected */\n    this._fallbackLocale = fallbackLocale;\n    /** @protected */\n    this._showKeyAsFallback = showKeyAsFallback;\n\n    /**\n     * @type {Object.<string, Object.<string, Object>>}\n     * @private\n     */\n    this.__storage = {};\n\n    /**\n     * @type {Map.<RegExp|string, function>}\n     * @private\n     */\n    this.__namespacePatternsMap = new Map();\n\n    /**\n     * @type {Object.<string, function|null>}\n     * @private\n     */\n    this.__namespaceLoadersCache = {};\n\n    /**\n     * @type {Object.<string, Object.<string, Promise.<Object|void>>>}\n     * @private\n     */\n    this.__namespaceLoaderPromisesCache = {};\n\n    this.formatNumberOptions = {\n      returnIfNaN: '',\n      /** @type {Map<string,DatePostProcessor>} */\n      postProcessors: new Map(),\n    };\n\n    this.formatDateOptions = {\n      /** @type {Map<string,DatePostProcessor>} */\n      postProcessors: new Map(),\n    };\n\n    /**\n     * Via html[data-localize-lang], developers are allowed to set the initial locale, without\n     * having to worry about whether locale is initialized before 3rd parties like Google Translate.\n     * When this value differs from html[lang], we assume the 3rd party took\n     * control over the page language and we set this._langAttrSetByTranslationTool to html[lang]\n     */\n    const initialLocale = document.documentElement.getAttribute('data-localize-lang');\n\n    /** @protected */\n    this._supportExternalTranslationTools = Boolean(initialLocale);\n\n    if (this._supportExternalTranslationTools) {\n      this.locale = initialLocale || 'en-GB';\n      this._setupTranslationToolSupport();\n    }\n\n    if (!document.documentElement.lang) {\n      document.documentElement.lang = this.locale || 'en-GB';\n    }\n\n    /** @protected */\n    this._setupHtmlLangAttributeObserver();\n  }\n\n  /** @protected */\n  _setupTranslationToolSupport() {\n    /**\n     * This value allows for support for Google Translate (or other 3rd parties taking control\n     * of the html[lang] attribute).\n     *\n     * Have the following scenario in mind:\n     * 1. locale is initialized by developer via html[data-localize-lang=\"en-US\"] and\n     * html[lang=\"en-US\"]. When localize is loaded (note that this also can be after step 2 below),\n     * it will sync its initial state from html[data-localize-lang]\n     * 2. Google Translate kicks in for the French language. It will set html[lang=\"fr\"].\n     * This new language is not one known by us, so we most likely don't have translations for\n     * this file. Therefore, we do NOT sync this value to LocalizeManager. The manager should\n     * still ask for known resources (in this case for locale 'en-US')\n     * 3. locale is changed (think of a language dropdown)\n     * It's a bit of a weird case, because we would not expect an end user to do this. If he/she\n     * does, make sure that we do not go against Google Translate, so we maintain accessibility\n     * (by not altering html[lang]). We detect this by reading _langAttrSetByTranslationTool:\n     * when its value is null, we consider Google translate 'not active'.\n     *\n     * When Google Translate is turned off by the user (html[lang=auto]),\n     * `localize.locale` will be synced to html[lang] again\n     *\n     * Keep in mind that all of the above also works with other tools than Google Translate,\n     * but this is the most widely used tool and therefore used as an example.\n     */\n    this._langAttrSetByTranslationTool = document.documentElement.lang || null;\n  }\n\n  teardown() {\n    this._teardownHtmlLangAttributeObserver();\n  }\n\n  /**\n   * @returns {string}\n   */\n  get locale() {\n    if (this._supportExternalTranslationTools) {\n      return this.__locale || '';\n    }\n    return document.documentElement.lang;\n  }\n\n  /**\n   * @param {string} value\n   */\n  set locale(value) {\n    /** @type {string} */\n    let oldLocale;\n    if (this._supportExternalTranslationTools) {\n      oldLocale = /** @type {string} */ (this.__locale);\n      this.__locale = value;\n      if (this._langAttrSetByTranslationTool === null) {\n        this._setHtmlLangAttribute(value);\n      }\n    } else {\n      oldLocale = document.documentElement.lang;\n      this._setHtmlLangAttribute(value);\n    }\n\n    if (!value.includes('-')) {\n      this.__handleLanguageOnly(value);\n    }\n\n    this._onLocaleChanged(value, oldLocale);\n  }\n\n  /**\n   * @param {string} locale\n   * @protected\n   */\n  _setHtmlLangAttribute(locale) {\n    this._teardownHtmlLangAttributeObserver();\n    document.documentElement.lang = locale;\n    this._setupHtmlLangAttributeObserver();\n  }\n\n  /**\n   * @param {string} value\n   * @throws {Error} Language only locales are not allowed(Use 'en-GB' instead of 'en')\n   * @private\n   */\n  // eslint-disable-next-line class-methods-use-this\n  __handleLanguageOnly(value) {\n    throw new Error(`\n      Locale was set to ${value}.\n      Language only locales are not allowed, please use the full language locale e.g. 'en-GB' instead of 'en'.\n      See https://github.com/ing-bank/lion/issues/187 for more information.\n    `);\n  }\n\n  /**\n   * @returns {Promise.<Object|void>}\n   */\n  get loadingComplete() {\n    if (typeof this.__namespaceLoaderPromisesCache[this.locale] === 'object') {\n      return Promise.all(Object.values(this.__namespaceLoaderPromisesCache[this.locale]));\n    }\n    return Promise.resolve();\n  }\n\n  reset() {\n    this.__storage = {};\n    this.__namespacePatternsMap = new Map();\n    this.__namespaceLoadersCache = {};\n    this.__namespaceLoaderPromisesCache = {};\n  }\n\n  /**\n   * @param {string} locale\n   * @param {string} namespace\n   * @param {object} data\n   * @throws {Error} Namespace can be added only once, for a given locale\n   */\n  addData(locale, namespace, data) {\n    if (this._isNamespaceInCache(locale, namespace)) {\n      throw new Error(\n        `Namespace \"${namespace}\" has been already added for the locale \"${locale}\".`,\n      );\n    }\n\n    this.__storage[locale] = this.__storage[locale] || {};\n    this.__storage[locale][namespace] = data;\n  }\n\n  /**\n   * @param {RegExp|string} pattern\n   * @param {function} loader\n   */\n  setupNamespaceLoader(pattern, loader) {\n    this.__namespacePatternsMap.set(pattern, loader);\n  }\n\n  /**\n   * @param {NamespaceObject[]} namespaces\n   * @param {Object} [options]\n   * @param {string} [options.locale]\n   * @returns {Promise.<Object>}\n   */\n  loadNamespaces(namespaces, { locale } = {}) {\n    return Promise.all(\n      namespaces.map(\n        /** @param {NamespaceObject} namespace */\n        namespace => this.loadNamespace(namespace, { locale }),\n      ),\n    );\n  }\n\n  /**\n   * @param {NamespaceObject} namespaceObj\n   * @param {Object} [options]\n   * @param {string} [options.locale]\n   * @returns {Promise.<Object|void>}\n   */\n  loadNamespace(namespaceObj, { locale = this.locale } = { locale: this.locale }) {\n    const isDynamicImport = typeof namespaceObj === 'object';\n\n    const namespace = /** @type {string} */ (\n      isDynamicImport ? Object.keys(namespaceObj)[0] : namespaceObj\n    );\n\n    if (this._isNamespaceInCache(locale, namespace)) {\n      return Promise.resolve();\n    }\n\n    const existingLoaderPromise = this._getCachedNamespaceLoaderPromise(locale, namespace);\n    if (existingLoaderPromise) {\n      return existingLoaderPromise;\n    }\n\n    return this._loadNamespaceData(locale, namespaceObj, isDynamicImport, namespace);\n  }\n\n  /**\n   * @param {string | string[]} keys\n   * @param {Object.<string,?>} [vars]\n   * @param {Object} [opts]\n   * @param {string} [opts.locale]\n   * @returns {string}\n   */\n  msg(keys, vars, opts = {}) {\n    const locale = opts.locale ? opts.locale : this.locale;\n    const message = this._getMessageForKeys(keys, locale);\n    if (!message) {\n      return '';\n    }\n    const formatter = new MessageFormat(message, locale);\n    return formatter.format(vars);\n  }\n\n  /** @protected */\n  _setupHtmlLangAttributeObserver() {\n    if (!this._htmlLangAttributeObserver) {\n      this._htmlLangAttributeObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          if (this._supportExternalTranslationTools) {\n            if (document.documentElement.lang === 'auto') {\n              // Google Translate is switched off\n              this._langAttrSetByTranslationTool = null;\n              this._setHtmlLangAttribute(this.locale);\n            } else {\n              this._langAttrSetByTranslationTool = document.documentElement.lang;\n            }\n          } else {\n            this._onLocaleChanged(document.documentElement.lang, mutation.oldValue || '');\n          }\n        });\n      });\n    }\n    this._htmlLangAttributeObserver.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['lang'],\n      attributeOldValue: true,\n    });\n  }\n\n  /** @protected */\n  _teardownHtmlLangAttributeObserver() {\n    if (this._htmlLangAttributeObserver) {\n      this._htmlLangAttributeObserver.disconnect();\n    }\n  }\n\n  /**\n   * @param {string} locale\n   * @param {string} namespace\n   * @protected\n   */\n  _isNamespaceInCache(locale, namespace) {\n    return !!(this.__storage[locale] && this.__storage[locale][namespace]);\n  }\n\n  /**\n   * @param {string} locale\n   * @param {string} namespace\n   * @protected\n   */\n  _getCachedNamespaceLoaderPromise(locale, namespace) {\n    if (this.__namespaceLoaderPromisesCache[locale]) {\n      return this.__namespaceLoaderPromisesCache[locale][namespace];\n    }\n    return null;\n  }\n\n  /**\n   * @param {string} locale\n   * @param {NamespaceObject} namespaceObj\n   * @param {boolean} isDynamicImport\n   * @param {string} namespace\n   * @returns {Promise.<Object|void>}\n   * @protected\n   */\n  _loadNamespaceData(locale, namespaceObj, isDynamicImport, namespace) {\n    const loader = this._getNamespaceLoader(namespaceObj, isDynamicImport, namespace);\n    const loaderPromise = this._getNamespaceLoaderPromise(loader, locale, namespace);\n    this._cacheNamespaceLoaderPromise(locale, namespace, loaderPromise);\n    return loaderPromise.then(\n      /**\n       * @param {Object} obj\n       * @param {Object} obj.default\n       */\n      obj => {\n        // add data only if we have the promise in cache\n        if (\n          this.__namespaceLoaderPromisesCache[locale] &&\n          this.__namespaceLoaderPromisesCache[locale][namespace] === loaderPromise\n        ) {\n          const data = isLocalizeESModule(obj) ? obj.default : obj;\n          this.addData(locale, namespace, data);\n        }\n      },\n    );\n  }\n\n  /**\n   * @param {NamespaceObject} namespaceObj\n   * @param {boolean} isDynamicImport\n   * @param {string} namespace\n   * @throws {Error} Namespace shall setup properly. Check loader!\n   * @protected\n   */\n  _getNamespaceLoader(namespaceObj, isDynamicImport, namespace) {\n    let loader = this.__namespaceLoadersCache[namespace];\n    if (!loader) {\n      if (isDynamicImport) {\n        const _namespaceObj = /** @type {Object.<string,function>} */ (namespaceObj);\n        loader = _namespaceObj[namespace];\n        this.__namespaceLoadersCache[namespace] = loader;\n      } else {\n        loader = this._lookupNamespaceLoader(namespace);\n        this.__namespaceLoadersCache[namespace] = loader;\n      }\n    }\n\n    if (!loader) {\n      throw new Error(`Namespace \"${namespace}\" was not properly setup.`);\n    }\n\n    this.__namespaceLoadersCache[namespace] = loader;\n\n    return loader;\n  }\n\n  /**\n   * @param {function} loader\n   * @param {string} locale\n   * @param {string} namespace\n   * @param {string} [fallbackLocale]\n   * @returns {Promise.<any>}\n   * @throws {Error} Data for namespace and (locale or fallback locale) could not be loaded.\n   * @protected\n   */\n  _getNamespaceLoaderPromise(loader, locale, namespace, fallbackLocale = this._fallbackLocale) {\n    return loader(locale, namespace).catch(() => {\n      const lang = this._getLangFromLocale(locale);\n      return loader(lang, namespace).catch(() => {\n        if (fallbackLocale) {\n          return this._getNamespaceLoaderPromise(loader, fallbackLocale, namespace, '').catch(\n            () => {\n              const fallbackLang = this._getLangFromLocale(fallbackLocale);\n              throw new Error(\n                `Data for namespace \"${namespace}\" and current locale \"${locale}\" or fallback locale \"${fallbackLocale}\" could not be loaded. ` +\n                  `Make sure you have data either for locale \"${locale}\" (and/or generic language \"${lang}\") or for fallback \"${fallbackLocale}\" (and/or \"${fallbackLang}\").`,\n              );\n            },\n          );\n        }\n        throw new Error(\n          `Data for namespace \"${namespace}\" and locale \"${locale}\" could not be loaded. ` +\n            `Make sure you have data for locale \"${locale}\" (and/or generic language \"${lang}\").`,\n        );\n      });\n    });\n  }\n\n  /**\n   * @param {string} locale\n   * @param {string} namespace\n   * @param {Promise.<Object|void>} promise\n   * @protected\n   */\n  _cacheNamespaceLoaderPromise(locale, namespace, promise) {\n    if (!this.__namespaceLoaderPromisesCache[locale]) {\n      this.__namespaceLoaderPromisesCache[locale] = {};\n    }\n    this.__namespaceLoaderPromisesCache[locale][namespace] = promise;\n  }\n\n  /**\n   * @param {string} namespace\n   * @returns {function|null}\n   * @protected\n   */\n  _lookupNamespaceLoader(namespace) {\n    /* eslint-disable no-restricted-syntax */\n    for (const [key, value] of this.__namespacePatternsMap) {\n      const isMatchingString = typeof key === 'string' && key === namespace;\n      const isMatchingRegexp =\n        typeof key === 'object' && key.constructor.name === 'RegExp' && key.test(namespace);\n      if (isMatchingString || isMatchingRegexp) {\n        return value;\n      }\n    }\n    return null;\n    /* eslint-enable no-restricted-syntax */\n  }\n\n  /**\n   * @param {string} locale\n   * @returns {string}\n   * @protected\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _getLangFromLocale(locale) {\n    return locale.substring(0, 2);\n  }\n\n  /**\n   * @param {string} type\n   * @param {EventListener} listener\n   * @param {...Object} options\n   */\n  addEventListener(type, listener, ...options) {\n    this.__delegationTarget.addEventListener(type, listener, ...options);\n  }\n\n  /**\n   * @param {string} type\n   * @param {EventListener} listener\n   * @param {...Object} options\n   */\n  removeEventListener(type, listener, ...options) {\n    this.__delegationTarget.removeEventListener(type, listener, ...options);\n  }\n\n  /**\n   *  @param {CustomEvent} event\n   */\n  dispatchEvent(event) {\n    this.__delegationTarget.dispatchEvent(event);\n  }\n\n  /**\n   * @param {string} newLocale\n   * @param {string} oldLocale\n   * @returns {undefined}\n   * @protected\n   */\n  _onLocaleChanged(newLocale, oldLocale) {\n    // Event firing immediately, does not wait for loading the translations\n    this.dispatchEvent(new CustomEvent('__localeChanging'));\n    if (newLocale === oldLocale) {\n      return;\n    }\n    if (this._autoLoadOnLocaleChange) {\n      this._loadAllMissing(newLocale, oldLocale);\n      this.loadingComplete.then(() => {\n        this.dispatchEvent(new CustomEvent('localeChanged', { detail: { newLocale, oldLocale } }));\n      });\n    } else {\n      this.dispatchEvent(new CustomEvent('localeChanged', { detail: { newLocale, oldLocale } }));\n    }\n  }\n\n  /**\n   * @param {string} newLocale\n   * @param {string} oldLocale\n   * @protected\n   */\n  _loadAllMissing(newLocale, oldLocale) {\n    const oldLocaleNamespaces = this.__storage[oldLocale] || {};\n    const newLocaleNamespaces = this.__storage[newLocale] || {};\n    Object.keys(oldLocaleNamespaces).forEach(namespace => {\n      const newNamespaceData = newLocaleNamespaces[namespace];\n      if (!newNamespaceData) {\n        this.loadNamespace(namespace, {\n          locale: newLocale,\n        });\n      }\n    });\n  }\n\n  /**\n   * @param {string | string[]} keys\n   * @param {string} locale\n   * @returns {string | undefined}\n   * @protected\n   */\n  _getMessageForKeys(keys, locale) {\n    if (typeof keys === 'string') {\n      return this._getMessageForKey(keys, locale);\n    }\n    const reversedKeys = Array.from(keys).reverse(); // Array.from prevents mutation of argument\n    let key;\n    let message;\n    while (reversedKeys.length) {\n      key = reversedKeys.pop();\n      message = this._getMessageForKey(key, locale);\n      if (message) {\n        return message;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {string | undefined} key\n   * @param {string} locale\n   * @returns {string}\n   * @throws {Error} `key`is missing namespace. The format for `key` is \"namespace:name\"\n   * @protected\n   *\n   */\n  _getMessageForKey(key, locale) {\n    if (!key || key.indexOf(':') === -1) {\n      throw new Error(\n        `Namespace is missing in the key \"${key}\". The format for keys is \"namespace:name\".`,\n      );\n    }\n    const [ns, namesString] = key.split(':');\n    const namespaces = this.__storage[locale];\n    const messages = namespaces ? namespaces[ns] : {};\n    const names = namesString.split('.');\n    const result = names.reduce(\n      /**\n       * @param {Object.<string, any> | string} message\n       * @param {string} name\n       * @returns {string}\n       */\n      (message, name) => (typeof message === 'object' ? message[name] : message),\n      messages,\n    );\n\n    return String(result || (this._showKeyAsFallback ? key : ''));\n  }\n\n  /**\n   * @param {{locale:string, postProcessor:DatePostProcessor}} options\n   */\n  setDatePostProcessorForLocale({ locale, postProcessor }) {\n    this.formatDateOptions.postProcessors.set(locale, postProcessor);\n  }\n\n  /**\n   * @param {{locale:string, postProcessor:NumberPostProcessor}} options\n   */\n  setNumberPostProcessorForLocale({ locale, postProcessor }) {\n    this.formatNumberOptions.postProcessors.set(locale, postProcessor);\n  }\n}\n", "import { singletonManager } from 'singleton-manager';\nimport { LocalizeManager } from './LocalizeManager.js';\n\n/** @type {LocalizeManager} */\n// eslint-disable-next-line import/no-mutable-exports\nexport let localize =\n  singletonManager.get('@lion/localize::localize::0.10.x') ||\n  new LocalizeManager({\n    autoLoadOnLocaleChange: true,\n    fallbackLocale: 'en-GB',\n  });\n\n/**\n * @param {LocalizeManager} newLocalize\n */\nexport function setLocalize(newLocalize) {\n  localize.teardown();\n  localize = newLocalize;\n}\n", "// TODO: still needed? It can be solved with while loop as well\n\n/**\n * Use the `.add` method to add async functions to the queue\n * Await the `.complete` if you want to ensure the queue is empty at any point\n * `complete` resolves whenever no more tasks are running.\n * Important note: Currently runs tasks 1 by 1, there is no concurrency option at the moment\n */\nexport class AsyncQueue {\n  constructor() {\n    this.__running = false;\n    /** @type {function[]} */\n    this.__queue = [];\n  }\n\n  /**\n   *\n   * @param {function} task\n   */\n  add(task) {\n    this.__queue.push(task);\n    if (!this.__running) {\n      // We have a new queue, because before there was nothing in the queue\n      this.complete = new Promise(resolve => {\n        /** @type {function} */\n        this.__callComplete = resolve;\n      });\n      this.__run();\n    }\n  }\n\n  /** @private */\n  async __run() {\n    this.__running = true;\n    await this.__queue[0]();\n    this.__queue.shift();\n    if (this.__queue.length > 0) {\n      this.__run();\n    } else {\n      this.__running = false;\n      if (this.__callComplete) {\n        this.__callComplete();\n      }\n    }\n  }\n}\n", "/**\n * Return PascalCased version of the camelCased string\n *\n * @param {string} str\n * @return {string}\n */\nexport function pascalCase(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n", "import { dedupeMixin } from '@lion/core';\n\n// TODO: will be moved to @Lion/core later?\n\n/**\n * @typedef {import('../../types/utils/SyncUpdatableMixinTypes').SyncUpdatableMixin} SyncUpdatableMixin\n * @typedef {import('../../types/utils/SyncUpdatableMixinTypes').SyncUpdatableNamespace} SyncUpdatableNamespace\n */\n\n/**\n * Why this mixin?\n * - it adheres to the \"Member Order Independence\" web components standard:\n * https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence\n * - sync observers can be dependent on the outcome of the render function (or, more generically\n * speaking, the light and shadow dom). This aligns with the 'updated' callback that is supported\n * out of the box by LitElement, which runs after connectedCallback as well.\n * - makes the propertyAccessor.`hasChanged` compatible in synchronous updates:\n * `updateSync` will only be called when new value differs from old value.\n * See: https://lit-element.polymer-project.org/guide/lifecycle#haschanged\n * - it is a stable abstraction on top of a protected/non official lifecycle LitElement api.\n * Whenever the implementation of `requestUpdate` changes (this happened in the past for\n * `requestUpdate`) we only have to change our abstraction instead of all our components\n * @type {SyncUpdatableMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n */\nconst SyncUpdatableMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class extends superclass {\n    constructor() {\n      super();\n\n      /**\n       * Namespace for this mixin that guarantees naming clashes will not occur...\n       * @type {SyncUpdatableNamespace}\n       */\n      this.__SyncUpdatableNamespace = {};\n    }\n\n    /**\n     * Empty pending queue in order to guarantee order independence\n     *\n     * @param {import('lit-element').PropertyValues } changedProperties\n     */\n    firstUpdated(changedProperties) {\n      super.firstUpdated(changedProperties);\n      this.__syncUpdatableInitialize();\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.__SyncUpdatableNamespace.connected = true;\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__SyncUpdatableNamespace.connected = false;\n    }\n\n    /**\n     * Makes the propertyAccessor.`hasChanged` compatible in synchronous updates\n     * @param {string} name\n     * @param {*} newValue\n     * @param {*} oldValue\n     * @private\n     */\n    static __syncUpdatableHasChanged(name, newValue, oldValue) {\n      // @ts-expect-error [external]: accessing private lit property\n      const properties = this.elementProperties;\n      if (properties.get(name) && properties.get(name).hasChanged) {\n        return properties.get(name).hasChanged(newValue, oldValue);\n      }\n      return newValue !== oldValue;\n    }\n\n    /** @private */\n    __syncUpdatableInitialize() {\n      const ns = this.__SyncUpdatableNamespace;\n      const ctor =\n        /** @type {typeof SyncUpdatableMixin & typeof import('../../types/utils/SyncUpdatableMixinTypes').SyncUpdatableHost} */ (\n          this.constructor\n        );\n\n      ns.initialized = true;\n      // Empty queue...\n      if (ns.queue) {\n        Array.from(ns.queue).forEach(name => {\n          // @ts-ignore [allow-private] in test\n          if (ctor.__syncUpdatableHasChanged(name, this[name], undefined)) {\n            this.updateSync(name, undefined);\n          }\n        });\n      }\n    }\n\n    /**\n     * @param {string} name\n     * @param {*} oldValue\n     */\n    requestUpdate(name, oldValue) {\n      super.requestUpdate(name, oldValue);\n\n      this.__SyncUpdatableNamespace = this.__SyncUpdatableNamespace || {};\n      const ns = this.__SyncUpdatableNamespace;\n\n      const ctor =\n        /** @type {typeof SyncUpdatableMixin & typeof import('../../types/utils/SyncUpdatableMixinTypes').SyncUpdatableHost} */ (\n          this.constructor\n        );\n      // Before connectedCallback: queue\n      if (!ns.initialized) {\n        ns.queue = ns.queue || new Set();\n        // Makes sure that we only initialize one time, with most up to date value\n        ns.queue.add(name);\n      } // After connectedCallback: guarded proxy to updateSync\n      // @ts-ignore [allow-private] in test\n      else if (ctor.__syncUpdatableHasChanged(name, this[name], oldValue)) {\n        this.updateSync(name, oldValue);\n      }\n    }\n\n    /**\n     * An abstraction that has the exact same api as `requestUpdate`, but taking\n     * into account:\n     * - [member order independence](https://github.com/webcomponents/gold-standard/wiki/Member-Order-Independence)\n     * - property effects start when all (light) dom has initialized (on firstUpdated)\n     * - property effects don't interrupt the first meaningful paint\n     * - compatible with propertyAccessor.`hasChanged`: no manual checks needed or accidentally\n     * run property effects / events when no change happened\n     * effects when values didn't change\n     * All code previously present in requestUpdate can be placed in this method.\n     * @param {string} name\n     * @param {*} oldValue\n     */\n    updateSync(name, oldValue) {} // eslint-disable-line class-methods-use-this, no-unused-vars\n  };\n\nexport const SyncUpdatableMixin = dedupeMixin(SyncUpdatableMixinImplementation);\n", "import { html, LitElement } from '@lion/core';\n\n/**\n * @typedef {import('../validate/Validator').Validator} Validator\n * @typedef {import('@lion/core').TemplateResult} TemplateResult\n * @typedef {Object} messageMap\n * @property {string | Node} message\n * @property {string} type\n * @property {Validator} [validator]\n */\n\n/**\n * @desc Takes care of accessible rendering of error messages\n * Should be used in conjunction with FormControl having ValidateMixin applied\n */\nexport class LionValidationFeedback extends LitElement {\n  static get properties() {\n    return {\n      feedbackData: { attribute: false },\n    };\n  }\n\n  /**\n   * @overridable\n   * @param {Object} opts\n   * @param {string | Node | TemplateResult } opts.message message or feedback node or TemplateResult\n   * @param {string} [opts.type]\n   * @param {Validator} [opts.validator]\n   * @protected\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _messageTemplate({ message }) {\n    return message;\n  }\n\n  /**\n   * @param {import('@lion/core').PropertyValues } changedProperties\n   */\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (this.feedbackData && this.feedbackData[0]) {\n      this.setAttribute('type', this.feedbackData[0].type);\n      this.currentType = this.feedbackData[0].type;\n      window.clearTimeout(this.removeMessage);\n      // TODO: this logic should be in ValidateMixin, so that [show-feedback-for] is in sync,\n      // plus duration should be configurable\n      if (this.currentType === 'success') {\n        this.removeMessage = window.setTimeout(() => {\n          this.removeAttribute('type');\n          /** @type {messageMap[]} */\n          this.feedbackData = [];\n        }, 3000);\n      }\n    } else if (this.currentType !== 'success') {\n      this.removeAttribute('type');\n    }\n  }\n\n  render() {\n    return html`\n      ${this.feedbackData &&\n      this.feedbackData.map(\n        ({ message, type, validator }) => html`\n          ${this._messageTemplate({ message, type, validator })}\n        `,\n      )}\n    `;\n  }\n}\n", "/**\n * @typedef {import('../../types/validate').FeedbackMessageData} FeedbackMessageData\n * @typedef {import('../../types/validate').ValidatorParam} ValidatorParam\n * @typedef {import('../../types/validate').ValidatorConfig} ValidatorConfig\n * @typedef {import('../../types/validate').ValidatorOutcome} ValidatorOutcome\n * @typedef {import('../../types/validate').ValidatorName} ValidatorName\n * @typedef {import('../../types/validate').ValidationType} ValidationType\n * @typedef {import('../FormControlMixin').FormControlHost} FormControlHost\n */\n\n// TODO: support attribute validators like <my-el my-validator=${dynamicParam}></my-el> =>\n// register in a ValidateService that is read by Validator and adds these attrs in properties\n// object.\n// They would become like configurable\n// [global attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes)\n// for FormControls.\n\nexport class Validator extends EventTarget {\n  /**\n   * @param {ValidatorParam} [param]\n   * @param {ValidatorConfig} [config]\n   */\n  constructor(param, config) {\n    super();\n\n    /** @type {ValidatorParam} */\n    this.__param = param;\n    /** @type {ValidatorConfig} */\n    this.__config = config || {};\n    /** @type {ValidationType} */\n    this.type = config?.type || 'error'; // Default type supported by ValidateMixin\n  }\n\n  /**\n   * The name under which validation results get registered. For convience and predictability, this\n   * should always be the same as the constructor name (since it will be obfuscated in js builds,\n   * we need to provide it separately).\n   * @type {ValidatorName}\n   */\n  static validatorName = '';\n\n  /**\n   * Whether the validator is asynchronous or not. When true., this means execute function returns\n   * a Promise. This can be handy for:\n   * - server side calls\n   * - validations that are dependent on lazy loaded resources (they can be async until the dependency\n   * is loaded)\n   * @type {boolean}\n   */\n  static async = false;\n\n  /**\n   * The function that returns a validity outcome. When we need to show feedback,\n   * it should return true, otherwise false. So when an error\\info|warning|success message\n   * needs to be shown, return true. For async Validators, the function can return a Promise.\n   * It's also possible to return an enum. Let's say that a phone number can have multiple\n   * states: 'invalid-country-code' | 'too-long' | 'too-short'\n   * Those states can be retrieved in the getMessage\n   * @param {any} modelValue\n   * @param {ValidatorParam} [param]\n   * @param {ValidatorConfig} [config]\n   * @returns {ValidatorOutcome|Promise<ValidatorOutcome>}\n   */\n  // eslint-disable-next-line no-unused-vars, class-methods-use-this\n  execute(modelValue, param, config) {\n    const ctor = /** @type {typeof Validator} */ (this.constructor);\n    if (!ctor.validatorName) {\n      throw new Error(\n        'A validator needs to have a name! Please set it via \"static get validatorName() { return \\'IsCat\\'; }\"',\n      );\n    }\n    return true;\n  }\n\n  /**\n   * The first argument of the constructor, for instance 3 in `new MinLength(3)`. Will\n   * be stored on Validator instance and passed to `execute` function\n   * @example\n   * ```js\n   *  // Store reference to Validator instance\n   *  const myValidatorInstance = new MyValidator(1);\n   *  // Use this instance initially on a FormControl (that uses ValidateMixin)\n   *  render(html`<validatable-element .validators=\"${[myValidatorInstance]}\"></validatable-element>`, document.body);\n   *  // Based on some event, we need to change the param\n   *  myValidatorInstance.param = 2;\n   * ```\n   * @property {ValidatorParam}\n   */\n  set param(p) {\n    this.__param = p;\n    /**\n     * This event is listened for by ValidateMixin. Whenever the validation parameter has\n     * changed, the FormControl will revalidate itself\n     */\n    this.dispatchEvent(new Event('param-changed'));\n  }\n\n  get param() {\n    return this.__param;\n  }\n\n  /**\n   * The second argument of the constructor, for instance\n   * `new MinLength(3, {getFeedMessage: async () => 'too long'})`.\n   * Will be stored on Validator instance and passed to `execute` function.\n   * @example\n   * ```js\n   *  // Store reference to Validator instance\n   *  const myValidatorInstance = new MyValidator(1, {getMessage() => 'x'});\n   *  // Use this instance initially on a FormControl (that uses ValidateMixin)\n   *  render(html`<validatable-element .validators=\"${[myValidatorInstance]}\"></validatable-element>`, document.body);\n   *  // Based on some event, we need to change the param\n   *  myValidatorInstance.config = {getMessage() => 'y'};\n   * ```\n   * @property {ValidatorConfig}\n   */\n  set config(c) {\n    this.__config = c;\n    /**\n     * This event is listened for by ValidateMixin. Whenever the validation config has\n     * changed, the FormControl will revalidate itself\n     */\n    this.dispatchEvent(new Event('config-changed'));\n  }\n\n  get config() {\n    return this.__config;\n  }\n\n  /**\n   * This is a protected method that usually should not be overridden. It is called by ValidateMixin\n   * and it gathers data to be passed to getMessage functions found:\n   * - `this.config.getMessage`, locally provided by consumers of the Validator (overrides global getMessage)\n   * - `MyValidator.getMessage`, globally provided by creators or consumers of the Validator\n   *\n   * Confusion can arise because of similarities with former mentioned methods. In that regard, a\n   * better name for this function would have been _pepareDataAndCallHighestPrioGetMessage.\n   * @example\n   * ```js\n   * class MyValidator extends Validator {\n   *   // ...\n   *   // 1. globally defined\n   *   static async getMessage() {\n   *     return 'lowest prio, defined globally by Validator author'\n   *   }\n   * }\n   * // 2. globally overridden\n   * MyValidator.getMessage = async() => 'overrides already configured message';\n   * // 3. locally overridden\n   * new MyValidator(myParam, { getMessage: async() => 'locally defined, always wins' });\n   * ```\n   * @param {Partial<FeedbackMessageData>} [data]\n   * @returns {Promise<string|Element>}\n   * @protected\n   */\n  async _getMessage(data) {\n    const ctor = /** @type {typeof Validator} */ (this.constructor);\n    const composedData = {\n      name: ctor.validatorName,\n      type: this.type,\n      params: this.param,\n      config: this.config,\n      ...data,\n    };\n    if (this.config.getMessage) {\n      if (typeof this.config.getMessage === 'function') {\n        return this.config.getMessage(composedData);\n      }\n      throw new Error(\n        `You must provide a value for getMessage of type 'function', you provided a value of type: ${typeof this\n          .config.getMessage}`,\n      );\n    }\n    return ctor.getMessage(composedData);\n  }\n\n  /**\n   * Called inside Validator.prototype._getMessage (see explanation).\n   * @example\n   * ```js\n   * class MyValidator extends Validator {\n   *   static async getMessage() {\n   *     return 'lowest prio, defined globally by Validator author'\n   *   }\n   * }\n   * // globally overridden\n   * MyValidator.getMessage = async() => 'overrides already configured message';\n   * ```\n   * @overridable\n   * @param {Partial<FeedbackMessageData>} [data]\n   * @returns {Promise<string|Element>}\n   */\n  // eslint-disable-next-line no-unused-vars\n  static async getMessage(data) {\n    return `Please configure an error message for \"${this.name}\" by overriding \"static async getMessage()\"`;\n  }\n\n  /**\n   * Validators are allowed to have knowledge about FormControls.\n   * In some cases (in case of the Required Validator) we wanted to enhance accessibility by\n   * adding [aria-required]. Also, it would be possible to write an advanced MinLength\n   * Validator that adds a .preprocessor that restricts from typing too many characters\n   * (like the native [minlength] validator).\n   * Will be called when Validator is added to FormControl.validators.\n   * @example\n   * ```js\n   * onFormControlConnect(formControl) {\n   *   if(formControl.inputNode) {\n   *     inputNode.setAttribute('aria-required', 'true');\n   *   }\n   * }\n   *\n   * ```\n   * @configurable\n   * @param {FormControlHost} formControl\n   */\n  onFormControlConnect(formControl) {} // eslint-disable-line\n\n  /**\n   * Also see `onFormControlConnect`.\n   * Will be called when Validator is removed from FormControl.validators.\n   * @example\n   * ```js\n   * onFormControlDisconnect(formControl) {\n   *   if(formControl.inputNode) {\n   *     inputNode.removeAttribute('aria-required');\n   *   }\n   * }\n   * @configurable\n   * @param {FormControlHost} formControl\n   */\n  onFormControlDisconnect(formControl) {} // eslint-disable-line\n\n  /**\n   * @desc Used on async Validators, makes it able to do perf optimizations when there are\n   * pending \"execute\" calls with outdated values.\n   * ValidateMixin calls Validator.abortExecution() an async Validator can act accordingly,\n   * depending on its implementation of the \"execute\" function.\n   * - For instance, when fetch was called:\n   * https://stackoverflow.com/questions/31061838/how-do-i-cancel-an-http-fetch-request\n   * - Or, when a webworker was started, its process could be aborted and then restarted.\n   */\n  abortExecution() {} // eslint-disable-line\n}\n\n// For simplicity, a default validator only handles one state:\n// it can either be true or false an it will only have one message.\n// In more advanced cases (think of the feedback mechanism for the maximum number of\n// characters in Twitter), more states are needed. The alternative of\n// having multiple distinct validators would be cumbersome to create and maintain,\n// also because the validations would tie too much into each others logic.\n", "import { Validator } from './Validator.js';\n\n/**\n * @desc Instead of evaluating the result of a regular validator, a ResultValidator looks\n * at the total result of regular Validators. Instead of an execute function, it uses a\n * 'executeOnResults' Validator.\n * ResultValidators cannot be async, and should not contain an execute method.\n */\nexport class ResultValidator extends Validator {\n  /**\n   * @param {Object} context\n   * @param {Validator[]} context.regularValidationResult\n   * @param {Validator[]} context.prevValidationResult\n   * @param {Validator[]} context.prevShownValidationResult\n   * @param {Validator[]} [context.validators]\n   * @returns {boolean}\n   */\n  /* eslint-disable no-unused-vars */\n  // eslint-disable-next-line class-methods-use-this\n  executeOnResults({\n    regularValidationResult,\n    prevValidationResult,\n    prevShownValidationResult,\n    validators,\n  }) {\n    /* eslint-enable no-unused-vars */\n    return true;\n  }\n}\n", "import { Validator } from '../Validator.js';\n\n/**\n * @typedef {import('../../../types/FormControlMixinTypes.js').FormControlHost} FormControlHost\n */\n\nexport class Required extends Validator {\n  static get validatorName() {\n    return 'Required';\n  }\n\n  /**\n   * In order to prevent accessibility violations, the aria-required attribute will\n   * be combined with compatible aria roles: https://www.w3.org/TR/wai-aria/#aria-required\n   */\n  static get _compatibleRoles() {\n    return [\n      'combobox',\n      'gridcell',\n      'input',\n      'listbox',\n      'radiogroup',\n      'select',\n      'spinbutton',\n      'textarea',\n      'textbox',\n      'tree',\n    ];\n  }\n\n  /**\n   * In order to prevent accessibility violations, the aria-required attribute will\n   * be combined with compatible platform input elements\n   */\n  static get _compatibleTags() {\n    return ['input', 'select', 'textarea'];\n  }\n\n  /**\n   * We don't have an execute function, since the Required validator is 'special'.\n   * The outcome depends on the modelValue of the FormControl and\n   * FormControl.__isEmpty / FormControl._isEmpty.\n   */\n\n  /**\n   * @param {FormControlHost & HTMLElement} formControl\n   */\n  // @ts-ignore [allow-protected] we are allowed to know FormControl protcected props in form-core\n  // eslint-disable-next-line class-methods-use-this\n  onFormControlConnect({ _inputNode: inputNode }) {\n    if (inputNode) {\n      const role = inputNode.getAttribute('role') || '';\n      const elementTagName = inputNode.tagName.toLowerCase();\n      const ctor = /** @type {typeof Required} */ (this.constructor);\n      if (ctor._compatibleRoles.includes(role) || ctor._compatibleTags.includes(elementTagName)) {\n        inputNode.setAttribute('aria-required', 'true');\n      }\n    }\n  }\n\n  /**\n   * @param {FormControlHost & HTMLElement} formControl\n   */\n  // @ts-ignore [allow-protected] we are allowed to know FormControl protcected props in form-core\n  // eslint-disable-next-line class-methods-use-this\n  onFormControlDisconnect({ _inputNode: inputNode }) {\n    if (inputNode) {\n      inputNode.removeAttribute('aria-required');\n    }\n  }\n}\n", "/* eslint-disable class-methods-use-this, camelcase, no-param-reassign, max-classes-per-file */\nimport { dedupeMixin, ScopedElementsMixin, SlotMixin, DisabledMixin } from '@lion/core';\n// TODO: make form-core independent from localize\nimport { localize } from '@lion/localize';\nimport { AsyncQueue } from '../utils/AsyncQueue.js';\nimport { pascalCase } from '../utils/pascalCase.js';\nimport { SyncUpdatableMixin } from '../utils/SyncUpdatableMixin.js';\nimport { LionValidationFeedback } from './LionValidationFeedback.js';\nimport { ResultValidator } from './ResultValidator.js';\nimport { Unparseable } from './Unparseable.js';\nimport { Validator } from './Validator.js';\nimport { Required } from './validators/Required.js';\nimport { FormControlMixin } from '../FormControlMixin.js';\n\n// TODO: [v1] make all @readOnly => @readonly and actually make sure those values cannot be set\n\n/**\n * @typedef {import('../../types/validate/ValidateMixinTypes').ValidateMixin} ValidateMixin\n * @typedef {import('../../types/validate/ValidateMixinTypes').ValidationType} ValidationType\n * @typedef {import('../../types/validate/ValidateMixinTypes').ValidateHost} ValidateHost\n * @typedef {typeof import('../../types/validate/ValidateMixinTypes').ValidateHost} ValidateHostConstructor\n * @typedef {{validator:Validator; outcome:boolean|string}} ValidationResultEntry\n * @typedef {{[type:string]: {[validatorName:string]:boolean|string}}} ValidationStates\n */\n\n/**\n * @param {any[]} array1\n * @param {any[]} array2\n */\nfunction arrayDiff(array1 = [], array2 = []) {\n  return array1.filter(x => !array2.includes(x)).concat(array2.filter(x => !array1.includes(x)));\n}\n\n/**\n * Handles all validation, based on modelValue changes. It has no knowledge about dom and\n * UI. All error visibility, dom interaction and accessibility are handled in FeedbackMixin.\n *\n * @type {ValidateMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n */\nexport const ValidateMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class extends FormControlMixin(\n    SyncUpdatableMixin(DisabledMixin(SlotMixin(ScopedElementsMixin(superclass)))),\n  ) {\n    static get scopedElements() {\n      const scopedElementsCtor =\n        /** @type {typeof import('@open-wc/scoped-elements/src/types').ScopedElementsHost} */ (\n          super.constructor\n        );\n      return {\n        ...scopedElementsCtor.scopedElements,\n        'lion-validation-feedback': LionValidationFeedback,\n      };\n    }\n\n    /** @type {any} */\n    static get properties() {\n      return {\n        validators: { attribute: false },\n        hasFeedbackFor: { attribute: false },\n        shouldShowFeedbackFor: { attribute: false },\n        showsFeedbackFor: {\n          type: Array,\n          attribute: 'shows-feedback-for',\n          reflect: true,\n          converter: {\n            fromAttribute: /** @param {string} value */ value => value.split(','),\n            toAttribute: /** @param {[]} value */ value => value.join(','),\n          },\n        },\n        validationStates: { attribute: false },\n        isPending: {\n          type: Boolean,\n          attribute: 'is-pending',\n          reflect: true,\n        },\n        defaultValidators: { attribute: false },\n        _visibleMessagesAmount: { attribute: false },\n        __childModelValueChanged: { attribute: false },\n      };\n    }\n\n    /**\n     * Types of validation supported by this FormControl (for instance 'error'|'warning'|'info')\n     * @overridable\n     * @type {ValidationType[]}\n     */\n    static get validationTypes() {\n      return ['error'];\n    }\n\n    /**\n     * @overridable\n     * Adds \"._feedbackNode\" as described below\n     */\n    get slots() {\n      /**\n       * FIXME: Ugly workaround https://github.com/microsoft/TypeScript/issues/40110\n       * @callback getScopedTagName\n       * @param {string} tagName\n       * @returns {string}\n       *\n       * @typedef {Object} ScopedElementsObj\n       * @property {getScopedTagName} getScopedTagName\n       */\n      return {\n        ...super.slots,\n        feedback: () => {\n          const feedbackEl = this.createScopedElement('lion-validation-feedback');\n          feedbackEl.setAttribute('data-tag-name', 'lion-validation-feedback');\n          return feedbackEl;\n        },\n      };\n    }\n\n    /**\n     * Combination of validators provided by Application Developer and the default validators\n     * @type {Validator[]}\n     * @protected\n     */\n    get _allValidators() {\n      return [...this.validators, ...this.defaultValidators];\n    }\n\n    constructor() {\n      super();\n\n      /**\n       * As soon as validation happens (after modelValue/validators/validator param change), this\n       * array is updated with the active ValidationTypes ('error'|'warning'|'success'|'info' etc.).\n       * Notice the difference with `.showsFeedbackFor`, which filters `.hasFeedbackFor` based on\n       * `.feedbackCondition()`.\n       *\n       * For styling purposes, will be reflected to [has-feedback-for=\"error warning\"]. This can\n       * be useful for subtle visual feedback on keyup, like a red/green border around an input.\n       *\n       * @example\n       * ```css\n       * :host([has-feedback-for~=\"error\"]) .input-group__container {\n       *   border: 1px solid red;\n       * }\n       * ```\n       * @type {ValidationType[]}\n       * @readOnly\n       */\n      this.hasFeedbackFor = [];\n\n      /**\n       * Based on outcome of feedbackCondition, this array decides what ValidationTypes should be\n       * shown in validationFeedback, based on meta data like interaction states.\n       *\n       * For styling purposes, it reflects it `[shows-feedback-for=\"error warning\"]`\n       * @type {ValidationType[]}\n       * @readOnly\n       * @example\n       * ```css\n       * :host([shows-feedback-for~=\"success\"]) .form-field__feedback {\n       *   transform: scaleY(1);\n       * }\n       * ```\n       */\n      this.showsFeedbackFor = [];\n\n      // TODO: [v1] make this fully private (prefix __)?\n      /**\n       * A temporary storage to transition from hasFeedbackFor to showsFeedbackFor\n       * @type {ValidationType[]}\n       * @readOnly\n       * @private\n       */\n      this.shouldShowFeedbackFor = [];\n\n      /**\n       * The outcome of a validation 'round'. Keyed by ValidationType and Validator name\n       * @readOnly\n       * @type {ValidationStates}\n       */\n      this.validationStates = {};\n\n      /**\n       * Flag indicating whether async validation is pending.\n       * Creates attribute [is-pending] as a styling hook\n       * @type {boolean}\n       */\n      this.isPending = false;\n\n      /**\n       * Used by Application Developers to add Validators to a FormControl.\n       * @example\n       * ```html\n       * <form-control .validators=\"${[new Required(), new MinLength(4, {type: 'warning'})]}\">\n       * </form-control>\n       * ```\n       * @type {Validator[]}\n       */\n      this.validators = [];\n\n      /**\n       * Used by Subclassers to add default Validators to a particular FormControl.\n       * A date input for instance, always needs the isDate validator.\n       * @example\n       * ```js\n       * this.defaultValidators.push(new IsDate());\n       * ```\n       * @type {Validator[]}\n       */\n      this.defaultValidators = [];\n\n      /**\n       * The amount of feedback messages that will visible in LionValidationFeedback\n       * @configurable\n       * @protected\n       */\n      this._visibleMessagesAmount = 1;\n\n      /**\n       * @type {ValidationResultEntry[]}\n       * @private\n       */\n      this.__syncValidationResult = [];\n\n      /**\n       * @type {ValidationResultEntry[]}\n       * @private\n       */\n      this.__asyncValidationResult = [];\n\n      /**\n       * Aggregated result from sync Validators, async Validators and ResultValidators\n       * @type {ValidationResultEntry[]}\n       * @private\n       */\n      this.__validationResult = [];\n\n      /**\n       * @type {ValidationResultEntry[]}\n       * @private\n       */\n      this.__prevValidationResult = [];\n\n      /**\n       * @type {ValidationResultEntry[]}\n       * @private\n       */\n      this.__prevShownValidationResult = [];\n\n      /**\n       * The updated children validity affects the validity of the parent. Helper to recompute\n       * validity of parent FormGroup\n       * @private\n       */\n      this.__childModelValueChanged = false;\n\n      /** @protected */\n      this._onValidatorUpdated = this._onValidatorUpdated.bind(this);\n      /** @protected */\n      this._updateFeedbackComponent = this._updateFeedbackComponent.bind(this);\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      localize.addEventListener('localeChanged', this._updateFeedbackComponent);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      localize.removeEventListener('localeChanged', this._updateFeedbackComponent);\n    }\n\n    /**\n     * @param {import('@lion/core').PropertyValues} changedProperties\n     */\n    firstUpdated(changedProperties) {\n      super.firstUpdated(changedProperties);\n      this.__validateInitialized = true;\n      this.validate();\n      if (this._repropagationRole !== 'child') {\n        this.addEventListener('model-value-changed', () => {\n          this.__childModelValueChanged = true;\n        });\n      }\n    }\n\n    /**\n     * @param {string} name\n     * @param {?} oldValue\n     */\n    updateSync(name, oldValue) {\n      super.updateSync(name, oldValue);\n      if (name === 'validators') {\n        // trigger validation (ideally only for the new or changed validator)\n        this.__setupValidators();\n        this.validate({ clearCurrentResult: true });\n      } else if (name === 'modelValue') {\n        this.validate({ clearCurrentResult: true });\n      }\n\n      if (\n        [\n          'touched',\n          'dirty',\n          'prefilled',\n          'focused',\n          'submitted',\n          'hasFeedbackFor',\n          'filled',\n        ].includes(name)\n      ) {\n        this._updateShouldShowFeedbackFor();\n      }\n\n      if (name === 'showsFeedbackFor') {\n        // This can't be reflected asynchronously in Safari\n        // Screen reader output should be in sync with visibility of error messages\n        if (this._inputNode) {\n          this._inputNode.setAttribute('aria-invalid', `${this._hasFeedbackVisibleFor('error')}`);\n          // this._inputNode.setCustomValidity(this._validationMessage || '');\n        }\n\n        const diff = arrayDiff(this.showsFeedbackFor, oldValue);\n        if (diff.length > 0) {\n          this.dispatchEvent(new Event(`showsFeedbackForChanged`, { bubbles: true }));\n        }\n        diff.forEach(type => {\n          this.dispatchEvent(\n            new Event(`showsFeedbackFor${pascalCase(type)}Changed`, { bubbles: true }),\n          );\n        });\n      }\n\n      if (name === 'shouldShowFeedbackFor') {\n        const diff = arrayDiff(this.shouldShowFeedbackFor, oldValue);\n        if (diff.length > 0) {\n          this.dispatchEvent(new Event(`shouldShowFeedbackForChanged`, { bubbles: true }));\n        }\n      }\n    }\n\n    /**\n     * Triggered by:\n     *  - modelValue change\n     *  - change in the 'validators' array\n     *  - change in the config of an individual Validator\n     *\n     * Three situations are handled:\n     * - a1) the FormControl is empty: further execution is halted. When the Required Validator\n     * (being mutually exclusive to the other Validators) is applied, it will end up in the\n     * validation result (as the only Validator, since further execution was halted).\n     * - a2) there are synchronous Validators: this is the most common flow. When modelValue hasn't\n     * changed since last async results were generated, 'sync results' are merged with the\n     * 'async results'.\n     * - a3) there are asynchronous Validators: for instance when server side evaluation is needed.\n     * Executions are scheduled and awaited and the 'async results' are merged with the\n     * 'sync results'.\n     *\n     * - b) there are ResultValidators. After steps a1, a2, or a3 are finished, the holistic\n     * ResultValidators (evaluating the total result of the 'regular' (a1, a2 and a3) validators)\n     * will be run...\n     *\n     * Situations a2 and a3 are not mutually exclusive and can be triggered within one `validate()`\n     * call. Situation b will occur after every call.\n     *\n     * @param {{ clearCurrentResult?: boolean }} [opts]\n     */\n    async validate({ clearCurrentResult } = {}) {\n      if (this.disabled) {\n        this.__clearValidationResults();\n        this.__finishValidation({ source: 'sync', hasAsync: true });\n        this._updateFeedbackComponent();\n        return;\n      }\n      if (!this.__validateInitialized) {\n        return;\n      }\n\n      this.__prevValidationResult = this.__validationResult;\n      if (clearCurrentResult) {\n        // Clear ('invalidate') all pending and existing validation results.\n        // This is needed because we have async (pending) validators whose results\n        // need to be merged with those of sync validators and vice versa.\n        this.__clearValidationResults();\n      }\n      await this.__executeValidators();\n    }\n\n    /**\n     * @desc step a1-3 + b (as explained in `validate()`)\n     */\n    async __executeValidators() {\n      /**\n       * Allows Application Developer to wait for (async) validation\n       * @example\n       * ```js\n       * await el.validateComplete;\n       * ```\n       * @type {Promise<boolean>}\n       */\n      this.validateComplete = new Promise(resolve => {\n        this.__validateCompleteResolve = resolve;\n      });\n\n      // When the modelValue can't be created by FormatMixin.parser, still allow all validators\n      // to give valuable feedback to the user based on the current viewValue.\n      const value =\n        this.modelValue instanceof Unparseable ? this.modelValue.viewValue : this.modelValue;\n\n      /** @type {Validator | undefined} */\n      const requiredValidator = this._allValidators.find(v => v instanceof Required);\n\n      /**\n       * 1. Handle the 'exceptional' Required validator:\n       * - the validatity is dependent on the formControl type and therefore determined\n       * by the formControl.__isEmpty method. Basically, the Required Validator is a means\n       * to trigger formControl.__isEmpty.\n       * - when __isEmpty returns true, the input was empty. This means we need to stop\n       * validation here, because all other Validators' execute functions assume the\n       * value is not empty (there would be nothing to validate).\n       */\n      // TODO: Try to remove this when we have a single lion form core package, because then we can\n      // depend on FormControlMixin directly, and _isEmpty will always be an existing method on the prototype then\n      const isEmpty = this.__isEmpty(value);\n      if (isEmpty) {\n        if (requiredValidator) {\n          this.__syncValidationResult = [{ validator: requiredValidator, outcome: true }];\n        }\n        this.__finishValidation({ source: 'sync' });\n        return;\n      }\n\n      // Separate Validators in sync and async\n      const /** @type {Validator[]} */ filteredValidators = this._allValidators.filter(\n          v => !(v instanceof ResultValidator) && !(v instanceof Required),\n        );\n      const /** @type {Validator[]} */ syncValidators = filteredValidators.filter(v => {\n          const vCtor = /** @type {typeof Validator} */ (v.constructor);\n          return !vCtor.async;\n        });\n      const /** @type {Validator[]} */ asyncValidators = filteredValidators.filter(v => {\n          const vCtor = /** @type {typeof Validator} */ (v.constructor);\n          return vCtor.async;\n        });\n\n      /**\n       * 2. Synchronous validators\n       */\n      this.__executeSyncValidators(syncValidators, value, {\n        hasAsync: Boolean(asyncValidators.length),\n      });\n\n      /**\n       * 3. Asynchronous validators\n       */\n      await this.__executeAsyncValidators(asyncValidators, value);\n    }\n\n    /**\n     * step a2 (as explained in `validate()`): calls `__finishValidation`\n     * @param {Validator[]} syncValidators\n     * @param {unknown} value\n     * @param {{ hasAsync: boolean }} opts\n     * @private\n     */\n    __executeSyncValidators(syncValidators, value, { hasAsync }) {\n      if (syncValidators.length) {\n        this.__syncValidationResult = syncValidators\n          .map(v => ({\n            validator: v,\n            outcome: /** @type {boolean|string} */ (v.execute(value, v.param, { node: this })),\n          }))\n          .filter(v => Boolean(v.outcome));\n      }\n      this.__finishValidation({ source: 'sync', hasAsync });\n    }\n\n    /**\n     * step a3 (as explained in `validate()`), calls __finishValidation\n     * @param {Validator[]} asyncValidators all Validators except required and ResultValidators\n     * @param {?} value\n     * @private\n     */\n    async __executeAsyncValidators(asyncValidators, value) {\n      if (asyncValidators.length) {\n        this.isPending = true;\n        const resultPromises = asyncValidators.map(v => v.execute(value, v.param, { node: this }));\n        const asyncExecutionResults = await Promise.all(resultPromises);\n\n        this.__asyncValidationResult = asyncExecutionResults\n          .map((r, i) => ({\n            validator: asyncValidators[i],\n            outcome: /** @type {boolean|string} */ (asyncExecutionResults[i]),\n          }))\n          .filter(v => Boolean(v.outcome));\n\n        this.__finishValidation({ source: 'async' });\n        this.isPending = false;\n      }\n    }\n\n    /**\n     * step b (as explained in `validate()`), called by __finishValidation\n     * @param {{validator: Validator;outcome: boolean | string;}[]} regularValidationResult result of steps 1-3\n     * @private\n     */\n    __executeResultValidators(regularValidationResult) {\n      const resultValidators = /** @type {ResultValidator[]} */ (\n        this._allValidators.filter(v => {\n          const vCtor = /** @type {typeof Validator} */ (v.constructor);\n          return !vCtor.async && v instanceof ResultValidator;\n        })\n      );\n\n      if (!resultValidators.length) {\n        return [];\n      }\n\n      // If empty, do not show the ResulValidation message (e.g. Correct!)\n      if (this._isEmpty(this.modelValue)) {\n        this.__prevShownValidationResult = [];\n        return [];\n      }\n\n      // Map everything to Validator[] for backwards compatibility\n      return resultValidators\n        .map(v => ({\n          validator: v,\n          outcome: /** @type {boolean|string} */ (\n            v.executeOnResults({\n              regularValidationResult: regularValidationResult.map(entry => entry.validator),\n              prevValidationResult: this.__prevValidationResult.map(entry => entry.validator),\n              prevShownValidationResult: this.__prevShownValidationResult.map(\n                entry => entry.validator,\n              ),\n            })\n          ),\n        }))\n        .filter(v => Boolean(v.outcome));\n    }\n\n    /**\n     * @param {object} options\n     * @param {'sync'|'async'} options.source\n     * @param {boolean} [options.hasAsync] whether async validators are configured in this run.\n     * @private\n     * If not, we have nothing left to wait for.\n     */\n    __finishValidation({ source, hasAsync }) {\n      const syncAndAsyncOutcome = [...this.__syncValidationResult, ...this.__asyncValidationResult];\n      // if we have any ResultValidators left, now is the time to run them...\n      const resultOutCome = /** @type {ValidationResultEntry[]} */ (\n        this.__executeResultValidators(syncAndAsyncOutcome)\n      );\n      this.__validationResult = [...resultOutCome, ...syncAndAsyncOutcome];\n\n      const ctor = /** @type {ValidateHostConstructor} */ (this.constructor);\n\n      /** @type {ValidationStates} */\n      const validationStates = ctor.validationTypes.reduce(\n        (acc, type) => ({ ...acc, [type]: {} }),\n        {},\n      );\n      this.__validationResult.forEach(({ validator, outcome }) => {\n        if (!validationStates[validator.type]) {\n          validationStates[validator.type] = {};\n        }\n        const vCtor = /** @type {typeof Validator} */ (validator.constructor);\n        validationStates[validator.type][vCtor.validatorName] = outcome;\n      });\n      this.validationStates = validationStates;\n\n      this.hasFeedbackFor = [\n        ...new Set(this.__validationResult.map(({ validator }) => validator.type)),\n      ];\n      /** private event that should be listened to by LionFieldSet */\n      this.dispatchEvent(new Event('validate-performed', { bubbles: true }));\n      if (source === 'async' || !hasAsync) {\n        if (this.__validateCompleteResolve) {\n          this.__validateCompleteResolve(true);\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n    __clearValidationResults() {\n      this.__syncValidationResult = [];\n      this.__asyncValidationResult = [];\n    }\n\n    /**\n     * @param {Event|CustomEvent} e\n     * @protected\n     */\n    _onValidatorUpdated(e) {\n      if (e.type === 'param-changed' || e.type === 'config-changed') {\n        this.validate();\n      }\n    }\n\n    /**\n     * @private\n     */\n    __setupValidators() {\n      const events = ['param-changed', 'config-changed'];\n      if (this.__prevValidators) {\n        this.__prevValidators.forEach(v => {\n          events.forEach(e => {\n            if (v.removeEventListener) {\n              v.removeEventListener(e, this._onValidatorUpdated);\n            }\n          });\n          v.onFormControlDisconnect(this);\n        });\n      }\n      this._allValidators.forEach(v => {\n        if (!(v instanceof Validator)) {\n          // throws in constructor are not visible to end user so we do both\n          const errorType = Array.isArray(v) ? 'array' : typeof v;\n          const errorMessage = `Validators array only accepts class instances of Validator. Type \"${errorType}\" found. This may be caused by having multiple installations of @lion/form-core.`;\n          // eslint-disable-next-line no-console\n          console.error(errorMessage, this);\n          throw new Error(errorMessage);\n        }\n        const ctor = /** @type {ValidateHostConstructor} */ (this.constructor);\n        if (ctor.validationTypes.indexOf(v.type) === -1) {\n          const vCtor = /** @type {typeof Validator} */ (v.constructor);\n          // throws in constructor are not visible to end user so we do both\n          const errorMessage = `This component does not support the validator type \"${v.type}\" used in \"${vCtor.validatorName}\". You may change your validators type or add it to the components \"static get validationTypes() {}\".`;\n          // eslint-disable-next-line no-console\n          console.error(errorMessage, this);\n          throw new Error(errorMessage);\n        }\n        /** Updated the code to fix issue #1607 to sync the calendar date with validators params\n         *  Here _onValidatorUpdated is responsible for responding to the event\n         */\n        events.forEach(eventName => {\n          if (v.addEventListener) {\n            v.addEventListener(eventName, e => {\n              // @ts-ignore for making validator param dynamic\n              this._onValidatorUpdated(e, { validator: v });\n            });\n          }\n        });\n        v.onFormControlConnect(this);\n      });\n      this.__prevValidators = this._allValidators;\n    }\n\n    /**\n     * Helper method for the mutually exclusive Required Validator\n     * @param {?} v\n     * @private\n     */\n    __isEmpty(v) {\n      if (typeof this._isEmpty === 'function') {\n        return this._isEmpty(v);\n      }\n      return (\n        this.modelValue === null || typeof this.modelValue === 'undefined' || this.modelValue === ''\n      );\n    }\n\n    // ------------------------------------------------------------------------------------------\n    // -- Feedback specifics --------------------------------------------------------------------\n    // ------------------------------------------------------------------------------------------\n\n    /**\n     * @typedef {object} FeedbackMessage\n     * @property {string | Node} message this\n     * @property {string} type will be 'error' for messages from default Validators. Could be\n     * 'warning', 'info' etc. for Validators with custom types. Needed as a directive for\n     * feedbackNode how to render a message of a certain type\n     * @property {Validator} [validator] when the message is directly coupled to a Validator\n     * (in most cases), this property is filled. When a message is not coupled to a Validator\n     * (in case of success feedback which is based on a diff or current and previous validation\n     * results), this property can be left empty.\n     */\n\n    /**\n     * @param {ValidationResultEntry[]} validationResults list of objects having a .getMessage method\n     * @return {Promise.<FeedbackMessage[]>}\n     * @private\n     */\n    async __getFeedbackMessages(validationResults) {\n      let fieldName = await this.fieldName;\n      return Promise.all(\n        validationResults.map(async ({ validator, outcome }) => {\n          if (validator.config.fieldName) {\n            fieldName = await validator.config.fieldName;\n          }\n          // @ts-ignore [allow-protected]\n          const message = await validator._getMessage({\n            modelValue: this.modelValue,\n            formControl: this,\n            fieldName,\n            outcome,\n          });\n          return { message, type: validator.type, validator };\n        }),\n      );\n    }\n\n    /**\n     * Responsible for retrieving messages from Validators and\n     * (delegation of) rendering them.\n     *\n     * For `._feedbackNode` (extension of LionValidationFeedback):\n     * - retrieve messages from highest prio Validators\n     * - provide the result to custom feedback node and let the\n     * custom node decide on their renderings\n     *\n     * In both cases:\n     * - we compute the 'show' flag (like 'hasErrorVisible') for all types\n     * - we set the customValidity message of the highest prio Validator\n     * - we set aria-invalid=\"true\" in case hasErrorVisible is true\n     * @protected\n     */\n    _updateFeedbackComponent() {\n      const { _feedbackNode } = this;\n      if (!_feedbackNode) {\n        return;\n      }\n\n      if (!this.__feedbackQueue) {\n        this.__feedbackQueue = new AsyncQueue();\n      }\n\n      if (this.showsFeedbackFor.length > 0) {\n        this.__feedbackQueue.add(async () => {\n          /** @type {Validator[]} */\n          const prioritizedValidators = this._prioritizeAndFilterFeedback({\n            validationResult: this.__validationResult.map(entry => entry.validator),\n          });\n\n          this.__prioritizedResult = prioritizedValidators\n            .map(v => {\n              const found = /** @type {ValidationResultEntry} */ (\n                this.__validationResult.find(r => v === r.validator)\n              );\n              return found;\n            })\n            .filter(Boolean);\n\n          if (this.__prioritizedResult.length > 0) {\n            this.__prevShownValidationResult = this.__prioritizedResult;\n          }\n\n          const messageMap = await this.__getFeedbackMessages(this.__prioritizedResult);\n          _feedbackNode.feedbackData = messageMap.length ? messageMap : [];\n        });\n      } else {\n        this.__feedbackQueue.add(async () => {\n          _feedbackNode.feedbackData = [];\n        });\n      }\n      this.feedbackComplete = this.__feedbackQueue.complete;\n    }\n\n    /**\n     * Default feedbackCondition condition, used by Subclassers, that will be used when\n     * `feedbackCondition()` is not overridden by Application Developer.\n     * Show the validity feedback when returning true, don't show when false\n     * @param {string} type could be 'error', 'warning', 'info', 'success' or any other custom\n     * Validator type\n     * @param {object} meta meta info (interaction states etc)\n     * @protected\n     */\n    // eslint-disable-next-line no-unused-vars\n    _showFeedbackConditionFor(type, meta) {\n      return true;\n    }\n\n    /**\n     * Allows Subclassers to add meta info for feedbackCondition\n     * @configurable\n     */\n    get _feedbackConditionMeta() {\n      return { modelValue: this.modelValue, el: this };\n    }\n\n    /**\n     * Allows the Application Developer to specify when a feedback message should be shown\n     * @example\n     * ```js\n     * feedbackCondition(type, meta, defaultCondition) {\n     *   if (type === 'info') {\n     *     return true;\n     *   } else if (type === 'prefilledOnly') {\n     *     return meta.prefilled;\n     *   }\n     *   return defaultCondition(type, meta);\n     * }\n     * ```\n     * @overridable\n     * @param {string} type could be 'error', 'warning', 'info', 'success' or any other custom\n     * Validator type\n     * @param {object} meta meta info (interaction states etc)\n     * @param {((type: string, meta: object) => boolean)} currentCondition this is the _showFeedbackConditionFor\n     * that can be used if a developer wants to override for a certain type, but wants to fallback\n     * for other types\n     * @returns {boolean}\n     */\n    feedbackCondition(\n      type,\n      meta = this._feedbackConditionMeta,\n      currentCondition = this._showFeedbackConditionFor.bind(this),\n    ) {\n      return currentCondition(type, meta);\n    }\n\n    /**\n     * Used to translate `.hasFeedbackFor` and `.shouldShowFeedbackFor` to `.showsFeedbackFor`\n     * @param {string} type\n     * @protected\n     */\n    _hasFeedbackVisibleFor(type) {\n      return (\n        this.hasFeedbackFor &&\n        this.hasFeedbackFor.includes(type) &&\n        this.shouldShowFeedbackFor &&\n        this.shouldShowFeedbackFor.includes(type)\n      );\n    }\n\n    /**\n     * @param {import('@lion/core').PropertyValues} changedProperties\n     */\n    updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (\n        changedProperties.has('shouldShowFeedbackFor') ||\n        changedProperties.has('hasFeedbackFor')\n      ) {\n        const ctor = /** @type {ValidateHostConstructor} */ (this.constructor);\n        // Necessary typecast because types aren't smart enough to understand that we filter out undefined\n        this.showsFeedbackFor = /** @type {string[]} */ (\n          ctor.validationTypes\n            .map(type => (this._hasFeedbackVisibleFor(type) ? type : undefined))\n            .filter(Boolean)\n        );\n        this._updateFeedbackComponent();\n      }\n\n      if (changedProperties.has('__childModelValueChanged') && this.__childModelValueChanged) {\n        this.validate({ clearCurrentResult: true });\n        this.__childModelValueChanged = false;\n      }\n\n      if (changedProperties.has('validationStates')) {\n        const prevStates = /** @type {{[key: string]: object;}} */ (\n          changedProperties.get('validationStates')\n        );\n        if (prevStates) {\n          Object.entries(this.validationStates).forEach(([type, feedbackObj]) => {\n            if (\n              prevStates[type] &&\n              JSON.stringify(feedbackObj) !== JSON.stringify(prevStates[type])\n            ) {\n              this.dispatchEvent(new CustomEvent(`${type}StateChanged`, { detail: feedbackObj }));\n            }\n          });\n        }\n      }\n    }\n\n    /**\n     * @protected\n     */\n    _updateShouldShowFeedbackFor() {\n      const ctor = /** @type {ValidateHostConstructor} */ (this.constructor);\n\n      // Necessary typecast because types aren't smart enough to understand that we filter out undefined\n      const newShouldShowFeedbackFor = /** @type {string[]} */ (\n        ctor.validationTypes\n          .map(type =>\n            this.feedbackCondition(\n              type,\n              this._feedbackConditionMeta,\n              this._showFeedbackConditionFor.bind(this),\n            )\n              ? type\n              : undefined,\n          )\n          .filter(Boolean)\n      );\n\n      if (JSON.stringify(this.shouldShowFeedbackFor) !== JSON.stringify(newShouldShowFeedbackFor)) {\n        this.shouldShowFeedbackFor = newShouldShowFeedbackFor;\n      }\n    }\n\n    /**\n     * Orders all active validators in this.__validationResult.\n     * Can also filter out occurrences (based on interaction states)\n     * @overridable\n     * @param {{ validationResult: Validator[] }} opts\n     * @return {Validator[]} ordered list of Validators with feedback messages visible to the end user\n     * @protected\n     */\n    _prioritizeAndFilterFeedback({ validationResult }) {\n      const ctor = /** @type {ValidateHostConstructor} */ (this.constructor);\n      const types = ctor.validationTypes;\n      // Sort all validators based on the type provided.\n      const res = validationResult\n        .filter(v =>\n          this.feedbackCondition(\n            v.type,\n            this._feedbackConditionMeta,\n            this._showFeedbackConditionFor.bind(this),\n          ),\n        )\n        .sort((a, b) => types.indexOf(a.type) - types.indexOf(b.type));\n      return res.slice(0, this._visibleMessagesAmount);\n    }\n  };\n\nexport const ValidateMixin = dedupeMixin(ValidateMixinImplementation);\n", "/* eslint-disable class-methods-use-this */\n\nimport { dedupeMixin } from '@lion/core';\nimport { FormControlMixin } from './FormControlMixin.js';\nimport { Unparseable } from './validate/Unparseable.js';\nimport { ValidateMixin } from './validate/ValidateMixin.js';\n\n/**\n * @typedef {import('../types/FormatMixinTypes').FormatMixin} FormatMixin\n * @typedef {import('../types/FormatMixinTypes').FormatOptions} FormatOptions\n * @typedef {import('../types/FormControlMixinTypes.js').ModelValueEventDetails} ModelValueEventDetails\n */\n\n// For a future breaking release:\n// - do not allow the private `.formattedValue` as property that can be set to\n// trigger a computation loop.\n// - do not fire events for those private and protected concepts\n// - simplify _calculateValues: recursive trigger lock can be omitted, since need for connecting\n// the loop via sync observers is not needed anymore.\n// - consider `formatOn` as an overridable function, by default something like:\n// `(!_isHandlingUserInput || !hasError) && !focused`\n// This would allow for more advanced scenarios, like formatting an input whenever it becomes valid.\n// This would make formattedValue as a concept obsolete, since for maximum flexibility, the\n// formattedValue condition needs to be evaluated right before syncing back to the view\n\n/**\n * @desc Designed to be applied on top of a LionField.\n * To understand all concepts within the Mixin, please consult the flow diagram in the\n * documentation.\n *\n * ## Flows\n * FormatMixin supports these two main flows:\n * [1] Application Developer sets `.modelValue`:\n *     Flow: `.modelValue` (formatter) -> `.formattedValue` -> `._inputNode.value`\n *                         (serializer) -> `.serializedValue`\n * [2] End user interacts with field:\n *     Flow: `@user-input-changed` (parser) -> `.modelValue` (formatter) -> `.formattedValue` - (debounce till reflect condition (formatOn) is met) -> `._inputNode.value`\n *                                 (serializer) -> `.serializedValue`\n *\n * For backwards compatibility with the platform, we also support `.value` as an api. In that case\n * the flow will be like [2], without the debounce.\n *\n * ## Difference between value, viewValue and formattedValue\n * A viewValue is a concept rather than a property. To be compatible with the platform api, the\n * property for the concept of viewValue is thus called `.value`.\n * When reading code and docs, one should be aware that the term viewValue is mostly used, but the\n * terms can be used interchangeably.\n * The `.formattedValue` should be seen as the 'scheduled' viewValue. It is computed realtime and\n * stores the output of formatter. It will replace viewValue. once condition `formatOn` is met.\n * Another difference is that formattedValue lives on `LionField`, whereas viewValue is shared\n * across `LionField` and `._inputNode`.\n *\n * For restoring serialized values fetched from a server, we could consider one extra flow:\n * [3] Application Developer sets `.serializedValue`:\n *     Flow: serializedValue (deserializer) -> `.modelValue` (formatter) -> `.formattedValue` -> `._inputNode.value`\n *\n * @type {FormatMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n */\nconst FormatMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class FormatMixin extends ValidateMixin(FormControlMixin(superclass)) {\n    /** @type {any} */\n    static get properties() {\n      return {\n        formattedValue: { attribute: false },\n        serializedValue: { attribute: false },\n        formatOptions: { attribute: false },\n      };\n    }\n\n    /**\n     * @param {string} name\n     * @param {any} oldVal\n     */\n    requestUpdate(name, oldVal) {\n      super.requestUpdate(name, oldVal);\n\n      if (name === 'modelValue' && this.modelValue !== oldVal) {\n        this._onModelValueChanged({ modelValue: this.modelValue }, { modelValue: oldVal });\n      }\n      if (name === 'serializedValue' && this.serializedValue !== oldVal) {\n        this._calculateValues({ source: 'serialized' });\n      }\n      if (name === 'formattedValue' && this.formattedValue !== oldVal) {\n        this._calculateValues({ source: 'formatted' });\n      }\n    }\n\n    /**\n     * The view value. Will be delegated to `._inputNode.value`\n     */\n    get value() {\n      return (this._inputNode && this._inputNode.value) || this.__value || '';\n    }\n\n    /** @param {string} value */\n    set value(value) {\n      // if not yet connected to dom can't change the value\n      if (this._inputNode) {\n        this._inputNode.value = value;\n        /** @type {string | undefined} */\n        this.__value = undefined;\n      } else {\n        this.__value = value;\n      }\n    }\n\n    /**\n     * Preprocessors could be considered 'live formatters'. Their result is shown to the user\n     * on keyup instead of after blurring the field. The biggest difference between preprocessors\n     * and formatters is their moment of execution: preprocessors are run before modelValue is\n     * computed (and work based on view value), whereas formatters are run after the parser (and\n     * are based on modelValue)\n     * Automatically formats code while typing. It depends on a preprocessro that smartly\n     * updates the viewValue and caret position for best UX.\n     * @example\n     * ```js\n     * preprocessor(viewValue) {\n     *   // only use digits\n     *   return viewValue.replace(/\\D/g, '');\n     * }\n     * @param {string} v - the raw value from the <input> after keyUp/Down event\n     * @param {FormatOptions & { prevViewValue: string; currentCaretIndex: number }} opts - the raw value from the <input> after keyUp/Down event\n     * @returns {{ viewValue:string; caretIndex:number; }|string|undefined} preprocessedValue: the result of preprocessing for invalid input\n     */\n    // eslint-disable-next-line no-unused-vars\n    preprocessor(v, opts) {\n      return undefined;\n    }\n\n    /**\n     * Converts viewValue to modelValue\n     * For instance, a localized date to a Date Object\n     * @param {string} v - viewValue: the formatted value inside <input>\n     * @param {FormatOptions} opts\n     * @returns {*} modelValue\n     */\n    // eslint-disable-next-line no-unused-vars\n    parser(v, opts) {\n      return v;\n    }\n\n    /**\n     * Converts modelValue to formattedValue (formattedValue will be synced with\n     * `._inputNode.value`)\n     * For instance, a Date object to a localized date.\n     * @param {*} v - modelValue: can be an Object, Number, String depending on the\n     * input type(date, number, email etc)\n     * @param {FormatOptions} opts\n     * @returns {string} formattedValue\n     */\n    // eslint-disable-next-line no-unused-vars\n    formatter(v, opts) {\n      return v;\n    }\n\n    /**\n     * Converts `.modelValue` to `.serializedValue`\n     * For instance, a Date object to an iso formatted date string\n     * @param {?} v - modelValue: can be an Object, Number, String depending on the\n     * input type(date, number, email etc)\n     * @returns {string} serializedValue\n     */\n    serializer(v) {\n      return v !== undefined ? v : '';\n    }\n\n    /**\n     * Converts `.serializedValue` to `.modelValue`\n     * For instance, an iso formatted date string to a Date object\n     * @param {?} v - modelValue: can be an Object, Number, String depending on the\n     * input type(date, number, email etc)\n     * @returns {?} modelValue\n     */\n    deserializer(v) {\n      return v === undefined ? '' : v;\n    }\n\n    /**\n     * Responsible for storing all representations(modelValue, serializedValue, formattedValue\n     * and value) of the input value. Prevents infinite loops, so all value observers can be\n     * treated like they will only be called once, without indirectly calling other observers.\n     * (in fact, some are called twice, but the __preventRecursiveTrigger lock prevents the\n     * second call from having effect).\n     *\n     * @param {{source:'model'|'serialized'|'formatted'|null}} config - the type of value that triggered this method. It should not be\n     * set again, so that its observer won't be triggered. Can be:\n     * 'model'|'formatted'|'serialized'.\n     * @protected\n     */\n    _calculateValues({ source } = { source: null }) {\n      if (this.__preventRecursiveTrigger) return; // prevent infinite loops\n\n      /** @type {boolean} */\n      this.__preventRecursiveTrigger = true;\n      if (source !== 'model') {\n        if (source === 'serialized') {\n          /** @type {?} */\n          this.modelValue = this.deserializer(this.serializedValue);\n        } else if (source === 'formatted') {\n          this.modelValue = this._callParser();\n        }\n      }\n      if (source !== 'formatted') {\n        this.formattedValue = this._callFormatter();\n      }\n      if (source !== 'serialized') {\n        this.serializedValue = this.serializer(this.modelValue);\n      }\n      this._reflectBackFormattedValueToUser();\n      this.__preventRecursiveTrigger = false;\n      this.__prevViewValue = this.value;\n    }\n\n    /**\n     * @param {string|undefined} value\n     * @return {?}\n     * @private\n     */\n    _callParser(value = this.formattedValue) {\n      // A) check if we need to parse at all\n\n      // A.1) The end user had no intention to parse\n      if (value === '') {\n        // Ideally, modelValue should be undefined for empty strings.\n        // For backwards compatibility we return an empty string:\n        // - it can be expected by 3rd parties (for instance unit tests)\n        // TODO(@tlouisse): In a breaking refactor of the Validation System, this behavior can be corrected.\n        return '';\n      }\n\n      // A.2) Handle edge cases. We might have no view value yet, for instance because\n      // _inputNode.value was not available yet\n      if (typeof value !== 'string') {\n        // This means there is nothing to find inside the view that can be of\n        // interest to the Application Developer or needed to store for future\n        // form state retrieval.\n        return undefined;\n      }\n\n      // B) parse the view value\n\n      // - if result:\n      // return the successfully parsed viewValue\n      // - if no result:\n      // Apparently, the parser was not able to produce a satisfactory output for the desired\n      // modelValue type, based on the current viewValue. Unparseable allows to restore all\n      // states (for instance from a lost user session), since it saves the current viewValue.\n      const result = this.parser(value, this.formatOptions);\n      return result !== undefined ? result : new Unparseable(value);\n    }\n\n    /**\n     * @returns {string|undefined}\n     * @private\n     */\n    _callFormatter() {\n      // - Why check for this.hasError?\n      // We only want to format values that are considered valid. For best UX,\n      // we only 'reward' valid inputs.\n      // - Why check for _isHandlingUserInput?\n      // Downwards sync is prevented whenever we are in an `@user-input-changed` flow, [2].\n      // If we are in a 'imperatively set `.modelValue`' flow, [1], we want to reflect back\n      // the value, no matter what.\n      // This means, whenever we are in hasError and modelValue is set\n      // imperatively, we DO want to format a value (it is the only way to get meaningful\n      // input into `._inputNode` with modelValue as input)\n\n      if (\n        this._isHandlingUserInput &&\n        this.hasFeedbackFor?.length &&\n        this.hasFeedbackFor.includes('error') &&\n        this._inputNode\n      ) {\n        return this._inputNode ? this.value : undefined;\n      }\n\n      if (this.modelValue instanceof Unparseable) {\n        // When the modelValue currently is unparseable, we need to sync back the supplied\n        // viewValue. In flow [2], this should not be needed.\n        // In flow [1] (we restore a previously stored modelValue) we should sync down, however.\n        return this.modelValue.viewValue;\n      }\n\n      return this.formatter(this.modelValue, this.formatOptions);\n    }\n\n    /**\n     * Responds to modelValue changes in the synchronous cycle (most subclassers should listen to\n     * the asynchronous cycle ('modelValue' in the .updated lifecycle))\n     * @param {{ modelValue: unknown; }[]} args\n     * @protected\n     */\n    _onModelValueChanged(...args) {\n      this._calculateValues({ source: 'model' });\n      this._dispatchModelValueChangedEvent(...args);\n    }\n\n    /**\n     * This is wrapped in a distinct method, so that parents can control when the changed event\n     * is fired. For objects, a deep comparison might be needed.\n     * @param {{ modelValue: unknown; }[]} args\n     * @protected\n     */\n    // eslint-disable-next-line no-unused-vars\n    _dispatchModelValueChangedEvent(...args) {\n      /** @event model-value-changed */\n      this.dispatchEvent(\n        /** @privateEvent model-value-changed: FormControl redispatches it as public event */\n        new CustomEvent('model-value-changed', {\n          bubbles: true,\n          detail: /** @type { ModelValueEventDetails } */ ({\n            formPath: [this],\n            isTriggeredByUser: Boolean(this._isHandlingUserInput),\n          }),\n        }),\n      );\n    }\n\n    /**\n     * Synchronization from `._inputNode.value` to `LionField` (flow [2])\n     * Downwards syncing should only happen for `LionField`.value changes from 'above'.\n     * This triggers _onModelValueChanged and connects user input\n     * to the parsing/formatting/serializing loop.\n     * @protected\n     */\n    _syncValueUpwards() {\n      if (!this.__isHandlingComposition) {\n        this.__handlePreprocessor();\n      }\n      const prevFormatted = this.formattedValue;\n      this.modelValue = this._callParser(this.value);\n\n      // Sometimes, the formattedValue didn't change, but the viewValue did...\n      // We need this check to support pasting values that need to be formatted right on paste\n      if (prevFormatted === this.formattedValue && this.__prevViewValue !== this.value) {\n        this._calculateValues();\n      }\n    }\n\n    /**\n     * Handle view value and caretIndex, depending on return type of .preprocessor.\n     * @private\n     */\n    __handlePreprocessor() {\n      const unprocessedValue = this.value;\n      let currentCaretIndex = this.value.length;\n      // Be gentle with Safari\n      if (\n        this._inputNode &&\n        'selectionStart' in this._inputNode &&\n        /** @type {HTMLInputElement} */ (this._inputNode)?.type !== 'range'\n      ) {\n        currentCaretIndex = /** @type {number} */ (this._inputNode.selectionStart);\n      }\n      const preprocessedValue = this.preprocessor(this.value, {\n        ...this.formatOptions,\n        currentCaretIndex,\n        prevViewValue: this.__prevViewValue,\n      });\n\n      this.__prevViewValue = unprocessedValue;\n      if (preprocessedValue === undefined) {\n        // Make sure we do no set back original value, so we preserve\n        // caret index (== selectionStart/selectionEnd)\n        return;\n      }\n      if (typeof preprocessedValue === 'string') {\n        this.value = preprocessedValue;\n      } else if (typeof preprocessedValue === 'object') {\n        const { viewValue, caretIndex } = preprocessedValue;\n        this.value = viewValue;\n        if (caretIndex && this._inputNode && 'selectionStart' in this._inputNode) {\n          this._inputNode.selectionStart = caretIndex;\n          this._inputNode.selectionEnd = caretIndex;\n        }\n      }\n    }\n\n    /**\n     * Synchronization from `LionField.value` to `._inputNode.value`\n     * - flow [1] will always be reflected back\n     * - flow [2] will not be reflected back when this flow was triggered via\n     *   `@user-input-changed` (this will happen later, when `formatOn` condition is met)\n     * @protected\n     */\n    _reflectBackFormattedValueToUser() {\n      if (this._reflectBackOn()) {\n        // Text 'undefined' should not end up in <input>\n        this.value = typeof this.formattedValue !== 'undefined' ? this.formattedValue : '';\n      }\n    }\n\n    /**\n     * Every time .formattedValue is attempted to sync to the view value (on change/blur and on\n     * modelValue change), this condition is checked. When enhancing it, it's recommended to\n     * call via `return this._myExtraCondition && super._reflectBackOn()`\n     * @overridable\n     * @return {boolean}\n     * @protected\n     */\n    _reflectBackOn() {\n      return !this._isHandlingUserInput;\n    }\n\n    /**\n     * This can be called whenever the view value should be updated. Dependent on component type\n     * (\"input\" for <input> or \"change\" for <select>(mainly for IE)) a different event should be\n     * used  as source for the \"user-input-changed\" event (which can be seen as an abstraction\n     * layer on top of other events (input, change, whatever))\n     * @protected\n     */\n    _proxyInputEvent() {\n      // TODO: [v1] remove composed (and bubbles as well if possible)\n      /** @protectedEvent user-input-changed meant for usage by Subclassers only */\n      this.dispatchEvent(new Event('user-input-changed', { bubbles: true }));\n    }\n\n    /** @protected */\n    _onUserInputChanged() {\n      // Upwards syncing. Most properties are delegated right away, value is synced to\n      // `LionField`, to be able to act on (imperatively set) value changes\n      this._isHandlingUserInput = true;\n      this._syncValueUpwards();\n      this._isHandlingUserInput = false;\n    }\n\n    /**\n     * @param {Event} event\n     */\n    __onCompositionEvent({ type }) {\n      if (type === 'compositionstart') {\n        this.__isHandlingComposition = true;\n      } else if (type === 'compositionend') {\n        this.__isHandlingComposition = false;\n        // in all other cases this would be triggered via user-input-changed\n        this._syncValueUpwards();\n      }\n    }\n\n    constructor() {\n      super();\n\n      // TODO: [v1] delete; use 'change' event directly within this file\n      /**\n       * Event that will trigger formatting (more precise, visual update of the view, so the\n       * user sees the formatted value)\n       * Default: 'change'\n       * @deprecated use _reflectBackOn()\n       * @protected\n       */\n      this.formatOn = 'change';\n\n      /**\n       * Configuration object that will be available inside the formatter function\n       */\n      this.formatOptions = /** @type {FormatOptions} */ ({});\n\n      /**\n       * The view value is the result of the formatter function (when available).\n       * The result will be stored in the native _inputNode (usually an input[type=text]).\n       *\n       * Examples:\n       * - For a date input, this would be '20/01/1999' (dependent on locale).\n       * - For a number input, this could be '1,234.56' (a String representation of modelValue\n       * 1234.56)\n       * @type {string|undefined}\n       * @readOnly\n       */\n      this.formattedValue = undefined;\n\n      /**\n       * The serialized version of the model value.\n       * This value exists for maximal compatibility with the platform API.\n       * The serialized value can be an interface in context where data binding is not\n       * supported and a serialized string needs to be set.\n       *\n       * Examples:\n       * - For a date input, this would be the iso format of a date, e.g. '1999-01-20'.\n       * - For a number input this would be the String representation of a float ('1234.56'\n       *   instead of 1234.56)\n       *\n       * When no parser is available, the value is usually the same as the formattedValue\n       * (being _inputNode.value)\n       * @type {string|undefined}\n       */\n      this.serializedValue = undefined;\n\n      /**\n       * Whether the user is pasting content. Allows Subclassers to do this in their subclass:\n       * @example\n       * ```js\n       * _reflectBackOn() {\n       *   return super._reflectBackOn() || this._isPasting;\n       * }\n       * ```\n       * @protected\n       * @type {boolean}\n       */\n      this._isPasting = false;\n\n      /**\n       * Flag that will be set when user interaction takes place (for instance after an 'input'\n       * event). Will be added as meta info to the `model-value-changed` event. Depending on\n       * whether a user is interacting, formatting logic will be handled differently.\n       * @protected\n       * @type {boolean}\n       */\n      this._isHandlingUserInput = false;\n      /**\n       * @private\n       * @type {string}\n       */\n      this.__prevViewValue = '';\n      this.__onCompositionEvent = this.__onCompositionEvent.bind(this);\n      // This computes formattedValue\n      this.addEventListener('user-input-changed', this._onUserInputChanged);\n      // This sets the formatted viewValue after paste\n      this.addEventListener('paste', this.__onPaste);\n\n      /**\n       * @protected\n       */\n      this._reflectBackFormattedValueToUser = this._reflectBackFormattedValueToUser.bind(this);\n\n      /**\n       * @private\n       */\n      this._reflectBackFormattedValueDebounced = () => {\n        // Make sure this is fired after the change event of _inputNode, so that formattedValue\n        // is guaranteed to be calculated\n        setTimeout(this._reflectBackFormattedValueToUser);\n      };\n    }\n\n    /**\n     * @private\n     */\n    __onPaste() {\n      this._isPasting = true;\n      this.formatOptions.mode = 'pasted';\n      setTimeout(() => {\n        this._isPasting = false;\n        this.formatOptions.mode = 'auto';\n      });\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      // Connect the value found in <input> to the formatting/parsing/serializing loop as a\n      // fallback mechanism. Assume the user uses the value property of the\n      // `LionField`(recommended api) as the api (this is a downwards sync).\n      // However, when no value is specified on `LionField`, have support for sync of the real\n      // input to the `LionField` (upwards sync).\n      if (typeof this.modelValue === 'undefined') {\n        this._syncValueUpwards();\n      }\n      /** @type {string} */\n      this.__prevViewValue = this.value;\n\n      this._reflectBackFormattedValueToUser();\n\n      if (this._inputNode) {\n        this._inputNode.addEventListener(this.formatOn, this._reflectBackFormattedValueDebounced);\n        this._inputNode.addEventListener('input', this._proxyInputEvent);\n        this._inputNode.addEventListener('compositionstart', this.__onCompositionEvent);\n        this._inputNode.addEventListener('compositionend', this.__onCompositionEvent);\n      }\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      if (this._inputNode) {\n        this._inputNode.removeEventListener('input', this._proxyInputEvent);\n        this._inputNode.removeEventListener(\n          this.formatOn,\n          /** @type {EventListenerOrEventListenerObject} */ (\n            this._reflectBackFormattedValueDebounced\n          ),\n        );\n        this._inputNode.removeEventListener('compositionstart', this.__onCompositionEvent);\n        this._inputNode.removeEventListener('compositionend', this.__onCompositionEvent);\n      }\n    }\n  };\n\nexport const FormatMixin = dedupeMixin(FormatMixinImplementation);\n", "import { dedupeMixin } from '@lion/core';\nimport { FormControlMixin } from './FormControlMixin.js';\n\n/**\n * @typedef {import('../types/InteractionStateMixinTypes').InteractionStateMixin} InteractionStateMixin\n * @typedef {import('../types/InteractionStateMixinTypes').InteractionStates} InteractionStates\n */\n\n/**\n * @desc `InteractionStateMixin` adds meta information about touched and dirty states, that can\n * be read by other form components (ing-uic-input-error for instance, uses the touched state\n * to determine whether an error message needs to be shown).\n * Interaction states will be set when a user:\n * - leaves a form field(blur) -> 'touched' will be set to true. 'prefilled' when a\n *   field is left non-empty\n * - on keyup (actually, on the model-value-changed event) -> 'dirty' will be set to true\n *\n * @type {InteractionStateMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n */\nconst InteractionStateMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class InteractionStateMixin extends FormControlMixin(superclass) {\n    /** @type {any} */\n    static get properties() {\n      return {\n        touched: { type: Boolean, reflect: true },\n        dirty: { type: Boolean, reflect: true },\n        filled: { type: Boolean, reflect: true },\n        prefilled: { attribute: false },\n        submitted: { attribute: false },\n      };\n    }\n\n    /**\n     * @param {PropertyKey} name\n     * @param {*} oldVal\n     */\n    requestUpdate(name, oldVal) {\n      super.requestUpdate(name, oldVal);\n      if (name === 'touched' && this.touched !== oldVal) {\n        this._onTouchedChanged();\n      }\n\n      if (name === 'modelValue') {\n        // We do this in requestUpdate because we don't want to fire another re-render (e.g. when doing this in updated)\n        // Furthermore, we cannot do it on model-value-changed event because it isn't fired initially.\n        this.filled = !this._isEmpty();\n      }\n\n      if (name === 'dirty' && this.dirty !== oldVal) {\n        this._onDirtyChanged();\n      }\n    }\n\n    constructor() {\n      super();\n\n      /**\n       * True when user has focused and left(blurred) the field.\n       * @type {boolean}\n       */\n      this.touched = false;\n\n      /**\n       * True when user has changed the value of the field.\n       * @type {boolean}\n       */\n      this.dirty = false;\n\n      /**\n       * True when user has left non-empty field or input is prefilled.\n       * The name must be seen from the point of view of the input field:\n       * once the user enters the input field, the value is non-empty.\n       * @type {boolean}\n       */\n      this.prefilled = false;\n\n      /**\n       * True when the modelValue is non-empty (see _isEmpty in FormControlMixin)\n       * @type {boolean}\n       */\n      this.filled = false;\n\n      /**\n       * True when user has attempted to submit the form, e.g. through a button\n       * of type=\"submit\"\n       * @type {boolean}\n       */\n      // TODO: [v1] this might be fixable by scheduling property effects till firstUpdated\n      // this.submitted = false;\n\n      /**\n       * The event that triggers the touched state\n       * @type {string}\n       * @protected\n       */\n      this._leaveEvent = 'blur';\n\n      /**\n       * The event that triggers the dirty state\n       * @type {string}\n       * @protected\n       */\n      this._valueChangedEvent = 'model-value-changed';\n\n      /**\n       * @type {(event: Event) => unknown}\n       * @protected\n       */\n      this._iStateOnLeave = this._iStateOnLeave.bind(this);\n\n      /**\n       * @type {(event: Event) => unknown}\n       * @protected\n       */\n      this._iStateOnValueChange = this._iStateOnValueChange.bind(this);\n    }\n\n    /**\n     * Register event handlers and validate prefilled inputs\n     */\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener(this._leaveEvent, this._iStateOnLeave);\n      this.addEventListener(this._valueChangedEvent, this._iStateOnValueChange);\n      this.initInteractionState();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener(this._leaveEvent, this._iStateOnLeave);\n      this.removeEventListener(this._valueChangedEvent, this._iStateOnValueChange);\n    }\n\n    /**\n     * Evaluations performed on connectedCallback.\n     * This method is public, so it can be called at a later moment (when we need to wait for\n     * registering children for instance) as well.\n     * Since this method will be called twice in last mentioned scenario, it must stay idempotent.\n     */\n    initInteractionState() {\n      this.dirty = false;\n      this.prefilled = !this._isEmpty();\n    }\n\n    /**\n     * Sets touched value to true and reevaluates prefilled state.\n     * When false, on next interaction, user will start with a clean state.\n     * @protected\n     */\n    _iStateOnLeave() {\n      this.touched = true;\n      this.prefilled = !this._isEmpty();\n    }\n\n    /**\n     * Sets dirty value and validates when already touched or invalid\n     * @protected\n     */\n    _iStateOnValueChange() {\n      this.dirty = true;\n    }\n\n    /**\n     * Resets touched and dirty, and recomputes prefilled\n     */\n    resetInteractionState() {\n      this.touched = false;\n      this.submitted = false;\n      this.dirty = false;\n      this.prefilled = !this._isEmpty();\n    }\n\n    /**\n     * Dispatches event on touched state change\n     * @protected\n     */\n    _onTouchedChanged() {\n      /** @protectedEvent touched-changed */\n      this.dispatchEvent(new Event('touched-changed', { bubbles: true, composed: true }));\n    }\n\n    /**\n     * Dispatches event on touched state change\n     * @protected\n     */\n    _onDirtyChanged() {\n      /** @protectedEvent dirty-changed */\n      this.dispatchEvent(new Event('dirty-changed', { bubbles: true, composed: true }));\n    }\n\n    /**\n     * @override ValidateMixin\n     * Show the validity feedback when one of the following conditions is met:\n     *\n     * - submitted\n     *   If the form is submitted, always show the error message.\n     *\n     * - prefilled\n     *   the user already filled in something, or the value is prefilled\n     *   when the form is initially rendered.\n     *\n     * - touched && dirty\n     *   When a user starts typing for the first time in a field with for instance `required`\n     *   validation, error message should not be shown until a field becomes `touched`\n     *   (a user leaves(blurs) a field).\n     *   When a user enters a field without altering the value(making it `dirty`),\n     *   an error message shouldn't be shown either.\n     * @protected\n     * @param {string} type\n     * @param {InteractionStates} meta\n     */\n    // @ts-expect-error FIXME: istatemixin should implement validatemixin, then @override is valid\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    _showFeedbackConditionFor(type, meta) {\n      return (meta.touched && meta.dirty) || meta.prefilled || meta.submitted;\n    }\n\n    /**\n     * @enhance ValidateMixin\n     */\n    get _feedbackConditionMeta() {\n      return {\n        // @ts-ignore to fix, InteractionStateMixin needs to depend on ValidateMixin\n        ...super._feedbackConditionMeta,\n        submitted: this.submitted,\n        touched: this.touched,\n        dirty: this.dirty,\n        filled: this.filled,\n        prefilled: this.prefilled,\n      };\n    }\n  };\n\nexport const InteractionStateMixin = dedupeMixin(InteractionStateMixinImplementation);\n", "import { LitElement, SlotMixin } from '@lion/core';\nimport { ValidateMixin } from './validate/ValidateMixin.js';\nimport { FocusMixin } from './FocusMixin.js';\nimport { FormatMixin } from './FormatMixin.js';\nimport { FormControlMixin } from './FormControlMixin.js';\nimport { InteractionStateMixin } from './InteractionStateMixin.js'; // applies FocusMixin\n\n/**\n * `LionField`: wraps <input>, <textarea>, <select> and other interactable elements.\n * Also it would follow a nice hierarchy: lion-form -> lion-fieldset -> lion-field\n *\n * Note: We don't support placeholders, because we have a helper text and\n * placeholders confuse the user with accessibility needs.\n *\n * Please see the docs for in depth information.\n *\n * @example\n * <lion-field name=\"myName\">\n *   <label slot=\"label\">My Input</label>\n *   <input type=\"text\" slot=\"input\">\n * </lion-field>\n *\n * @customElement lion-field\n */\nexport class LionField extends FormControlMixin(\n  InteractionStateMixin(FocusMixin(FormatMixin(ValidateMixin(SlotMixin(LitElement))))),\n) {\n  /**\n   * @param {import('@lion/core').PropertyValues } changedProperties\n   */\n  firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    /** @type {any} */\n    this._initialModelValue = this.modelValue;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this._onChange = this._onChange.bind(this);\n    this._inputNode.addEventListener('change', this._onChange);\n    this.classList.add('form-field'); // eslint-disable-line\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._inputNode.removeEventListener('change', this._onChange);\n  }\n\n  resetInteractionState() {\n    super.resetInteractionState();\n    this.submitted = false;\n  }\n\n  /**\n   * Resets modelValue to initial value.\n   * Interaction states are cleared\n   */\n  reset() {\n    this.modelValue = this._initialModelValue;\n    this.resetInteractionState();\n  }\n\n  /**\n   * Clears modelValue.\n   * Interaction states are not cleared (use resetInteractionState for this)\n   */\n  clear() {\n    // TODO: [v1] set to undefined\n    this.modelValue = '';\n  }\n\n  /**\n   * Dispatches custom bubble event\n   * @protected\n   */\n  _onChange() {\n    /** @protectedEvent user-input-changed */\n    this.dispatchEvent(new Event('user-input-changed', { bubbles: true }));\n  }\n\n  /**\n   * @configure InteractionStateMixin, ValidateMixin\n   */\n  get _feedbackConditionMeta() {\n    return { ...super._feedbackConditionMeta, focused: this.focused };\n  }\n\n  /**\n   * @configure FocusMixin\n   */\n  get _focusableNode() {\n    return this._inputNode;\n  }\n}\n", "/* eslint-disable */\n\n/**\n * This class closely mimics the natively\n * supported HTMLFormControlsCollection. It can be accessed\n * both like an array and an object (based on control/element names).\n * @example\n * // This is how a native form works:\n * <form>\n *   <input id=\"a\" name=\"a\">\n *   <fieldset>\n *      <input id=\"b1\" name=\"b[]\">\n *      <input id=\"b2\" name=\"b[]\">\n *      <input id=\"c\" name=\"c\">\n *   </fieldset>\n *   <select id=\"d\" name=\"d\">\n *     <option></option>\n *   </select>\n *   <fieldset>\n *     <input type=\"radio\" id=\"e1\" name=\"e\">\n *     <input type=\"radio\" id=\"e2\" name=\"e\">\n *   </fieldset>\n *   <select id=\"f\" name=\"f\" multiple>\n *     <option></option>\n *   </select>\n *   <fieldset>\n *     <input type=\"checkbox\" id=\"g1\" name=\"g\">\n *     <input type=\"checkbox\" id=\"g2\" name=\"g\">\n *   </fieldset>\n * </form>\n *\n * form.elements[0]; // Element input#a\n * form.elements[1]; // Element input#b1\n * form.elements[2]; // Element input#b2\n * form.elements[3]; // Element input#c\n * form.elements.a;  // Element input#a\n * form.elements.b;  // RadioNodeList<Element> [input#b1, input#b2]\n * form.elements.c;  // input#c\n *\n * // This is how a Lion form works (for simplicity Lion components have the 'l'-prefix):\n * <l-form>\n *  <form>\n *\n *    <!-- fields -->\n *\n *    <l-input id=\"a\" name=\"a\"></l-input>\n *\n *\n *    <!-- field sets ('sub forms') -->\n *\n *    <l-fieldset>\n *      <l-input id=\"b1\" name=\"b\"</l-input>\n *      <l-input id=\"b2\" name=\"b\"></l-input>\n *      <l-input id=\"c\" name=\"c\"></l-input>\n *    </l-fieldset>\n *\n *\n *    <!-- choice groups (children are 'end points') -->\n *\n *    <!-- single selection choice groups -->\n *    <l-select id=\"d\" name=\"d\">\n *      <l-option></l-option>\n *    </l-select>\n *    <l-radio-group id=\"e\" name=\"e\">\n *      <l-radio></l-radio>\n *      <l-radio></l-radio>\n *    </l-radio-group>\n *\n *    <!-- multi selection choice groups -->\n *    <l-select id=\"f\" name=\"f\" multiple>\n *      <l-option></l-option>\n *    </l-select>\n *    <l-checkbox-group id=\"g\" name=\"g\">\n *      <l-checkbox></l-checkbox>\n *      <l-checkbox></l-checkbox>\n *    </l-checkbox-group>\n *\n *  </form>\n * </l-form>\n *\n * lionForm.formElements[0];                  // Element l-input#a\n * lionForm.formElements[1];                  // Element l-input#b1\n * lionForm.formElements[2];                  // Element l-input#b2\n * lionForm.formElements.a;                   // Element l-input#a\n * lionForm.formElements['b[]'];              // Array<Element> [l-input#b1, l-input#b2]\n * lionForm.formElements.c;                   // Element l-input#c\n *\n * lionForm.formElements[d-g].formElements; // Array<Element>\n *\n * lionForm.formElements[d-e].value;          // String\n * lionForm.formElements[f-g].value;          // Array<String>\n */\nexport class FormControlsCollection extends Array {\n  /**\n   * @desc Gives back the named keys and filters out array indexes\n   * @return {string[]}\n   * @protected\n   */\n  _keys() {\n    return Object.keys(this).filter(k => Number.isNaN(Number(k)));\n  }\n}\n", "// eslint-disable-next-line max-classes-per-file\nimport { dedupeMixin } from '@lion/core';\nimport { FormControlsCollection } from './FormControlsCollection.js';\nimport { FormRegisteringMixin } from './FormRegisteringMixin.js';\n\n/**\n * @typedef {import('../../types/FormControlMixinTypes').FormControlHost} FormControlHost\n * @typedef {import('../../types/registration/FormRegistrarMixinTypes').FormRegistrarMixin} FormRegistrarMixin\n * @typedef {import('../../types/registration/FormRegistrarMixinTypes').FormRegistrarHost} FormRegistrarHost\n * @typedef {import('../../types/registration/FormRegistrarMixinTypes').ElementWithParentFormGroup} ElementWithParentFormGroup\n * @typedef {import('../../types/registration/FormRegisteringMixinTypes').FormRegisteringHost} FormRegisteringHost\n * @typedef {FormControlHost & HTMLElement & {_parentFormGroup?:HTMLElement, checked?:boolean}} FormControl\n */\n\n/**\n * @desc This allows an element to become the manager of a register.\n * It basically keeps track of a FormControlsCollection that it stores in .formElements\n * This will always be an array of all elements.\n * In case of a form or fieldset(sub form), it will also act as a key based object with FormControl\n * (fields, choice groups or fieldsets)as keys.\n * For choice groups, the value will only stay an array.\n * See FormControlsCollection for more information\n * @type {FormRegistrarMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n */\nconst FormRegistrarMixinImplementation = superclass =>\n  // eslint-disable-next-line no-shadow, no-unused-vars\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class extends FormRegisteringMixin(superclass) {\n    /** @type {any} */\n    static get properties() {\n      return {\n        _isFormOrFieldset: { type: Boolean },\n      };\n    }\n\n    constructor() {\n      super();\n\n      /**\n       * Closely mimics the natively supported HTMLFormControlsCollection. It can be accessed\n       * both like an array and an object (based on control/element names).\n       * @type {FormControlsCollection}\n       */\n      this.formElements = new FormControlsCollection();\n\n      /**\n       * Flag that determines how \".formElements\" should behave.\n       * For a regular fieldset (see LionFieldset) we expect \".formElements\"\n       * to be accessible as an object.\n       * In case of a radio-group, a checkbox-group or a select/listbox,\n       * it should act like an array (see ChoiceGroupMixin).\n       * Usually, when false, we deal with a choice-group (radio-group, checkbox-group,\n       * (multi)select)\n       * @type {boolean}\n       * @protected\n       */\n      this._isFormOrFieldset = false;\n\n      this._onRequestToAddFormElement = this._onRequestToAddFormElement.bind(this);\n      this._onRequestToChangeFormElementName = this._onRequestToChangeFormElementName.bind(this);\n\n      this.addEventListener(\n        'form-element-register',\n        /** @type {EventListenerOrEventListenerObject} */ (this._onRequestToAddFormElement),\n      );\n      this.addEventListener(\n        'form-element-name-changed',\n        /** @type {EventListenerOrEventListenerObject} */ (this._onRequestToChangeFormElementName),\n      );\n\n      /**\n       * initComplete resolves after all pending initialization logic\n       * (for instance `<form-group .serializedValue=${{ child1: 'a', child2: 'b' }}>`)\n       * is executed\n       * @type {Promise<any>}\n       */\n      this.initComplete = new Promise((resolve, reject) => {\n        this.__resolveInitComplete = resolve;\n        this.__rejectInitComplete = reject;\n      });\n\n      /**\n       * registrationComplete waits for all children formElements to have registered\n       * @type {Promise<any> & {done?:boolean}}\n       */\n      this.registrationComplete = new Promise((resolve, reject) => {\n        this.__resolveRegistrationComplete = resolve;\n        this.__rejectRegistrationComplete = reject;\n      });\n      this.registrationComplete.done = false;\n      this.registrationComplete.then(\n        () => {\n          this.registrationComplete.done = true;\n          this.__resolveInitComplete(undefined);\n        },\n        () => {\n          this.registrationComplete.done = true;\n          this.__rejectInitComplete(undefined);\n          throw new Error(\n            'Registration could not finish. Please use await el.registrationComplete;',\n          );\n        },\n      );\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this._completeRegistration();\n    }\n\n    /**\n     * Resolves the registrationComplete promise. Subclassers can delay if needed\n     * @overridable\n     */\n    _completeRegistration() {\n      Promise.resolve().then(() => this.__resolveRegistrationComplete(undefined));\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      if (this.registrationComplete.done === false) {\n        Promise.resolve().then(() => {\n          Promise.resolve().then(() => {\n            this.__rejectRegistrationComplete();\n          });\n        });\n      }\n    }\n\n    /**\n     *\n     * @param {ElementWithParentFormGroup} el\n     */\n    isRegisteredFormElement(el) {\n      return this.formElements.some(exitingEl => exitingEl === el);\n    }\n\n    /**\n     * @param {FormControl} child the child element (field)\n     * @param {number} indexToInsertAt index to insert the form element at\n     */\n    addFormElement(child, indexToInsertAt) {\n      // This is a way to let the child element (a lion-fieldset or lion-field) know, about its parent\n      // eslint-disable-next-line no-param-reassign\n      child._parentFormGroup = /** @type {* & FormRegistrarHost} */ (this);\n\n      // 1. Add children as array element\n      if (indexToInsertAt >= 0) {\n        this.formElements.splice(indexToInsertAt, 0, child);\n      } else {\n        this.formElements.push(child);\n      }\n\n      // 2. Add children as object key\n      if (this._isFormOrFieldset) {\n        const { name } = child;\n        if (name === this.name) {\n          console.info('Error Node:', child); // eslint-disable-line no-console\n          throw new TypeError(`You can not have the same name \"${name}\" as your parent`);\n        }\n\n        if (name.substr(-2) === '[]') {\n          if (!Array.isArray(this.formElements[name])) {\n            this.formElements[name] = new FormControlsCollection();\n          }\n          if (indexToInsertAt > 0) {\n            this.formElements[name].splice(indexToInsertAt, 0, child);\n          } else {\n            this.formElements[name].push(child);\n          }\n        } else if (!this.formElements[name]) {\n          this.formElements[name] = child;\n        } else {\n          console.info('Error Node:', child); // eslint-disable-line no-console\n          throw new TypeError(\n            `Name \"${name}\" is already registered - if you want an array add [] to the end`,\n          );\n        }\n      }\n    }\n\n    /**\n     * @param {FormControlHost} child the child element (field)\n     */\n    removeFormElement(child) {\n      // 1. Handle array based children\n      const index = this.formElements.indexOf(child);\n      if (index > -1) {\n        this.formElements.splice(index, 1);\n      }\n\n      // 2. Handle name based object keys\n      if (this._isFormOrFieldset) {\n        const { name } = child; // FIXME: <-- ElementWithParentFormGroup should become LionFieldWithParentFormGroup so that \"name\" exists\n        if (name.substr(-2) === '[]' && this.formElements[name]) {\n          const idx = this.formElements[name].indexOf(child);\n          if (idx > -1) {\n            this.formElements[name].splice(idx, 1);\n          }\n        } else if (this.formElements[name]) {\n          delete this.formElements[name];\n        }\n      }\n    }\n\n    /**\n     * Hook for Subclassers to perform logic before an element is added\n     * @param {CustomEvent} ev\n     * @protected\n     */\n    _onRequestToAddFormElement(ev) {\n      const child = ev.detail.element;\n      if (child === this) {\n        // as we fire and listen - don't add ourselves\n        return;\n      }\n      if (this.isRegisteredFormElement(child)) {\n        // do not readd already existing elements\n        return;\n      }\n      ev.stopPropagation();\n\n      // Check for DOM order to determine the right order to insert into formElements\n      // If there is no other element, index is -1 (e.g. add it to the end)\n      let indexToInsertAt = -1;\n      if (this.formElements && Array.isArray(this.formElements)) {\n        // we start comparing from the end of the array as it's the most likely position where the element will be added\n        for (const [i, formElement] of this.formElements.entries()) {\n          // compareDocumentPosition returns a bitmask\n          // eslint-disable-next-line no-bitwise\n          if (formElement.compareDocumentPosition(child) & Node.DOCUMENT_POSITION_FOLLOWING) {\n            // nothing as child is after formElement in DOM\n          } else {\n            // first time child is NOT after formElement in DOM we insert it\n            indexToInsertAt = i;\n            break;\n          }\n        }\n      }\n      this.addFormElement(child, indexToInsertAt);\n    }\n\n    /**\n     * @param {CustomEvent} ev\n     * @protected\n     */\n    _onRequestToChangeFormElementName(ev) {\n      const element = this.formElements[ev.detail.oldName];\n      if (element) {\n        this.formElements[ev.detail.newName] = element;\n        delete this.formElements[ev.detail.oldName];\n      }\n    }\n\n    /**\n     * @param {CustomEvent} ev\n     * @protected\n     */\n    _onRequestToRemoveFormElement(ev) {\n      const child = ev.detail.element;\n      if (child === this) {\n        // as we fire and listen - don't remove ourselves\n        return;\n      }\n      if (!this.isRegisteredFormElement(child)) {\n        // do not remove non existing elements\n        return;\n      }\n      ev.stopPropagation();\n\n      this.removeFormElement(child);\n    }\n  };\n\nexport const FormRegistrarMixin = dedupeMixin(FormRegistrarMixinImplementation);\n", "import { dedupeMixin } from '@lion/core';\nimport { FormControlMixin } from './FormControlMixin.js';\nimport { FocusMixin } from './FocusMixin.js';\nimport { FormatMixin } from './FormatMixin.js';\n\n/**\n * @typedef {import('../types/NativeTextFieldMixinTypes').NativeTextFieldMixin} NativeTextFieldMixin\n * @type {NativeTextFieldMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass} superclass\n */\nconst NativeTextFieldMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class NativeTextFieldMixin extends FormatMixin(FocusMixin(FormControlMixin(superclass))) {\n    /** @type {any} */\n    static get properties() {\n      return {\n        autocomplete: { type: String, reflect: true },\n      };\n    }\n\n    constructor() {\n      super();\n\n      /**\n       * Delegates this property to input/textarea/select.\n       * @type {string | undefined}\n       */\n      this.autocomplete = undefined;\n    }\n\n    /**\n     * @protected\n     * @type {HTMLInputElement | HTMLTextAreaElement}\n     */\n    get _inputNode() {\n      return /** @type {HTMLInputElement | HTMLTextAreaElement} */ (super._inputNode);\n    }\n\n    /** @type {number} */\n    get selectionStart() {\n      const native = this._inputNode;\n      if (native && native.selectionStart) {\n        return native.selectionStart;\n      }\n      return 0;\n    }\n\n    set selectionStart(value) {\n      const native = this._inputNode;\n      if (native && native.selectionStart) {\n        native.selectionStart = value;\n      }\n    }\n\n    /** @type {number} */\n    get selectionEnd() {\n      const native = this._inputNode;\n      if (native && native.selectionEnd) {\n        return native.selectionEnd;\n      }\n      return 0;\n    }\n\n    set selectionEnd(value) {\n      const native = this._inputNode;\n      if (native && native.selectionEnd) {\n        native.selectionEnd = value;\n      }\n    }\n\n    /**\n     * The view value. Will be delegated to `._inputNode.value`\n     * @override FormatMixin\n     */\n    get value() {\n      return (this._inputNode && this._inputNode.value) || this.__value || '';\n    }\n\n    /**\n     * @param {string} value\n     * @override FormatMixin - We don't delegate, because we want to preserve caret position via _setValueAndPreserveCaret\n     */\n    set value(value) {\n      // if not yet connected to dom can't change the value\n      if (this._inputNode) {\n        // Only set if newValue is new, fix for Safari bug: https://github.com/ing-bank/lion/issues/1415\n        if (this._inputNode.value !== value) {\n          this._setValueAndPreserveCaret(value);\n        }\n        /** @type {string | undefined} */\n        this.__value = undefined;\n      } else {\n        this.__value = value;\n      }\n    }\n\n    /**\n     * Restores the cursor to its original position after updating the value.\n     * @param {string} newValue The value that should be saved.\n     * @protected\n     */\n    _setValueAndPreserveCaret(newValue) {\n      // Only preserve caret if focused (changing selectionStart will move focus in Safari)\n      if (this.focused) {\n        // Not all elements might have selection, and even if they have the\n        // right properties, accessing them might throw an exception (like for\n        // <input type=number>)\n        try {\n          // SelectElement doesn't have selectionStart/selectionEnd\n          if (!(this._inputNode instanceof HTMLSelectElement)) {\n            const start = this._inputNode.selectionStart;\n            this._inputNode.value = newValue;\n            // The cursor automatically jumps to the end after re-setting the value,\n            // so restore it to its original position.\n            this._inputNode.selectionStart = start;\n            this._inputNode.selectionEnd = start;\n          }\n        } catch (error) {\n          // Just set the value and give up on the caret.\n          this._inputNode.value = newValue;\n        }\n      } else {\n        this._inputNode.value = newValue;\n      }\n    }\n\n    /**\n     * @override FormatMixin\n     */\n    _reflectBackFormattedValueToUser() {\n      super._reflectBackFormattedValueToUser();\n      if (this._reflectBackOn() && this.focused) {\n        try {\n          // try/catch, because Safari is a bit sensitive here\n          this._inputNode.selectionStart = this._inputNode.value.length;\n          // eslint-disable-next-line no-empty\n        } catch (_) {}\n      }\n    }\n\n    /**\n     * @configure FocusMixin\n     */\n    get _focusableNode() {\n      return this._inputNode;\n    }\n  };\n\nexport const NativeTextFieldMixin = dedupeMixin(NativeTextFieldMixinImplementation);\n", "import { Validator } from '../validate/Validator.js';\n\nexport class FormElementsHaveNoError extends Validator {\n  static get validatorName() {\n    return 'FormElementsHaveNoError';\n  }\n\n  /**\n   * @param {unknown} [value]\n   * @param {string | undefined} [options]\n   * @param {{ node: any }} [config]\n   */\n  // eslint-disable-next-line class-methods-use-this\n  execute(value, options, config) {\n    const hasError = config?.node._anyFormElementHasFeedbackFor('error');\n    return hasError;\n  }\n\n  static async getMessage() {\n    return '';\n  }\n}\n", "import { dedupeMixin, html, SlotMixin, DisabledMixin } from '@lion/core';\nimport { FormControlMixin } from '../FormControlMixin.js';\nimport { FormControlsCollection } from '../registration/FormControlsCollection.js';\nimport { FormRegistrarMixin } from '../registration/FormRegistrarMixin.js';\nimport { ValidateMixin } from '../validate/ValidateMixin.js';\nimport { getAriaElementsInRightDomOrder } from '../utils/getAriaElementsInRightDomOrder.js';\nimport { FormElementsHaveNoError } from './FormElementsHaveNoError.js';\n\n/**\n * @typedef {import('../../types/form-group/FormGroupMixinTypes').FormGroupMixin} FormGroupMixin\n * @typedef {import('../../types/form-group/FormGroupMixinTypes').FormGroupHost} FormGroupHost\n * @typedef {import('../../types/form-group/FormGroupMixinTypes').FormControl} FormControl\n * @typedef {import('../../types/FormControlMixinTypes').FormControlHost} FormControlHost\n * @typedef {import('../../types/registration/FormRegisteringMixinTypes').FormRegisteringHost} FormRegisteringHost\n * @typedef {import('../../types/registration/FormRegistrarMixinTypes').ElementWithParentFormGroup} ElementWithParentFormGroup\n */\n\n/**\n * @desc Form group mixin serves as the basis for (sub) forms. Designed to be put on\n * elements with [role=\"group|radiogroup\"] (think of checkbox-group, radio-group, fieldset).\n * It bridges all the functionality of the child form controls:\n * ValidateMixin, InteractionStateMixin, FormatMixin, FormControlMixin etc.\n * It is designed to be used on top of FormRegistrarMixin and ChoiceGroupMixin.\n * Also, it is th basis of the LionFieldset element (which supports name based retrieval of\n * children via formElements and the automatic grouping of formElements via '[]').\n *\n * @type {FormGroupMixin}\n * @param {import('@open-wc/dedupe-mixin').Constructor<import('@lion/core').LitElement>} superclass\n */\nconst FormGroupMixinImplementation = superclass =>\n  // @ts-ignore https://github.com/microsoft/TypeScript/issues/36821#issuecomment-588375051\n  class FormGroupMixin extends FormRegistrarMixin(\n    FormControlMixin(ValidateMixin(DisabledMixin(SlotMixin(superclass)))),\n  ) {\n    /** @type {any} */\n    static get properties() {\n      return {\n        submitted: { type: Boolean, reflect: true },\n        focused: { type: Boolean, reflect: true },\n        dirty: { type: Boolean, reflect: true },\n        touched: { type: Boolean, reflect: true },\n        prefilled: { type: Boolean, reflect: true },\n      };\n    }\n\n    /**\n     * The host element with role group (or radigroup or form) containing neccessary aria attributes\n     * @protected\n     */\n    get _inputNode() {\n      return this;\n    }\n\n    /**\n     * Object keyed by formElements names, containing formElements' modelValues\n     */\n    get modelValue() {\n      return this._getFromAllFormElements('modelValue');\n    }\n\n    set modelValue(values) {\n      if (this.__isInitialModelValue) {\n        this.__isInitialModelValue = false;\n        this.registrationComplete.then(() => {\n          this._setValueMapForAllFormElements('modelValue', values);\n        });\n      } else {\n        this._setValueMapForAllFormElements('modelValue', values);\n      }\n    }\n\n    /**\n     * Object keyed by formElements names, containing formElements' serializedValues\n     */\n    get serializedValue() {\n      return this._getFromAllFormElements('serializedValue');\n    }\n\n    set serializedValue(values) {\n      if (this.__isInitialSerializedValue) {\n        this.__isInitialSerializedValue = false;\n        this.registrationComplete.then(() => {\n          this._setValueMapForAllFormElements('serializedValue', values);\n        });\n      } else {\n        this._setValueMapForAllFormElements('serializedValue', values);\n      }\n    }\n\n    /**\n     * Object keyed by formElements names, containing formElements' formattedValues\n     */\n    get formattedValue() {\n      return this._getFromAllFormElements('formattedValue');\n    }\n\n    set formattedValue(values) {\n      this._setValueMapForAllFormElements('formattedValue', values);\n    }\n\n    /**\n     * True when all of the children are prefilled (see InteractionStateMixin for more details.)\n     */\n    get prefilled() {\n      return this._everyFormElementHas('prefilled');\n    }\n\n    constructor() {\n      super();\n\n      // ._inputNode === this, which always requires a value prop\n      this.value = '';\n\n      /**\n       * Disables all formElements in group\n       */\n      this.disabled = false;\n\n      /**\n       * True when parent form is submitted\n       */\n      this.submitted = false;\n\n      /**\n       * True when any of the children is dirty (see InteractionStateMixin for more details.)\n       */\n      this.dirty = false;\n\n      /**\n       * True when the group as a whole is blurred (see InteractionStateMixin for more details.)\n       */\n      this.touched = false;\n\n      /**\n       * True when any of the children is focused.\n       */\n      this.focused = false;\n\n      /** @private */\n      this.__addedSubValidators = false;\n      /** @private */\n      this.__isInitialModelValue = true;\n      /** @private */\n      this.__isInitialSerializedValue = true;\n      /** @private */\n      this._checkForOutsideClick = this._checkForOutsideClick.bind(this);\n\n      this.addEventListener('focusin', this._syncFocused);\n      this.addEventListener('focusout', this._onFocusOut);\n      this.addEventListener('dirty-changed', this._syncDirty);\n      this.addEventListener('validate-performed', this.__onChildValidatePerformed);\n\n      this.defaultValidators = [new FormElementsHaveNoError()];\n\n      this.__descriptionElementsInParentChain = new Set();\n\n      /** @type {{modelValue?:{[key:string]: any}, serializedValue?:{[key:string]: any}}} */\n      this.__pendingValues = { modelValue: {}, serializedValue: {} };\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.setAttribute('role', 'group');\n\n      this.initComplete.then(() => {\n        this.__isInitialModelValue = false;\n        this.__isInitialSerializedValue = false;\n        this.__initInteractionStates();\n      });\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      if (this.__hasActiveOutsideClickHandling) {\n        document.removeEventListener('click', this._checkForOutsideClick);\n        this.__hasActiveOutsideClickHandling = false;\n      }\n      this.__descriptionElementsInParentChain.clear();\n    }\n\n    __initInteractionStates() {\n      this.formElements.forEach(el => {\n        if (typeof el.initInteractionState === 'function') {\n          el.initInteractionState();\n        }\n      });\n    }\n\n    /**\n     * @override from FormControlMixin\n     */\n    _triggerInitialModelValueChangedEvent() {\n      this.registrationComplete.then(() => {\n        this._dispatchInitialModelValueChangedEvent();\n      });\n    }\n\n    /**\n     * @param {import('@lion/core').PropertyValues } changedProperties\n     */\n    updated(changedProperties) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('disabled')) {\n        if (this.disabled) {\n          this.__requestChildrenToBeDisabled();\n        } else {\n          this.__retractRequestChildrenToBeDisabled();\n        }\n      }\n\n      if (changedProperties.has('focused')) {\n        if (this.focused === true) {\n          this.__setupOutsideClickHandling();\n        }\n      }\n    }\n\n    __setupOutsideClickHandling() {\n      if (!this.__hasActiveOutsideClickHandling) {\n        document.addEventListener('click', this._checkForOutsideClick);\n        this.__hasActiveOutsideClickHandling = true;\n      }\n    }\n\n    /**\n     * @param {Event} event\n     */\n    _checkForOutsideClick(event) {\n      const outsideGroupClicked = !this.contains(/** @type {Node} */ (event.target));\n      if (outsideGroupClicked) {\n        this.touched = true;\n      }\n    }\n\n    __requestChildrenToBeDisabled() {\n      this.formElements.forEach(child => {\n        if (child.makeRequestToBeDisabled) {\n          child.makeRequestToBeDisabled();\n        }\n      });\n    }\n\n    __retractRequestChildrenToBeDisabled() {\n      this.formElements.forEach(child => {\n        if (child.retractRequestToBeDisabled) {\n          child.retractRequestToBeDisabled();\n        }\n      });\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    _inputGroupTemplate() {\n      return html`\n        <div class=\"input-group\">\n          <slot></slot>\n        </div>\n      `;\n    }\n\n    /**\n     * Handles interaction state 'submitted'.\n     * This allows children to enable visibility of validation feedback\n     */\n    submitGroup() {\n      this.submitted = true;\n      this.formElements.forEach(child => {\n        if (typeof child.submitGroup === 'function') {\n          child.submitGroup();\n        } else {\n          child.submitted = true; // eslint-disable-line no-param-reassign\n        }\n      });\n    }\n\n    /**\n     * Resets to initial/prefilled values and interaction states of all FormControls in group,\n     */\n    resetGroup() {\n      this.formElements.forEach(child => {\n        if (typeof child.resetGroup === 'function') {\n          child.resetGroup();\n        } else if (typeof child.reset === 'function') {\n          child.reset();\n        }\n      });\n\n      this.resetInteractionState();\n    }\n\n    /**\n     * Clears all values and resets all interaction states of all FormControls in group,\n     */\n    clearGroup() {\n      this.formElements.forEach(child => {\n        if (typeof child.clearGroup === 'function') {\n          child.clearGroup();\n        } else if (typeof child.clear === 'function') {\n          child.clear();\n        }\n      });\n\n      this.resetInteractionState();\n    }\n\n    /**\n     * Resets all interaction states for all formElements\n     */\n    resetInteractionState() {\n      this.submitted = false;\n      this.touched = false;\n      this.dirty = false;\n      this.formElements.forEach(formElement => {\n        if (typeof formElement.resetInteractionState === 'function') {\n          formElement.resetInteractionState();\n        }\n      });\n    }\n\n    /**\n     * A filter function which will exclude a form field when returning false\n     * By default, exclude form fields which are disabled\n     *\n     * The type is be passed as well for more fine grained control, e.g.\n     * distinguish the filter when fetching modelValue versus serializedValue\n     *\n     * @param {FormControl} el\n     * @param {string} type\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    _getFromAllFormElementsFilter(el, type) {\n      return !el.disabled;\n    }\n\n    /**\n     * Gets a keyed be name object for requested property (like modelValue/serializedValue)\n     * @param {string} property\n     * @param {(el: FormControl, property?: string) => boolean} [filterFn]\n     * @returns {{[name:string]: any}}\n     */\n    _getFromAllFormElements(property, filterFn) {\n      const result = {};\n\n      // Prioritizes imperatively passed filter function over the protected method\n      const _filterFn = filterFn || this._getFromAllFormElementsFilter;\n\n      // @ts-ignore [allow-protected]: allow Form internals to access this protected method\n      this.formElements._keys().forEach(name => {\n        const elem = this.formElements[name];\n        if (elem instanceof FormControlsCollection) {\n          result[name] = elem.filter(el => _filterFn(el, property)).map(el => el[property]);\n        } else if (_filterFn(elem, property)) {\n          if (typeof elem._getFromAllFormElements === 'function') {\n            result[name] = elem._getFromAllFormElements(property);\n          } else {\n            result[name] = elem[property];\n          }\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Sets the same value for requested property in all formElements\n     * @param {string | number} property\n     * @param {any} value\n     */\n    _setValueForAllFormElements(property, value) {\n      this.formElements.forEach(el => {\n        el[property] = value; // eslint-disable-line no-param-reassign\n      });\n    }\n\n    /**\n     * Allows to set formElements values via a keyed object structure\n     * @param {string} property\n     * @param {{ [x: string]: any; }} values\n     */\n    _setValueMapForAllFormElements(property, values) {\n      if (values && typeof values === 'object') {\n        Object.keys(values).forEach(name => {\n          if (Array.isArray(this.formElements[name])) {\n            this.formElements[name].forEach(\n              (/** @type {FormControl} */ el, /** @type {number} */ index) => {\n                el[property] = values[name][index]; // eslint-disable-line no-param-reassign\n              },\n            );\n          }\n          if (this.formElements[name]) {\n            this.formElements[name][property] = values[name];\n          } else {\n            this.__pendingValues[property][name] = values[name];\n          }\n        });\n      }\n    }\n\n    /**\n     * Returns true when one of the formElements has requested\n     * @param {string} property\n     */\n    _anyFormElementHas(property) {\n      return Object.keys(this.formElements).some(name => {\n        if (Array.isArray(this.formElements[name])) {\n          return this.formElements[name].some((/** @type {FormControl} */ el) => !!el[property]);\n        }\n        return !!this.formElements[name][property];\n      });\n    }\n\n    /**\n     * @param {string} state one of ValidateHost.validationTypes\n     */\n    _anyFormElementHasFeedbackFor(state) {\n      return Object.keys(this.formElements).some(name => {\n        if (Array.isArray(this.formElements[name])) {\n          return this.formElements[name].some((/** @type {FormControl} */ el) =>\n            Boolean(el.hasFeedbackFor && el.hasFeedbackFor.includes(state)),\n          );\n        }\n        return Boolean(\n          this.formElements[name].hasFeedbackFor &&\n            this.formElements[name].hasFeedbackFor.includes(state),\n        );\n      });\n    }\n\n    /**\n     * Returns true when all of the formElements have requested property\n     * @param {string} property\n     */\n    _everyFormElementHas(property) {\n      return Object.keys(this.formElements).every(name => {\n        if (Array.isArray(this.formElements[name])) {\n          return this.formElements[name].every((/** @type {FormControl} */ el) => !!el[property]);\n        }\n        return !!this.formElements[name][property];\n      });\n    }\n\n    // TODO: the same functionality has been implemented with model-value-changed event, which\n    // covers the same and works with FormRegistrarPortalMixin\n    /**\n     * Gets triggered by event 'validate-performed' which enabled us to handle 2 different situations\n     *  - react on modelValue change, which says something about the validity as a whole\n     *  (at least two checkboxes for instance) and nothing about the children's values\n     *  - children validity states have changed, so fieldset needs to update itself based on that\n     * @param {Event} ev\n     */\n    __onChildValidatePerformed(ev) {\n      if (ev && this.isRegisteredFormElement(/** @type {FormControl} */ (ev.target))) {\n        this.validate();\n      }\n    }\n\n    _syncFocused() {\n      this.focused = this._anyFormElementHas('focused');\n    }\n\n    /**\n     * @param {Event} ev\n     */\n    _onFocusOut(ev) {\n      const lastEl = this.formElements[this.formElements.length - 1];\n      if (ev.target === lastEl) {\n        this.touched = true;\n      }\n      this.focused = false;\n    }\n\n    _syncDirty() {\n      this.dirty = this._anyFormElementHas('dirty');\n    }\n\n    /**\n     * Traverses the _parentFormGroup tree, and gathers all aria description elements\n     * (feedback and helptext) that should be provided to children.\n     *\n     * In the example below, when the input for 'street' has focus, a screenreader user\n     * would hear the #group-error.\n     * In case one of the inputs was in error state as well, the SR user would\n     * first hear the local error, followed by #group-error\n     * @example\n     * ```html\n     * <lion-fieldset name=\"address\">\n     *   <lion-input name=\"street\" label=\"Street\" .modelValue=\"${'Park Avenue'}\"></lion-input>\n     *   <lion-input name=\"number\" label=\"Number\" .modelValue=\"${100}\">...</lion-input>\n     *   <div slot=\"feedback\" id=\"group-error\">\n     *      Park Avenue only has numbers up to 80\n     *   </div>\n     * </lion-fieldset>\n     * ```\n     */\n    __storeAllDescriptionElementsInParentChain() {\n      const unTypedThis = /** @type {unknown} */ (this);\n      let parent = /** @type {FormControlHost & { _parentFormGroup:any }} */ (unTypedThis);\n      while (parent) {\n        // @ts-ignore [allow-protected]: in parent/child relations we are allowed to call protected methods\n        const descriptionElements = parent._getAriaDescriptionElements();\n        const orderedEls = getAriaElementsInRightDomOrder(descriptionElements, { reverse: true });\n        orderedEls.forEach(el => {\n          this.__descriptionElementsInParentChain.add(el);\n        });\n        // Also check if the newly added child needs to refer grandparents\n        parent = parent._parentFormGroup;\n      }\n    }\n\n    /**\n     * @param {FormControl} child\n     */\n    __linkParentMessages(child) {\n      this.__descriptionElementsInParentChain.forEach(el => {\n        if (typeof child.addToAriaDescribedBy === 'function') {\n          child.addToAriaDescribedBy(el, { reorder: false });\n        }\n      });\n    }\n\n    /**\n     * @param {FormControl} child\n     */\n    __unlinkParentMessages(child) {\n      this.__descriptionElementsInParentChain.forEach(el => {\n        if (typeof child.removeFromAriaDescribedBy === 'function') {\n          child.removeFromAriaDescribedBy(el);\n        }\n      });\n    }\n\n    /**\n     * @enhance FormRegistrarMixin: connects ValidateMixin and DisabledMixin.\n     * On top of this, error messages of children are linked to their parents\n     * @param {FormControl & {serializedValue:string|object}} child\n     * @param {number} indexToInsertAt\n     */\n    addFormElement(child, indexToInsertAt) {\n      super.addFormElement(child, indexToInsertAt);\n      if (this.disabled) {\n        child.makeRequestToBeDisabled();\n      }\n      if (!this.__descriptionElementsInParentChain.size) {\n        this.__storeAllDescriptionElementsInParentChain();\n      }\n      this.__linkParentMessages(child);\n      this.validate({ clearCurrentResult: true });\n\n      if (typeof child.addToAriaLabelledBy === 'function' && this._labelNode) {\n        child.addToAriaLabelledBy(this._labelNode, { reorder: false });\n      }\n      if (!child.modelValue) {\n        const pVals = this.__pendingValues;\n        if (pVals.modelValue && pVals.modelValue[child.name]) {\n          // eslint-disable-next-line no-param-reassign\n          child.modelValue = pVals.modelValue[child.name];\n        } else if (pVals.serializedValue && pVals.serializedValue[child.name]) {\n          // eslint-disable-next-line no-param-reassign\n          child.serializedValue = pVals.serializedValue[child.name];\n        }\n      }\n    }\n\n    /**\n     * Gathers initial model values of all children. Used when resetGroup() is called.\n     */\n    get _initialModelValue() {\n      return this._getFromAllFormElements('_initialModelValue');\n    }\n\n    /**\n     * @override FormRegistrarMixin; Connects ValidateMixin\n     * @param {FormRegisteringHost & FormControl} el\n     */\n    removeFormElement(el) {\n      super.removeFormElement(el);\n      this.validate({ clearCurrentResult: true });\n\n      if (typeof el.removeFromAriaLabelledBy === 'function' && this._labelNode) {\n        el.removeFromAriaLabelledBy(this._labelNode, { reorder: false });\n      }\n      this.__unlinkParentMessages(el);\n    }\n  };\n\nexport const FormGroupMixin = dedupeMixin(FormGroupMixinImplementation);\n", "import { LitElement } from '@lion/core';\nimport { FormGroupMixin } from '@lion/form-core';\n\n/**\n * @desc LionFieldset is basically a 'sub form' and can have its own nested sub forms.\n * It mimics the native <fieldset> element in this sense, but has all the functionality of\n * a FormControl (advanced styling, validation, interaction states etc.) Also see\n * FormGroupMixin it depends on.\n *\n * LionFieldset enables the '_isFormOrFieldset' flag in FormRegistrarMixin. This makes .formElements\n * act not only as an array, but also as an object (see FormRegistarMixin for more information).\n * As a bonus, It can also group children having names ending with '[]'.\n *\n * Above will be  helpful for both forms and sub forms, which can contain sub forms as children\n * as well and allow for a nested form structure.\n * Contrary, other form groups (choice groups like radio-group, checkbox-group and (multi)select)\n * don't: they should be considered 'end nodes' or 'leaves' of the form and their children/formElements\n * cannot be accessed individually via object keys.\n *\n * @customElement lion-fieldset\n */\nexport class LionFieldset extends FormGroupMixin(LitElement) {\n  constructor() {\n    super();\n    /**\n     * @override FormRegistrarMixin\n     * @protected\n     */\n    this._isFormOrFieldset = true;\n    /**\n     * @type {'child' | 'choice-group' | 'fieldset'}\n     * @override FormControlMixin\n     * @protected\n     */\n    this._repropagationRole = 'fieldset';\n  }\n}\n", "import { LionFieldset } from '@lion/fieldset';\n\nconst throwFormNodeError = () => {\n  throw new Error(\n    'No form node found. Did you put a <form> element inside your custom-form element?',\n  );\n};\n\n/**\n * LionForm: form wrapper providing extra features and integration with lion-field elements.\n *\n * @customElement lion-form\n */\n// eslint-disable-next-line no-unused-vars\nexport class LionForm extends LionFieldset {\n  constructor() {\n    super();\n    /** @protected */\n    this._submit = this._submit.bind(this);\n    /** @protected */\n    this._reset = this._reset.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.__registerEventsForLionForm();\n\n    // @override LionFieldset: makes sure a11y is handled by ._formNode\n    this.removeAttribute('role');\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__teardownEventsForLionForm();\n  }\n\n  get _formNode() {\n    return /** @type {HTMLFormElement} */ (this.querySelector('form'));\n  }\n\n  submit() {\n    if (this._formNode) {\n      // Firefox requires cancelable flag, otherwise we cannot preventDefault\n      // Firefox still runs default handlers for untrusted events :\\\n      this._formNode.dispatchEvent(new Event('submit', { cancelable: true }));\n    } else {\n      throwFormNodeError();\n    }\n  }\n\n  /**\n   * @param {Event} ev\n   * @protected\n   */\n  _submit(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this.submitGroup();\n    this.dispatchEvent(new Event('submit', { bubbles: true }));\n  }\n\n  reset() {\n    if (this._formNode) {\n      this._formNode.reset();\n    } else {\n      throwFormNodeError();\n    }\n  }\n\n  /**\n   * @param {Event} ev\n   * @protected\n   */\n  _reset(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this.resetGroup();\n    this.dispatchEvent(new Event('reset', { bubbles: true }));\n  }\n\n  /** @private */\n  __registerEventsForLionForm() {\n    this._formNode.addEventListener('submit', this._submit);\n    this._formNode.addEventListener('reset', this._reset);\n  }\n\n  /** @private */\n  __teardownEventsForLionForm() {\n    this._formNode.removeEventListener('submit', this._submit);\n    this._formNode.removeEventListener('reset', this._reset);\n  }\n}\n", "import { LionForm } from './src/LionForm.js';\n\ncustomElements.define('lion-form', LionForm);\n", "import { LionField, NativeTextFieldMixin } from '@lion/form-core';\n\n/**\n * LionInput: extension of lion-field with native input element in place and user friendly API.\n *\n * @customElement lion-input\n */\nexport class LionInput extends NativeTextFieldMixin(LionField) {\n  /** @type {any} */\n  static get properties() {\n    return {\n      /**\n       * A Boolean attribute which, if present, indicates that the user should not be able to edit\n       * the value of the input. The difference between disabled and readonly is that read-only\n       * controls can still function, whereas disabled controls generally do not function as\n       * controls until they are enabled.\n       *\n       * (From: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\n       */\n      readOnly: {\n        type: Boolean,\n        attribute: 'readonly',\n        reflect: true,\n      },\n      type: {\n        type: String,\n        reflect: true,\n      },\n      placeholder: {\n        type: String,\n        reflect: true,\n      },\n    };\n  }\n\n  get slots() {\n    return {\n      ...super.slots,\n      input: () => {\n        // TODO: Find a better way to do value delegation via attr\n        const native = document.createElement('input');\n        const value = this.getAttribute('value');\n        if (value) {\n          native.setAttribute('value', value);\n        }\n        return native;\n      },\n    };\n  }\n\n  /**\n   * @type {HTMLInputElement}\n   * @protected\n   */\n  get _inputNode() {\n    return /** @type {HTMLInputElement} */ (super._inputNode); // casts type\n  }\n\n  constructor() {\n    super();\n    this.readOnly = false;\n    this.type = 'text';\n    this.placeholder = '';\n  }\n\n  /**\n   * @param {PropertyKey} [name]\n   * @param {?} [oldValue]\n   */\n  requestUpdate(name, oldValue) {\n    super.requestUpdate(name, oldValue);\n    if (name === 'readOnly') {\n      this.__delegateReadOnly();\n    }\n  }\n\n  /** @param {import('@lion/core').PropertyValues } changedProperties */\n  firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.__delegateReadOnly();\n  }\n\n  /** @param {import('@lion/core').PropertyValues } changedProperties */\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has('type')) {\n      this._inputNode.type = this.type;\n    }\n\n    if (changedProperties.has('placeholder')) {\n      this._inputNode.placeholder = this.placeholder;\n    }\n\n    if (changedProperties.has('disabled')) {\n      this._inputNode.disabled = this.disabled;\n      this.validate();\n    }\n\n    if (changedProperties.has('name')) {\n      this._inputNode.name = this.name;\n    }\n\n    if (changedProperties.has('autocomplete')) {\n      this._inputNode.autocomplete = /** @type {string} */ (this.autocomplete);\n    }\n  }\n\n  /** @private */\n  __delegateReadOnly() {\n    if (this._inputNode) {\n      this._inputNode.readOnly = this.readOnly;\n    }\n  }\n}\n", "import { LionInput } from './src/LionInput.js';\n\ncustomElements.define('lion-input', LionInput);\n", "import { browserDetection, css, DisabledWithTabIndexMixin, html, LitElement } from '@lion/core';\n\nconst isKeyboardClickEvent = (/** @type {KeyboardEvent} */ e) => e.key === ' ' || e.key === 'Enter';\nconst isSpaceKeyboardClickEvent = (/** @type {KeyboardEvent} */ e) => e.key === ' ';\n\n/**\n * @typedef {import('@lion/core').TemplateResult} TemplateResult\n */\n\n/**\n * Use LionButton (or LionButtonReset|LionButtonSubmit) when there is a need to extend HTMLButtonElement.\n * It allows to create complex shadow DOM for buttons needing this. Think of:\n * - a material Design button that needs a JS controlled ripple\n * - a LionSelectRich invoker that needs a complex shadow DOM structure\n * (for styling/maintainability purposes)\n * - a specialized button (for instance a primary button or icon button in a Design System) that\n * needs a simple api: `<my-button>text</my-button>` is always better than\n * `<button class=\"my-button\"><div class=\"my-button__container\">text</div><button>`\n *\n * In other cases, whenever you can, still use native HTMLButtonElement (`<button>`).\n *\n * Note that LionButton is meant for buttons with type=\"button\". It's cleaner and more\n * lightweight than LionButtonReset and LionButtonSubmit, which should only be considered when native\n * `<form>` support is needed:\n * - When type=\"reset|submit\" should be supported, use LionButtonReset.\n * - When implicit form submission should be supported on top, use LionButtonSubmit.\n */\nexport class LionButton extends DisabledWithTabIndexMixin(LitElement) {\n  static get properties() {\n    return {\n      active: { type: Boolean, reflect: true },\n      type: { type: String, reflect: true },\n    };\n  }\n\n  render() {\n    return html` <div class=\"button-content\" id=\"${this._buttonId}\"><slot></slot></div> `;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          position: relative;\n          display: inline-flex;\n          box-sizing: border-box;\n          vertical-align: middle;\n          line-height: 24px;\n          background: #eee; /* minimal styling to make it recognizable as btn */\n          padding: 8px; /* padding to fix with min-height */\n          outline: none; /* focus style handled below */\n          cursor: default; /* we should always see the default arrow, never a caret */\n          /* TODO: remove, native button also allows selection. Could be usability concern... */\n          user-select: none;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n        }\n\n        :host::before {\n          content: '';\n\n          /* center vertically and horizontally */\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n\n          /* Minimum click area to meet [WCAG Success Criterion 2.5.5 Target Size (Enhanced)](https://www.w3.org/TR/WCAG22/#target-size-enhanced) */\n          min-height: 44px;\n          min-width: 44px;\n          width: 100%;\n          height: 100%;\n        }\n\n        .button-content {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        /* Show focus styles on keyboard focus. */\n        :host(:focus:not([disabled])),\n        :host(:focus-visible) {\n          /* if you extend, please overwrite */\n          outline: 2px solid #bde4ff;\n        }\n\n        /* Hide focus styles if they're not needed, for example,\n        when an element receives focus via the mouse. */\n        :host(:focus:not(:focus-visible)) {\n          outline: 0;\n        }\n\n        :host(:hover) {\n          /* if you extend, please overwrite */\n          background: #f4f6f7;\n        }\n\n        :host(:active), /* keep native :active to render quickly where possible */\n        :host([active]) /* use custom [active] to fix IE11 */ {\n          /* if you extend, please overwrite */\n          background: gray;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host([disabled]) {\n          pointer-events: none;\n          /* if you extend, please overwrite */\n          background: lightgray;\n          color: #adadad;\n          fill: #adadad;\n        }\n      `,\n    ];\n  }\n\n  constructor() {\n    super();\n    this.type = 'button';\n    this.active = false;\n\n    this._buttonId = `button-${Math.random().toString(36).substr(2, 10)}`;\n    if (browserDetection.isIE11) {\n      this.updateComplete.then(() => {\n        if (!this.hasAttribute('aria-labelledby')) {\n          this.setAttribute('aria-labelledby', this._buttonId);\n        }\n      });\n    }\n    this.__setupEvents();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'button');\n    }\n  }\n\n  /**\n   * @param {import('@lion/core').PropertyValues } changedProperties\n   */\n  updated(changedProperties) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has('disabled')) {\n      this.setAttribute('aria-disabled', `${this.disabled}`); // create mixin if we need it in more places\n    }\n  }\n\n  /**\n   * @private\n   */\n  __setupEvents() {\n    this.addEventListener('mousedown', this.__mousedownHandler);\n    this.addEventListener('keydown', this.__keydownHandler);\n    this.addEventListener('keyup', this.__keyupHandler);\n  }\n\n  /**\n   * @private\n   */\n  __mousedownHandler() {\n    this.active = true;\n    const mouseupHandler = () => {\n      this.active = false;\n      document.removeEventListener('mouseup', mouseupHandler);\n      this.removeEventListener('mouseup', mouseupHandler);\n    };\n    document.addEventListener('mouseup', mouseupHandler);\n    this.addEventListener('mouseup', mouseupHandler);\n  }\n\n  /**\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  __keydownHandler(event) {\n    if (this.active || !isKeyboardClickEvent(event)) {\n      if (isSpaceKeyboardClickEvent(event)) {\n        event.preventDefault();\n      }\n      return;\n    }\n\n    if (isSpaceKeyboardClickEvent(event)) {\n      event.preventDefault();\n    }\n\n    this.active = true;\n    /**\n     * @param {KeyboardEvent} keyupEvent\n     */\n    const keyupHandler = keyupEvent => {\n      if (isKeyboardClickEvent(keyupEvent)) {\n        this.active = false;\n        document.removeEventListener('keyup', keyupHandler, true);\n      }\n    };\n    document.addEventListener('keyup', keyupHandler, true);\n  }\n\n  /**\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  __keyupHandler(event) {\n    if (isKeyboardClickEvent(event)) {\n      // Fixes IE11 double submit/click. Enter keypress somehow triggers the __keyUpHandler on the native <button>\n      if (event.target && event.target !== this) {\n        return;\n      }\n      // dispatch click\n      this.click();\n    }\n  }\n}\n", "import { LionButton } from './src/LionButton.js';\n\ncustomElements.define('lion-button', LionButton);\n", "import { LitElement, html, css } from \"lit\";\r\nimport \"../../node_modules/@lion/form/lion-form.js\";\r\nimport \"../../node_modules/@lion/input/lion-input.js\";\r\nimport \"../../node_modules/@lion/button/lion-button.js\";\r\n\r\n\r\nexport class SignInModal extends LitElement {\r\n  static styles = css`\r\n    .modal {\r\n      display: none;\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: rgba(0, 0, 0, 0.5);\r\n      justify-content: center;\r\n      align-items: center;\r\n      z-index: 5;\r\n    }\r\n    .modal.open {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n    .modal-content {\r\n      background-color: white;\r\n      border-radius: 8px;\r\n      padding: 20px;\r\n      max-width: 400px;\r\n      width: 100%;\r\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n    }\r\n    .close {\r\n      position: absolute;\r\n      top: 15px;\r\n      right: 15px;\r\n      background: none;\r\n      border: none;\r\n      font-size: 1.5rem;\r\n      cursor: pointer;\r\n    }\r\n    form {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 24px;\r\n    }\r\n    .buttons {\r\n      display: flex;\r\n      gap: 16px;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n  `;\r\n\r\n  static properties = {\r\n    open: { type: Boolean, reflect: true },\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.open = false; \r\n    this.username = ''; \r\n    this.email = ''; \r\n    this.password = ''; \r\n  }\r\n\r\n  closeModal() {\r\n    this.open = false;\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <div class=\"modal ${this.open ? \"open\" : \"\"}\">\r\n        <div class=\"modal-content\">\r\n          <button class=\"close\" @click=${this.closeModal}>&times;</button>\r\n          <h2>Sign In</h2>\r\n          <lion-form>\r\n            <form>\r\n              <lion-input\r\n                name=\"username\"\r\n                label=\"Username\"\r\n                .modelValue=${this.username}\r\n                @model-value-changed=${(e) =>\r\n                  (this.username = e.target.modelValue)}\r\n              ></lion-input>\r\n              <lion-input\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                .modelValue=${this.email}\r\n                @model-value-changed=${(e) =>\r\n                  (this.email = e.target.modelValue)}\r\n              ></lion-input>\r\n              <lion-input\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                .modelValue=${this.password}\r\n                @model-value-changed=${(e) =>\r\n                  (this.password = e.target.modelValue)}\r\n              ></lion-input>\r\n              <div class=\"buttons\">\r\n                <lion-button type=\"submit\">Sign In</lion-button>\r\n                <lion-button type=\"submit\">Sign Out</lion-button>\r\n              </div>\r\n            </form>\r\n          </lion-form>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define(\"sign-in-modal\", SignInModal);\r\n", "import { LitElement, html, css } from \"lit\";\r\nimport \"./SignInModal.js\";\r\n\r\nexport class HeaderComponent extends LitElement {\r\n  static styles = css`\r\n    header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      background-color: #f0f0f0;\r\n      padding: 15px 20px;\r\n      border-bottom: 1px solid #ccc;\r\n    }\r\n    button {\r\n      background-color: #525199;\r\n      color: white;\r\n      border: none;\r\n      padding: 10px 20px;\r\n      border-radius: 4px;\r\n      cursor: pointer;\r\n    }\r\n    button:hover {\r\n      background-color: #ff6200;\r\n    }\r\n    .logo {\r\n      animation: riseDown 0.5s forwards;\r\n      font-size: 1.9rem;\r\n      color: #ff6200;\r\n      transform: scale(0);\r\n    }\r\n    @keyframes riseDown {\r\n      0% {\r\n        transform: scaleX(0);\r\n      }\r\n      100% {\r\n        transform: scaleX(1);\r\n      }\r\n    }\r\n  `;\r\n  \r\n  toggleModal() {\r\n    const modal = this.shadowRoot.querySelector(\"sign-in-modal\");\r\n    if (modal) {\r\n      modal.open = true;\r\n    }\r\n  }\r\n  render() {\r\n    return html`\r\n      <header>\r\n        <h1 class=\"logo\">ING Bank</h1>\r\n        <button @click=${this.toggleModal}>Sign In</button>\r\n      </header>\r\n      <sign-in-modal></sign-in-modal>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define(\"header-component\", HeaderComponent);\r\n", "import { LitElement, html, css } from \"lit\";\r\n\r\nexport class FooterComponent extends LitElement {\r\n  static styles = css`\r\n  footer {\r\n      text-align: center;\r\n      background-color: #a8a8a8;\r\n      position: fixed;\r\n      bottom: 0;\r\n      border-top: 1px solid #ccc;\r\n      width: 100%;\r\n      color: #d70000;\r\n    }\r\n    .titleFooter {\r\n      animation: fadeIn 1.5s;\r\n    }\r\n    @keyframes fadeIn {\r\n      0% {\r\n        opacity: 0;\r\n        \r\n      }\r\n      100% {\r\n        opacity: 1;\r\n        \r\n      }\r\n    }\r\n\r\n  `;\r\n\r\n  render() {\r\n    return html`\r\n      <footer>\r\n        <h3 class=\"titleFooter\">ING Bank</h3>\r\n        <p>2024</p>\r\n      </footer>\r\n\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define(\"footer-component\", FooterComponent);\r\n", "import { LitElement, html, css } from \"lit\";\r\n\r\nexport class MainSection extends LitElement {\r\n  static styles = css`\r\n     section {\r\n      color: #333333;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      flex-direction: column;\r\n      position: absolute; \r\n      top: 50%; \r\n      left: 50%; \r\n      transform: translate(\r\n        -50%,\r\n        -50%\r\n      ); \r\n      text-align: center; \r\n    }\r\n\r\n  `;\r\n\r\n  render() {\r\n    return html`\r\n      <section>\r\n        <h2>My Sign In Application</h2>\r\n        <p>Please use your credentials to access the app!</p>\r\n      </section>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define(\"main-section\", MainSection);\r\n\r\n", "import { LitElement, html, css } from 'lit';\nimport './components/HeaderComponent.js';\nimport './components/FooterComponent.js';\nimport './components/MainSection.js';\n\nconst logo = new URL('../assets/open-wc-logo.svg', import.meta.url).href;\n\nclass LitLionApp extends LitElement {\n  static properties = {\n    header: { type: String },\n  }\n\n  constructor() {\n    super();\n    this.header = 'Lion lit app';\n  }\n\n  render() {\n    return html`\n    <header-component></header-component>\n    <main-section></main-section>\n    <footer-component></footer-component>\n    `;\n  }\n}\n\ncustomElements.define('lit-lion-app', LitLionApp);"],
  "mappings": "AAMA,IAGMA,GAASC,WAKFC,GACXF,GAAOG,aACNH,GAAOI,WADDD,QAC2BH,GAAOI,SAASC,eAClD,uBAAwBC,SAASC,WACjC,YAAaC,cAAcD,UAkBvBE,GAAoBC,OAAAA,EAEpBC,GAAc,IAAIC,QASXC,GATWD,KASXC,CAOX,YACEC,EACAC,EACAC,EAAAA,CAEA,GAVFC,KAAe,aAAA,GAUTD,IAAcP,GAChB,MAAUS,MACR,mEAAA,EAGJD,KAAKH,QAAUA,EACfG,KAAKE,EAAWJ,CACjB,CAID,IAAA,YAAIK,CAGF,IAAIA,EAAaH,KAAKI,EAChBN,EAAUE,KAAKE,EACrB,GAAIjB,IAA+BkB,IAA/BlB,OAAyD,CAC3D,IAAMoB,EAAYP,IAAZO,QAAqCP,EAAQQ,SAAW,EAC1DD,IACFF,EAAaT,GAAYa,IAAIT,CAAAA,GAE3BK,IAF2BL,UAG5BE,KAAKI,EAAcD,EAAa,IAAIZ,eAAiBiB,YACpDR,KAAKH,OAAAA,EAEHQ,GACFX,GAAYe,IAAIX,EAASK,CAAAA,EAG9B,CACD,OAAOA,CACR,CAED,UAAAO,CACE,OAAOV,KAAKH,OACb,CAAA,EAiCUc,GAAaC,GACxB,IAAKhB,GACc,OAAVgB,GAAU,SAAWA,EAAeA,EAAPC,GAAAA,OAEpCrB,EAAAA,EAWSsB,GAAM,CACjBhB,KACGiB,IAAAA,CAEH,IAAMlB,EACJC,EAAQQ,SAAW,EACfR,EAAQ,CAAA,EACRiB,EAAOC,OACL,CAACC,EAAKC,EAAGC,IAAQF,GA7CAL,GAAAA,CAEzB,GAAKA,EAAkC,eAAvC,GACE,OAAQA,EAAoBf,QACvB,GAAqB,OAAVe,GAAU,SAC1B,OAAOA,EAEP,MAAUX,MACR,mEACKW,EADL,sFAAA,CAIH,GAiCgDM,CAAAA,EAAKpB,EAAQqB,EAAM,CAAA,EAC5DrB,EAAQ,CAAA,CAAA,EAEhB,OAAO,IAAKF,GACVC,EACAC,EACAN,EAAAA,CACD,EAYU4B,GAAc,CACzBC,EACAC,IAAAA,CAEA,GAAIrC,GACDoC,EAA0BE,mBAAqBD,EAAOE,IAAKC,GAC1DA,aAAalC,cAAgBkC,EAAIA,EAAEtB,UAAAA,MAGrC,SAAWsB,KAAKH,EAAQ,CACtB,IAAMI,EAAQC,SAASC,cAAc,OAAA,EAE/BC,EAAS9C,GAAyB,SACpC8C,IADoC,QAEtCH,EAAMI,aAAa,QAASD,CAAAA,EAE9BH,EAAMK,YAAeN,EAAgB5B,QACrCwB,EAAWW,YAAYN,CAAAA,CACxB,CACF,EAWUO,GACXhD,GAEKwC,GAAyBA,EACzBA,GACCA,aAAalC,eAbY2C,GAAAA,CAC/B,IAAIrC,EAAU,GACd,QAAWsC,KAAQD,EAAME,SACvBvC,GAAWsC,EAAKtC,QAElB,OAAOc,GAAUd,CAAAA,CAAQ,GAQkC4B,CAAAA,EAAKA,EChKlE,GAAA,CAAMY,GACJA,GAAEC,eACFA,GAAcC,yBACdA,GAAwBC,oBACxBA,GAAmBC,sBACnBA,GAAqBC,eACrBA,EAAAA,EACEC,OAKEC,GAASC,WAUTC,GAAgBF,GACnBE,aAMGC,GAAiCD,GAClCA,GAAaE,YACd,GAEEC,GAEFL,GAAOM,+BA4FLC,GAA4B,CAChCC,EACAC,IACMD,EAuJKE,GAA8C,CACzD,YAAYC,EAAgBC,EAAAA,CAC1B,OAAQA,EAAAA,CACN,KAAKC,QACHF,EAAQA,EAAQR,GAAiC,KACjD,MACF,KAAKJ,OACL,KAAKe,MAGHH,EAAQA,GAAS,KAAOA,EAAQI,KAAKC,UAAUL,CAAAA,CAAAA,CAGnD,OAAOA,CACR,EAED,cAAcA,EAAsBC,EAAAA,CAClC,IAAIK,EAAqBN,EACzB,OAAQC,EAAAA,CACN,KAAKC,QACHI,EAAYN,IAAU,KACtB,MACF,KAAKO,OACHD,EAAYN,IAAU,KAAO,KAAOO,OAAOP,CAAAA,EAC3C,MACF,KAAKZ,OACL,KAAKe,MAIH,GAAA,CAEEG,EAAYF,KAAKI,MAAMR,CAAAA,CACxB,MAAQS,CACPH,EAAY,IACb,CAAA,CAGL,OAAOA,CACR,CAAA,EAWUI,GAAuB,CAACV,EAAgBW,IAAAA,CAClD7B,GAAGkB,EAAOW,CAAAA,EAEPC,GAAkD,CACtDC,UAAAA,GACAZ,KAAMa,OACNC,UAAWhB,GACXiB,QAAAA,GACAC,WAAYP,EAAAA,EAsBbQ,OAA8BC,WAAaD,OAAO,UAAA,EAcnD7B,GAAO+B,sBAAwB,IAAIC,QAAAA,IAWbC,GAXaD,cAoBzBE,WAAAA,CAqFR,OAAA,eAAsBC,EAAAA,CACpBC,KAAKC,KAAAA,GACJD,KAAKE,IAAkB,CAAA,GAAIC,KAAKJ,CAAAA,CAClC,CAuGD,WAAA,oBAAWK,CAOT,OALAJ,KAAKK,SAAAA,EAMHL,KAAKM,MAA4B,CAAA,GAAIN,KAAKM,KAAyBC,KAAAA,CAAAA,CAEtE,CA6BD,OAAA,eACEC,EACAC,EAA+BtB,GAAAA,CAQ/B,GALIsB,EAAQC,QACTD,EAAsDrB,UAAAA,IAEzDY,KAAKC,KAAAA,EACLD,KAAKW,kBAAkBC,IAAIJ,EAAMC,CAAAA,EAAAA,CAC5BA,EAAQI,WAAY,CACvB,IAAMC,EAIFrB,OAAAA,EACEsB,EAAaf,KAAKgB,sBAAsBR,EAAMM,EAAKL,CAAAA,EACrDM,IADqDN,QAEvDnD,GAAe0C,KAAKiB,UAAWT,EAAMO,CAAAA,CAExC,CACF,CA6BS,OAAA,sBACRP,EACAM,EACAL,EAAAA,CAEA,GAAA,CAAMS,IAACA,EAAGN,IAAEA,CAAAA,EAAOrD,GAAyByC,KAAKiB,UAAWT,CAAAA,GAAS,CACnE,KAAAU,CACE,OAAOlB,KAAKc,CAAAA,CACb,EACD,IAA2BK,EAAAA,CACxBnB,KAAqDc,CAAAA,EAAOK,CAC9D,CAAA,EAmBH,MAAO,CACL,KAAAD,CACE,OAAOA,GAAKE,KAAKpB,IAAAA,CAClB,EACD,IAA2BzB,EAAAA,CACzB,IAAM8C,EAAWH,GAAKE,KAAKpB,IAAAA,EAC3BY,EAAKQ,KAAKpB,KAAMzB,CAAAA,EAChByB,KAAKsB,cAAcd,EAAMa,EAAUZ,CAAAA,CACpC,EACDc,aAAAA,GACAC,WAAAA,EAAY,CAEf,CAgBD,OAAA,mBAA0BhB,EAAAA,CACxB,OAAOR,KAAKW,kBAAkBO,IAAIV,CAAAA,GAASrB,EAC5C,CAgBO,OAAA,MAAOc,CACb,GACED,KAAKyB,eAAetD,GAA0B,mBAAA,CAAA,EAG9C,OAGF,IAAMuD,EAAYhE,GAAesC,IAAAA,EACjC0B,EAAUrB,SAAAA,EAKNqB,EAAUxB,IALJG,SAMRL,KAAKE,EAAgB,CAAA,GAAIwB,EAAUxB,CAAAA,GAGrCF,KAAKW,kBAAoB,IAAIgB,IAAID,EAAUf,iBAAAA,CAC5C,CAaS,OAAA,UAAON,CACf,GAAIL,KAAKyB,eAAetD,GAA0B,WAAA,CAAA,EAChD,OAMF,GAJA6B,KAAK4B,UAAAA,GACL5B,KAAKC,KAAAA,EAGDD,KAAKyB,eAAetD,GAA0B,YAAA,CAAA,EAAsB,CACtE,IAAM0D,EAAQ7B,KAAK8B,WACbC,EAAW,CAAA,GACZvE,GAAoBqE,CAAAA,EAAAA,GACpBpE,GAAsBoE,CAAAA,CAAAA,EAE3B,QAAWG,KAAKD,EACd/B,KAAKiC,eAAeD,EAAGH,EAAMG,CAAAA,CAAAA,CAEhC,CAGD,IAAMtC,EAAWM,KAAKP,OAAOC,QAAAA,EAC7B,GAAIA,IAAa,KAAM,CACrB,IAAMoC,EAAanC,oBAAoBuB,IAAIxB,CAAAA,EAC3C,GAAIoC,IAAJ,OACE,OAAK,CAAOE,EAAGvB,CAAAA,IAAYqB,EACzB9B,KAAKW,kBAAkBC,IAAIoB,EAAGvB,CAAAA,CAGnC,CAGDT,KAAKM,KAA2B,IAAIqB,IACpC,OAAK,CAAOK,EAAGvB,CAAAA,IAAYT,KAAKW,kBAAmB,CACjD,IAAMuB,EAAOlC,KAAKmC,KAA2BH,EAAGvB,CAAAA,EAC5CyB,IAD4CzB,QAE9CT,KAAKM,KAAyBM,IAAIsB,EAAMF,CAAAA,CAE3C,CAEDhC,KAAKoC,cAAgBpC,KAAKqC,eAAerC,KAAKsC,MAAAA,CAkB/C,CA4BS,OAAA,eACRA,EAAAA,CAEA,IAAMF,EAAgB,CAAA,EACtB,GAAI1D,MAAM6D,QAAQD,CAAAA,EAAS,CAIzB,IAAM1B,EAAM,IAAI4B,IAAKF,EAA0BG,KAAKC,GAAAA,EAAUC,QAAAA,CAAAA,EAE9D,QAAWC,KAAKhC,EACdwB,EAAcS,QAAQC,GAAmBF,CAAAA,CAAAA,CAE5C,MAAUN,IAAV,QACCF,EAAcjC,KAAK2C,GAAmBR,CAAAA,CAAAA,EAExC,OAAOF,CACR,CAaO,OAAA,KACN5B,EACAC,EAAAA,CAEA,IAAMrB,EAAYqB,EAAQrB,UAC1B,OAAOA,IAAP,GAAOA,OAEkB,OAAdA,GAAc,SACrBA,EACgB,OAAToB,GAAS,SAChBA,EAAKuC,YAAAA,EAAAA,MAEV,CA2CD,aAAAC,CACEC,MAAAA,EApWMjD,KAAoBkD,KAAAA,OAmU5BlD,KAAemD,gBAAAA,GAOfnD,KAAUoD,WAAAA,GAkBFpD,KAAoBqD,KAAuB,KASjDrD,KAAKsD,KAAAA,CACN,CAMO,MAAAA,CACNtD,KAAKuD,KAAkB,IAAIC,QACxBC,GAASzD,KAAK0D,eAAiBD,CAAAA,EAElCzD,KAAK2D,KAAsB,IAAIhC,IAG/B3B,KAAK4D,KAAAA,EAGL5D,KAAKsB,cAAAA,EACJtB,KAAKgD,YAAuC9C,GAAe2D,QAASC,GACnEA,EAAE9D,IAAAA,CAAAA,CAEL,CAWD,cAAc+D,EAAAA,EACX/D,KAAKgE,OAAkB,IAAIxB,KAAOyB,IAAIF,CAAAA,EAKnC/D,KAAKkE,aAL8BH,QAKF/D,KAAKmE,aACxCJ,EAAWK,gBAAAA,CAEd,CAMD,iBAAiBL,EAAAA,CACf/D,KAAKgE,MAAeK,OAAON,CAAAA,CAC5B,CAcO,MAAAH,CACN,IAAMU,EAAqB,IAAI3C,IACzBhB,EAAqBX,KAAKgD,YAC7BrC,kBACH,QAAWqB,KAAKrB,EAAkBJ,KAAAA,EAC5BP,KAAKyB,eAAeO,CAAAA,IACtBsC,EAAmB1D,IAAIoB,EAAGhC,KAAKgC,CAAAA,CAAAA,EAAAA,OACxBhC,KAAKgC,CAAAA,GAGZsC,EAAmBC,KAAO,IAC5BvE,KAAKkD,KAAuBoB,EAE/B,CAWS,kBAAAE,CACR,IAAMN,EACJlE,KAAKyE,YACLzE,KAAK0E,aACF1E,KAAKgD,YAAuC2B,iBAAAA,EAMjD,OAJAC,GACEV,EACClE,KAAKgD,YAAuCZ,aAAAA,EAExC8B,CACR,CAOD,mBAAAW,CAEG7E,KAA4CkE,aAC3ClE,KAAKwE,iBAAAA,EACPxE,KAAK0D,eAAAA,EAAe,EACpB1D,KAAKgE,MAAeH,QAASiB,GAAMA,EAAEV,gBAAAA,CAAAA,CACtC,CAQS,eAAeW,EAAAA,CAA6B,CAQtD,sBAAAC,CACEhF,KAAKgE,MAAeH,QAASiB,GAAMA,EAAEG,mBAAAA,CAAAA,CACtC,CAcD,yBACEzE,EACA0E,EACA3G,EAAAA,CAEAyB,KAAKmF,KAAsB3E,EAAMjC,CAAAA,CAClC,CAEO,KAAsBiC,EAAmBjC,EAAAA,CAC/C,IAGMkC,EAFJT,KAAKgD,YACLrC,kBAC6BO,IAAIV,CAAAA,EAC7B0B,EACJlC,KAAKgD,YACLb,KAA2B3B,EAAMC,CAAAA,EACnC,GAAIyB,IAAJ,QAA0BzB,EAAQlB,UAA9B2C,GAAgD,CAClD,IAKMkD,GAJH3E,EAAQnB,WAAyC+F,cAI9CD,OAFC3E,EAAQnB,UACThB,IACsB+G,YAAa9G,EAAOkC,EAAQjC,IAAAA,EAwBxDwB,KAAKqD,KAAuB7C,EACxB4E,GAAa,KACfpF,KAAKsF,gBAAgBpD,CAAAA,EAErBlC,KAAKuF,aAAarD,EAAMkD,CAAAA,EAG1BpF,KAAKqD,KAAuB,IAC7B,CACF,CAGD,KAAsB7C,EAAcjC,EAAAA,CAClC,IAAMiH,EAAOxF,KAAKgD,YAGZyC,EAAYD,EAAKlF,KAA0CY,IAAIV,CAAAA,EAGrE,GAAIiF,IAAJ,QAA8BzF,KAAKqD,OAAyBoC,EAAU,CACpE,IAAMhF,EAAU+E,EAAKE,mBAAmBD,CAAAA,EAClCnG,EACyB,OAAtBmB,EAAQnB,WAAc,WACzB,CAACqG,cAAelF,EAAQnB,SAAAA,EACxBmB,EAAQnB,WAAWqG,gBADKrG,OAExBmB,EAAQnB,UACRhB,GAEN0B,KAAKqD,KAAuBoC,EAC5BzF,KAAKyF,CAAAA,EAA0BnG,EAAUqG,cACvCpH,EACAkC,EAAQjC,IAAAA,EAIVwB,KAAKqD,KAAuB,IAC7B,CACF,CAgBD,cACE7C,EACAa,EACAZ,EAAAA,CAGA,GAAID,IAAJ,OAAwB,CAYtB,GALAC,IACET,KAAKgD,YACL0C,mBAAmBlF,CAAAA,EAAAA,EACFC,EAAQjB,YAAcP,IACxBe,KAAKQ,CAAAA,EACGa,CAAAA,EAIvB,OAHArB,KAAK4F,EAAiBpF,EAAMa,EAAUZ,CAAAA,CAKzC,CACGT,KAAKmD,kBADR,KAECnD,KAAKuD,KAAkBvD,KAAK6F,KAAAA,EAE/B,CAKD,EACErF,EACAa,EACAZ,EAAAA,CAIKT,KAAK2D,KAAoBmC,IAAItF,CAAAA,GAChCR,KAAK2D,KAAoB/C,IAAIJ,EAAMa,CAAAA,EAMjCZ,EAAQlB,UANyB8B,IAMLrB,KAAKqD,OAAyB7C,IAC3DR,KAAK+F,OAA2B,IAAIvD,KAAoByB,IAAIzD,CAAAA,CAEhE,CAKO,MAAA,MAAMqF,CACZ7F,KAAKmD,gBAAAA,GACL,GAAA,CAAA,MAGQnD,KAAKuD,IACZ,OAAQvE,EAAAA,CAKPwE,QAAQwC,OAAOhH,CAAAA,CAChB,CACD,IAAMiH,EAASjG,KAAKkG,eAAAA,EAOpB,OAHID,GAAU,MAAVA,MACIA,EAAAA,CAEAjG,KAAKmD,eACd,CAmBS,gBAAA+C,CAiBR,OAhBelG,KAAKmG,cAAAA,CAiBrB,CAYS,eAAAA,CAIR,GAAA,CAAKnG,KAAKmD,gBACR,OAGF,GAAA,CAAKnD,KAAKoD,WAAY,CA2BpB,GAxBCpD,KAA4CkE,aAC3ClE,KAAKwE,iBAAAA,EAuBHxE,KAAKkD,KAAsB,CAG7B,OAAK,CAAOlB,EAAGzD,CAAAA,IAAUyB,KAAKkD,KAC5BlD,KAAKgC,CAAAA,EAAmBzD,EAE1ByB,KAAKkD,KAAAA,MACN,CAWD,IAAMvC,EAAqBX,KAAKgD,YAC7BrC,kBACH,GAAIA,EAAkB4D,KAAO,EAC3B,OAAK,CAAOvC,EAAGvB,CAAAA,IAAYE,EAEvBF,EAAQ2F,UAFezF,IAGtBX,KAAK2D,KAAoBmC,IAAI9D,CAAAA,GAC9BhC,KAAKgC,CAAAA,IADyBA,QAG9BhC,KAAK4F,EAAiB5D,EAAGhC,KAAKgC,CAAAA,EAAkBvB,CAAAA,CAIvD,CACD,IAAI4F,EAAAA,GACEC,EAAoBtG,KAAK2D,KAC/B,GAAA,CACE0C,EAAerG,KAAKqG,aAAaC,CAAAA,EAC7BD,GACFrG,KAAKuG,WAAWD,CAAAA,EAChBtG,KAAKgE,MAAeH,QAASiB,GAAMA,EAAE0B,aAAAA,CAAAA,EACrCxG,KAAKyG,OAAOH,CAAAA,GAEZtG,KAAK0G,KAAAA,CAER,OAAQ1H,EAAAA,CAMP,MAHAqH,EAAAA,GAEArG,KAAK0G,KAAAA,EACC1H,CACP,CAEGqH,GACFrG,KAAK2G,KAAYL,CAAAA,CAEpB,CAuBS,WAAWM,EAAAA,CAA4C,CAIjE,KAAYN,EAAAA,CACVtG,KAAKgE,MAAeH,QAASiB,GAAMA,EAAE+B,cAAAA,CAAAA,EAChC7G,KAAKoD,aACRpD,KAAKoD,WAAAA,GACLpD,KAAK8G,aAAaR,CAAAA,GAEpBtG,KAAK+G,QAAQT,CAAAA,CAiBd,CAEO,MAAAI,CACN1G,KAAK2D,KAAsB,IAAIhC,IAC/B3B,KAAKmD,gBAAAA,EACN,CAkBD,IAAA,gBAAI6D,CACF,OAAOhH,KAAKiH,kBAAAA,CACb,CAyBS,mBAAAA,CACR,OAAOjH,KAAKuD,IACb,CAUS,aAAaqD,EAAAA,CACrB,MAAA,EACD,CAWS,OAAOA,EAAAA,CAIf5G,KAAK+F,OAA2B/F,KAAK+F,KAAuBlC,QAAS7B,GACnEhC,KAAKkH,KAAsBlF,EAAGhC,KAAKgC,CAAAA,CAAAA,CAAAA,EAErChC,KAAK0G,KAAAA,CACN,CAYS,QAAQE,EAAAA,CAAsC,CAkB9C,aAAaA,EAAAA,CAAsC,CAAA,EAhgCtD/G,GAAauC,cAA6B,CAAA,EA6S1CvC,GAAA8E,kBAAoC,CAACwC,KAAM,MAAA,EAwtBnDtH,GACC1B,GAA0B,mBAAA,CAAA,EACxB,IAAIwD,IACP9B,GACC1B,GAA0B,WAAA,CAAA,EACxB,IAAIwD,IAGR1D,KAAkB,CAAC4B,gBAAAA,EAAAA,CAAAA,GAuClBjC,GAAOwJ,0BAA4B,CAAA,GAAIjH,KAAK,OAAA,ECvnD7C,IAAMkH,GAASC,WAmOTC,GAAgBF,GAAyCE,aAUzDC,GAASD,GACXA,GAAaE,aAAa,WAAY,CACpCC,WAAaC,GAAMA,CAAAA,CAAAA,EAAAA,OA8EnBC,GAAuB,QAMvBC,GAAS,OAAOC,KAAKC,OAAAA,EAASC,QAAQ,CAAA,EAAGC,MAAM,CAAA,CAAA,IAG/CC,GAAc,IAAML,GAIpBM,GAAa,IAAID,EAAAA,IAEjBE,GAOAC,SAGAC,GAAe,IAAMF,GAAEG,cAAc,EAAA,EAIrCC,GAAeC,GACnBA,IAAU,MAAyB,OAATA,GAAS,UAA4B,OAATA,GAAS,WAC3DC,GAAUC,MAAMD,QAChBE,GAAcH,GAClBC,GAAQD,CAAAA,GAEqC,OAArCA,IAAgBI,OAAOC,QAAAA,GAAc,WAEzCC,GAAa;OAkBbC,GAAe,sDAKfC,GAAkB,OAIlBC,GAAmB,KAwBnBC,GAAkBC,OACtB,KAAKL,EAAAA,qBAAgCA,EAAAA,KAAeA,EAAAA;0BACpD,GAAA,EAOIM,GAA0B,KAC1BC,GAA0B,KAO1BC,GAAiB,qCAyGjBC,GACmBC,GACvB,CAACC,KAAkCC,KAwB1B,CAELC,WAAgBH,EAChBC,QAAAA,EACAC,OAAAA,CAAAA,GAiBOE,GAAOL,GArJA,CAAA,EA+KPM,GAAMN,GA9KA,CAAA,EAwMNO,GAASP,GAvMA,CAAA,EA6MTQ,GAAWnB,OAAOoB,IAAI,cAAA,EAqBtBC,EAAUrB,OAAOoB,IAAI,aAAA,EAS5BE,GAAgB,IAAIC,QAqCpBC,GAASjC,GAAEkC,iBACflC,GACA,GAAA,EAqBF,SAASmC,GACPC,EACAC,EAAAA,CAOA,GAAA,CAAK/B,GAAQ8B,CAAAA,GAAAA,CAASA,EAAIE,eAAe,KAAA,EAiBvC,MAAUC,MAhBI,gCAAA,EAkBhB,OAAOnD,KAAP,OACIA,GAAOE,WAAW+C,CAAAA,EACjBA,CACP,CAcA,IAAMG,GAAkB,CACtBlB,EACAD,IAAAA,CAQA,IAAMoB,EAAInB,EAAQoB,OAAS,EAIrBC,EAA2B,CAAA,EAO7BC,EANAnB,EACFJ,IArWe,EAqWO,QAAUA,IApWd,EAoWuC,SAAW,GASlEwB,EAAQjC,GAEZ,QAASkC,EAAI,EAAGA,EAAIL,EAAGK,IAAK,CAC1B,IAAMvD,EAAI+B,EAAQwB,CAAAA,EAOdC,EAEAC,EAHAC,EAAAA,GAEAC,EAAY,EAKhB,KAAOA,EAAY3D,EAAEmD,SAEnBG,EAAMK,UAAYA,EAClBF,EAAQH,EAAMM,KAAK5D,CAAAA,EACfyD,IAAU,OAGdE,EAAYL,EAAMK,UACdL,IAAUjC,GACRoC,EA5bU,CAAA,IA4be,MAC3BH,EAAQhC,GACCmC,EA9bG,CAAA,IA6bJnC,OAGRgC,EAAQ/B,GACCkC,EAhcF,CAAA,IA+bClC,QAEJK,GAAeiC,KAAKJ,EAjcjB,CAAA,CAAA,IAocLJ,EAAsB5B,OAAO,KAAKgC,EApc7B,CAAA,EAocgD,GAAA,GAEvDH,EAAQ9B,IACCiC,EAtcM,CAAA,IAqcPjC,SAQR8B,EAAQ9B,IAED8B,IAAU9B,GACfiC,EA9aS,CAAA,IA8ae,KAG1BH,EAAQD,GAAmBhC,GAG3BqC,EAAAA,IACSD,EApbI,CAAA,IAmbO,OAGpBC,EAAAA,IAEAA,EAAmBJ,EAAMK,UAAYF,EAvbrB,CAAA,EAub8CN,OAC9DK,EAAWC,EAzbE,CAAA,EA0bbH,EACEG,EAzbO,CAAA,IAwbTH,OAEM9B,GACAiC,EA3bG,CAAA,IA2bmB,IACpB9B,GACAD,IAGV4B,IAAU3B,IACV2B,IAAU5B,GAEV4B,EAAQ9B,GACC8B,IAAUhC,IAAmBgC,IAAU/B,GAChD+B,EAAQjC,IAIRiC,EAAQ9B,GACR6B,EAAAA,QA8BJ,IAAMS,EACJR,IAAU9B,IAAeO,EAAQwB,EAAI,CAAA,EAAGQ,WAAW,IAAA,EAAQ,IAAM,GACnE7B,GACEoB,IAAUjC,GACNrB,EAAIQ,GACJkD,GAAoB,GACjBN,EAAUY,KAAKR,CAAAA,EAChBxD,EAAEM,MAAM,EAAGoD,CAAAA,EACTzD,GACAD,EAAEM,MAAMoD,CAAAA,EACVxD,GACA4D,GACA9D,EAAIE,IAAUwD,IAAVxD,GAAoCqD,EAAIO,EACrD,CAQD,MAAO,CAAClB,GAAwBb,EAL9BG,GACCH,EAAQmB,CAAAA,GAAM,QACdpB,IA5ec,EA4eQ,SAAWA,IA3ehB,EA2eyC,UAAY,GAAA,EAGnBsB,CAAAA,CAAU,EAK5Da,GAAN,MAAMA,CAAAA,CAMJ,YAAAC,CAEEnC,QAACA,EAASE,WAAgBH,CAAAA,EAC1BqC,EAAAA,CAEA,IAAIC,EAPNC,KAAKC,MAAwB,CAAA,EAQ3B,IAAIC,EAAY,EACZC,EAAgB,EACdC,EAAY1C,EAAQoB,OAAS,EAC7BmB,EAAQD,KAAKC,MAAAA,CAGZpC,EAAMkB,CAAAA,EAAaH,GAAgBlB,EAASD,CAAAA,EAKnD,GAJAuC,KAAKK,GAAKT,EAASU,cAAczC,EAAMiC,CAAAA,EACvCzB,GAAOkC,YAAcP,KAAKK,GAAGG,QAGzB/C,IA3gBW,GA2gBYA,IA1gBT,EA0gBiC,CACjD,IAAMgD,EAAUT,KAAKK,GAAGG,QAAQE,WAChCD,EAAQE,YAAAA,GAAeF,EAAQG,UAAAA,CAChC,CAGD,MAAQb,EAAO1B,GAAOwC,SAAAA,KAAgB,MAAQZ,EAAMnB,OAASsB,GAAW,CACtE,GAAIL,EAAKe,WAAa,EAAG,CAuBvB,GAAKf,EAAiBgB,cAAAA,EACpB,QAAWC,KAASjB,EAAiBkB,kBAAAA,EACnC,GAAID,EAAKE,SAAStF,EAAAA,EAAuB,CACvC,IAAMuF,EAAWpC,EAAUoB,GAAAA,EAErBiB,EADSrB,EAAiBsB,aAAaL,CAAAA,EACvBM,MAAMzF,EAAAA,EACtB0F,EAAI,eAAehC,KAAK4B,CAAAA,EAC9BlB,EAAMN,KAAK,CACTlC,KA1iBO,EA2iBP+D,MAAOtB,EACPc,KAAMO,EAAE,CAAA,EACR7D,QAAS0D,EACTK,KACEF,EAAE,CAAA,IAAO,IACLG,GACAH,EAAE,CAAA,IAAO,IACPI,GACAJ,EAAE,CAAA,IAAO,IACPK,GACAC,EAAAA,CAAAA,EAEX9B,EAAiB+B,gBAAgBd,CAAAA,CACnC,MAAUA,EAAKtB,WAAW7D,EAAAA,IACzBoE,EAAMN,KAAK,CACTlC,KArjBK,EAsjBL+D,MAAOtB,CAAAA,CAAAA,EAERH,EAAiB+B,gBAAgBd,CAAAA,GAMxC,GAAIzD,GAAeiC,KAAMO,EAAiBgC,OAAAA,EAAU,CAIlD,IAAMrE,EAAWqC,EAAiBiC,YAAaV,MAAMzF,EAAAA,EAC/CyD,EAAY5B,EAAQoB,OAAS,EACnC,GAAIQ,EAAY,EAAG,CAChBS,EAAiBiC,YAAczG,GAC3BA,GAAa0G,YACd,GAMJ,QAAS/C,EAAI,EAAGA,EAAII,EAAWJ,IAC5Ba,EAAiBmC,OAAOxE,EAAQwB,CAAAA,EAAI5C,GAAAA,CAAAA,EAErC+B,GAAOwC,SAAAA,EACPZ,EAAMN,KAAK,CAAClC,KArlBP,EAqlByB+D,MAAAA,EAAStB,CAAAA,CAAAA,EAKxCH,EAAiBmC,OAAOxE,EAAQ4B,CAAAA,EAAYhD,GAAAA,CAAAA,CAC9C,CACF,CACF,SAAUyD,EAAKe,WAAa,EAE3B,GADcf,EAAiBoC,OAClBjG,GACX+D,EAAMN,KAAK,CAAClC,KAhmBH,EAgmBqB+D,MAAOtB,CAAAA,CAAAA,MAChC,CACL,IAAIhB,EAAAA,GACJ,MAAQA,EAAKa,EAAiBoC,KAAKC,QAAQvG,GAAQqD,EAAI,CAAA,KAAvD,IAGEe,EAAMN,KAAK,CAAClC,KAjmBH,EAimBuB+D,MAAOtB,CAAAA,CAAAA,EAEvChB,GAAKrD,GAAOiD,OAAS,CAExB,CAEHoB,GACD,CAkCF,CAID,OAAA,cAAqBrC,EAAmBwE,EAAAA,CACtC,IAAMhC,EAAKjE,GAAEkE,cAAc,UAAA,EAE3B,OADAD,EAAGiC,UAAYzE,EACRwC,CACR,CAAA,EAgBH,SAASkC,GACPC,EACA/F,EACAgG,EAA0BD,EAC1BE,EAAAA,CAIA,GAAIjG,IAAUuB,GACZ,OAAOvB,EAET,IAAIkG,EACFD,IADEC,OAEGF,EAAyBG,OAAeF,CAAAA,EACxCD,EAA+CI,KAChDC,EAA2BtG,GAAYC,CAAAA,EAAAA,OAGxCA,EAA2C,gBAyBhD,OAxBIkG,GAAkB9C,cAAgBiD,IAEpCH,GAAuD,OAAA,EAAI,EACvDG,IADuD,OAEzDH,EAAAA,QAEAA,EAAmB,IAAIG,EAAyBN,CAAAA,EAChDG,EAAiBI,KAAaP,EAAMC,EAAQC,CAAAA,GAE1CA,IAF0CA,QAG1CD,EAAyBG,OAAiB,CAAA,GAAIF,CAAAA,EAC9CC,EAEDF,EAAiCI,KAAcF,GAGhDA,IAHgDA,SAIlDlG,EAAQ8F,GACNC,EACAG,EAAiBK,KAAUR,EAAO/F,EAA0BkB,MAAAA,EAC5DgF,EACAD,CAAAA,GAGGjG,CACT,CAOA,IAAMwG,GAAN,KAAMA,CASJ,YAAYC,EAAoBT,EAAAA,CAPhCzC,KAAOmD,KAA4B,CAAA,EAKnCnD,KAAwBoD,KAAAA,OAGtBpD,KAAKqD,KAAaH,EAClBlD,KAAKsD,KAAWb,CACjB,CAGD,IAAA,YAAIc,CACF,OAAOvD,KAAKsD,KAASC,UACtB,CAGD,IAAA,MAAIC,CACF,OAAOxD,KAAKsD,KAASE,IACtB,CAID,EAAO1D,EAAAA,CACL,GAAA,CACEO,GAAAA,CAAIG,QAACA,CAAAA,EACLP,MAAOA,CAAAA,EACLD,KAAKqD,KACHI,GAAY3D,GAAS4D,eAAiBtH,IAAGuH,WAAWnD,EAAAA,EAAS,EACnEnC,GAAOkC,YAAckD,EAErB,IAAI1D,EAAO1B,GAAOwC,SAAAA,EACdX,EAAY,EACZ0D,EAAY,EACZC,EAAe5D,EAAM,CAAA,EAEzB,KAAO4D,IAAP,QAAmC,CACjC,GAAI3D,IAAc2D,EAAarC,MAAO,CACpC,IAAIgB,EACAqB,EAAapG,OApwBN,EAqwBT+E,EAAO,IAAIsB,GACT/D,EACAA,EAAKgE,YACL/D,KACAF,CAAAA,EAEO+D,EAAapG,OA5wBT,EA6wBb+E,EAAO,IAAIqB,EAAapC,KACtB1B,EACA8D,EAAa7C,KACb6C,EAAanG,QACbsC,KACAF,CAAAA,EAEO+D,EAAapG,OA/wBX,IAgxBX+E,EAAO,IAAIwB,GAAYjE,EAAqBC,KAAMF,CAAAA,GAEpDE,KAAKmD,KAAQxD,KAAK6C,CAAAA,EAClBqB,EAAe5D,EAAAA,EAAQ2D,CAAAA,CACxB,CACG1D,IAAc2D,GAAcrC,QAC9BzB,EAAO1B,GAAOwC,SAAAA,EACdX,IAEH,CAKD,OADA7B,GAAOkC,YAAcnE,GACdqH,CACR,CAED,EAAQ9F,EAAAA,CACN,IAAIuB,EAAI,EACR,QAAWsD,KAAQxC,KAAKmD,KAClBX,IADkBW,SAWfX,EAAuB9E,UAV1B8E,QAWCA,EAAuByB,KAAWtG,EAAQ6E,EAAuBtD,CAAAA,EAIlEA,GAAMsD,EAAuB9E,QAASoB,OAAS,GAE/C0D,EAAKyB,KAAWtG,EAAOuB,CAAAA,CAAAA,GAG3BA,GAEH,CAAA,EA8CG4E,GAAN,MAAMA,CAAAA,CAwBJ,IAAA,MAAIN,CAIF,OAAOxD,KAAKsD,MAAUE,MAAiBxD,KAAKkE,IAC7C,CAeD,YACEC,EACAC,EACA3B,EACA3C,EAAAA,CA/COE,KAAIvC,KA72BI,EA+2BjBuC,KAAgBqE,KAAYnG,EA+B5B8B,KAAwBoD,KAAAA,OAgBtBpD,KAAKsE,KAAcH,EACnBnE,KAAKuE,KAAYH,EACjBpE,KAAKsD,KAAWb,EAChBzC,KAAKF,QAAUA,EAIfE,KAAKkE,KAAgBpE,GAAS0E,aAAAA,EAK/B,CAoBD,IAAA,YAAIjB,CACF,IAAIA,EAAwBvD,KAAKsE,KAAaf,WACxCd,EAASzC,KAAKsD,KAUpB,OAREb,IAQF,QAPEc,GAAYzC,WAAa,KAKzByC,EAAcd,EAAwCc,YAEjDA,CACR,CAMD,IAAA,WAAIY,CACF,OAAOnE,KAAKsE,IACb,CAMD,IAAA,SAAIF,CACF,OAAOpE,KAAKuE,IACb,CAED,KAAW9H,EAAgBgI,EAAmCzE,KAAAA,CAM5DvD,EAAQ8F,GAAiBvC,KAAMvD,EAAOgI,CAAAA,EAClCjI,GAAYC,CAAAA,EAIVA,IAAUyB,GAAWzB,GAAS,MAAQA,IAAU,IAC9CuD,KAAKqE,OAAqBnG,GAS5B8B,KAAK0E,KAAAA,EAEP1E,KAAKqE,KAAmBnG,GACfzB,IAAUuD,KAAKqE,MAAoB5H,IAAUuB,IACtDgC,KAAK2E,EAAYlI,CAAAA,EAGTA,EAAqC,aAH5BA,OAInBuD,KAAK4E,EAAsBnI,CAAAA,EACjBA,EAAeqE,WADErE,OAiB3BuD,KAAK6E,EAAYpI,CAAAA,EACRG,GAAWH,CAAAA,EACpBuD,KAAK8E,EAAgBrI,CAAAA,EAGrBuD,KAAK2E,EAAYlI,CAAAA,CAEpB,CAEO,EAAwBsD,EAAAA,CAC9B,OAAiBC,KAAKsE,KAAaf,WAAawB,aAC9ChF,EACAC,KAAKuE,IAAAA,CAER,CAEO,EAAY9H,EAAAA,CACduD,KAAKqE,OAAqB5H,IAC5BuD,KAAK0E,KAAAA,EAoCL1E,KAAKqE,KAAmBrE,KAAKgF,EAAQvI,CAAAA,EAExC,CAEO,EAAYA,EAAAA,CAKhBuD,KAAKqE,OAAqBnG,GAC1B1B,GAAYwD,KAAKqE,IAAAA,EAECrE,KAAKsE,KAAaP,YAcrB5B,KAAO1F,EAsBpBuD,KAAK6E,EAAYzI,GAAE6I,eAAexI,CAAAA,CAAAA,EAUtCuD,KAAKqE,KAAmB5H,CACzB,CAEO,EACNyI,EAAAA,CAGA,GAAA,CAAMvH,OAACA,EAAQC,WAAgBH,CAAAA,EAAQyH,EAKjChC,EACY,OAATzF,GAAS,SACZuC,KAAKmF,KAAcD,CAAAA,GAClBzH,EAAK4C,KADa6E,SAEhBzH,EAAK4C,GAAKT,GAASU,cAClB/B,GAAwBd,EAAK2H,EAAG3H,EAAK2H,EAAE,CAAA,CAAA,EACvCpF,KAAKF,OAAAA,GAETrC,GAEN,GAAKuC,KAAKqE,MAAuChB,OAAeH,EAU7DlD,KAAKqE,KAAsCgB,EAAQ1H,CAAAA,MAC/C,CACL,IAAM2H,EAAW,IAAIrC,GAAiBC,EAAsBlD,IAAAA,EACtDyD,EAAW6B,EAASC,EAAOvF,KAAKF,OAAAA,EAWtCwF,EAASD,EAAQ1H,CAAAA,EAWjBqC,KAAK6E,EAAYpB,CAAAA,EACjBzD,KAAKqE,KAAmBiB,CACzB,CACF,CAID,KAAcJ,EAAAA,CACZ,IAAIhC,EAAW/E,GAAcqH,IAAIN,EAAOxH,OAAAA,EAIxC,OAHIwF,IAGJ,QAFE/E,GAAcsH,IAAIP,EAAOxH,QAAUwF,EAAW,IAAItD,GAASsF,CAAAA,CAAAA,EAEtDhC,CACR,CAEO,EAAgBzG,EAAAA,CAWjBC,GAAQsD,KAAKqE,IAAAA,IAChBrE,KAAKqE,KAAmB,CAAA,EACxBrE,KAAK0E,KAAAA,GAKP,IAAMgB,EAAY1F,KAAKqE,KAEnBsB,EADA/B,EAAY,EAGhB,QAAWgC,KAAQnJ,EACbmH,IAAc8B,EAAU5G,OAK1B4G,EAAU/F,KACPgG,EAAW,IAAI7B,EACd9D,KAAKgF,EAAQ1I,GAAAA,CAAAA,EACb0D,KAAKgF,EAAQ1I,GAAAA,CAAAA,EACb0D,KACAA,KAAKF,OAAAA,CAAAA,EAKT6F,EAAWD,EAAU9B,CAAAA,EAEvB+B,EAAS1B,KAAW2B,CAAAA,EACpBhC,IAGEA,EAAY8B,EAAU5G,SAExBkB,KAAK0E,KACHiB,GAAiBA,EAASpB,KAAYR,YACtCH,CAAAA,EAGF8B,EAAU5G,OAAS8E,EAEtB,CAaD,KACEiC,EAA+B7F,KAAKsE,KAAaP,YACjD+B,EAAAA,CAGA,IADA9F,KAAK+F,OAAAA,GAA4B,GAAaD,CAAAA,EACvCD,GAASA,IAAU7F,KAAKuE,MAAW,CACxC,IAAMyB,EAASH,EAAQ9B,YACjB8B,EAAoBI,OAAAA,EAC1BJ,EAAQG,CACT,CACF,CAQD,aAAaxB,EAAAA,CACPxE,KAAKsD,OADEkB,SAETxE,KAAKkE,KAAgBM,EACrBxE,KAAK+F,OAA4BvB,CAAAA,EAOpC,CAAA,EA2BG3C,GAAN,KAAMA,CA2BJ,IAAA,SAAIE,CACF,OAAO/B,KAAKkG,QAAQnE,OACrB,CAGD,IAAA,MAAIyB,CACF,OAAOxD,KAAKsD,KAASE,IACtB,CAED,YACE0C,EACAlF,EACAtD,EACA+E,EACA3C,EAAAA,CAxCOE,KAAIvC,KA9zCQ,EA80CrBuC,KAAgBqE,KAA6BnG,EAM7C8B,KAAwBoD,KAAAA,OAoBtBpD,KAAKkG,QAAUA,EACflG,KAAKgB,KAAOA,EACZhB,KAAKsD,KAAWb,EAChBzC,KAAKF,QAAUA,EACXpC,EAAQoB,OAAS,GAAKpB,EAAQ,CAAA,IAAO,IAAMA,EAAQ,CAAA,IAAO,IAC5DsC,KAAKqE,KAAuB1H,MAAMe,EAAQoB,OAAS,CAAA,EAAGqH,KAAK,IAAIC,MAAAA,EAC/DpG,KAAKtC,QAAUA,GAEfsC,KAAKqE,KAAmBnG,CAK3B,CAwBD,KACEzB,EACAgI,EAAmCzE,KACnCqG,EACAC,EAAAA,CAEA,IAAM5I,EAAUsC,KAAKtC,QAGjB6I,EAAAA,GAEJ,GAAI7I,IAAJ,OAEEjB,EAAQ8F,GAAiBvC,KAAMvD,EAAOgI,EAAiB,CAAA,EACvD8B,EAAAA,CACG/J,GAAYC,CAAAA,GACZA,IAAUuD,KAAKqE,MAAoB5H,IAAUuB,GAC5CuI,IACFvG,KAAKqE,KAAmB5H,OAErB,CAEL,IAAMkB,EAASlB,EAGXyC,EAAGsH,EACP,IAHA/J,EAAQiB,EAAQ,CAAA,EAGXwB,EAAI,EAAGA,EAAIxB,EAAQoB,OAAS,EAAGI,IAClCsH,EAAIjE,GAAiBvC,KAAMrC,EAAO0I,EAAcnH,CAAAA,EAAIuF,EAAiBvF,CAAAA,EAEjEsH,IAAMxI,KAERwI,EAAKxG,KAAKqE,KAAoCnF,CAAAA,GAEhDqH,IAAAA,CACG/J,GAAYgK,CAAAA,GAAMA,IAAOxG,KAAKqE,KAAoCnF,CAAAA,EACjEsH,IAAMtI,EACRzB,EAAQyB,EACCzB,IAAUyB,IACnBzB,IAAU+J,GAAK,IAAM9I,EAAQwB,EAAI,CAAA,GAIlCc,KAAKqE,KAAoCnF,CAAAA,EAAKsH,CAElD,CACGD,GAAAA,CAAWD,GACbtG,KAAKyG,EAAahK,CAAAA,CAErB,CAGD,EAAaA,EAAAA,CACPA,IAAUyB,EACN8B,KAAKkG,QAAqBpE,gBAAgB9B,KAAKgB,IAAAA,EAoB/ChB,KAAKkG,QAAqBQ,aAC9B1G,KAAKgB,KACJvE,GAAS,EAAA,CAGf,CAAA,EAIGiF,GAAN,cAA2BG,EAAAA,CAA3B,aAAAhC,CAAAA,MAAAA,GAAAA,SAAAA,EACoBG,KAAIvC,KA99CF,CAu/CrB,CAtBU,EAAahB,EAAAA,CAoBnBuD,KAAKkG,QAAgBlG,KAAKgB,IAAAA,EAAQvE,IAAUyB,EAAAA,OAAsBzB,CACpE,CAAA,EAIGkF,GAAN,cAAmCE,EAAAA,CAAnC,aAAAhC,CAAAA,MAAAA,GAAAA,SAAAA,EACoBG,KAAIvC,KA1/CO,CA2gD9B,CAdU,EAAahB,EAAAA,CASduD,KAAKkG,QAAqBS,gBAC9B3G,KAAKgB,KAAAA,CAAAA,CACHvE,GAASA,IAAUyB,CAAAA,CAExB,CAAA,EAkBG0D,GAAN,cAAwBC,EAAAA,CAGtB,YACEqE,EACAlF,EACAtD,EACA+E,EACA3C,EAAAA,CAEA8G,MAAMV,EAASlF,EAAMtD,EAAS+E,EAAQ3C,CAAAA,EATtBE,KAAIvC,KA5hDL,CA8iDhB,CAKQ,KACPoJ,EACApC,EAAmCzE,KAAAA,CAInC,IAFA6G,EACEtE,GAAiBvC,KAAM6G,EAAapC,EAAiB,CAAA,GAAMvG,KACzCF,GAClB,OAEF,IAAM8I,EAAc9G,KAAKqE,KAInB0C,EACHF,IAAgB3I,GAAW4I,IAAgB5I,GAC3C2I,EAAyCG,UACvCF,EAAyCE,SAC3CH,EAAyCI,OACvCH,EAAyCG,MAC3CJ,EAAyCK,UACvCJ,EAAyCI,QAIxCC,EACJN,IAAgB3I,IACf4I,IAAgB5I,GAAW6I,GAa1BA,GACF/G,KAAKkG,QAAQkB,oBACXpH,KAAKgB,KACLhB,KACA8G,CAAAA,EAGAK,GAIFnH,KAAKkG,QAAQmB,iBACXrH,KAAKgB,KACLhB,KACA6G,CAAAA,EAGJ7G,KAAKqE,KAAmBwC,CACzB,CAED,YAAYS,EAAAA,CAC2B,OAA1BtH,KAAKqE,MAAqB,WACnCrE,KAAKqE,KAAiBkD,KAAKvH,KAAKF,SAAS0H,MAAQxH,KAAKkG,QAASoB,CAAAA,EAE9DtH,KAAKqE,KAAyCoD,YAAYH,CAAAA,CAE9D,CAAA,EAIGtD,GAAN,KAAMA,CAiBJ,YACSkC,EACPzD,EACA3C,EAAAA,CAFOE,KAAOkG,QAAPA,EAjBAlG,KAAIvC,KAxnDM,EAooDnBuC,KAAwBoD,KAAAA,OAStBpD,KAAKsD,KAAWb,EAChBzC,KAAKF,QAAUA,CAChB,CAGD,IAAA,MAAI0D,CACF,OAAOxD,KAAKsD,KAASE,IACtB,CAED,KAAW/G,EAAAA,CAQT8F,GAAiBvC,KAAMvD,CAAAA,CACxB,CAAA,EAqBU,IAoBPiL,GAEFC,GAAOC,uBACXF,KAAkBG,GAAUC,EAAAA,GAI3BH,GAAOI,kBAAoB,CAAA,GAAIC,KAAK,OAAA,EAkCxB,IAAAC,GAAS,CACpBC,EACAC,EACAC,IAAAA,CAUA,IAAMC,EAAgBD,GAASE,cAAgBH,EAG3CI,EAAmBF,EAAkC,WAUzD,GAAIE,IAAJ,OAAwB,CACtB,IAAMC,EAAUJ,GAASE,cAAgB,KAGxCD,EAAkC,WAAIE,EAAO,IAAIT,GAChDK,EAAUM,aAAaC,GAAAA,EAAgBF,CAAAA,EACvCA,EAAAA,OAEAJ,GAAW,CAAE,CAAA,CAEhB,CAWD,OAVAG,EAAKI,KAAWT,CAAAA,EAUTK,CAAgB,EC7mEnB,IAAOK,EAAP,cAA0BC,EAAAA,CAAhC,aAAAC,CAAAA,MAAAA,GAAAA,SAAAA,EAOWC,KAAAC,cAA+B,CAACC,KAAMF,IAAAA,EAEvCA,KAAWG,KAAAA,MA8FpB,CAzFoB,kBAAAC,CACjB,IAAMC,EAAaC,MAAMF,iBAAAA,EAOzB,OADAJ,KAAKC,cAAcM,eAAiBF,EAAYG,WACzCH,CACR,CASkB,OAAOI,EAAAA,CAIxB,IAAMC,EAAQV,KAAKW,OAAAA,EACdX,KAAKY,aACRZ,KAAKC,cAAcY,YAAcb,KAAKa,aAExCP,MAAMQ,OAAOL,CAAAA,EACbT,KAAKG,KAAcQ,GAAOD,EAAOV,KAAKK,WAAYL,KAAKC,aAAAA,CACxD,CAsBQ,mBAAAc,CACPT,MAAMS,kBAAAA,EACNf,KAAKG,MAAaa,aAAAA,EAAa,CAChC,CAqBQ,sBAAAC,CACPX,MAAMW,qBAAAA,EACNjB,KAAKG,MAAaa,aAAAA,EAAa,CAChC,CASS,QAAAL,CACR,OAAOO,EACR,CAAA,EApGMrB,EAAgB,cAAA,GA8GxBA,EAC2B,UAAA,GAI5BsB,WAAWC,2BAA2B,CAACvB,WAAAA,CAAAA,CAAAA,EAGvC,IAAMwB,GAEFF,WAAWG,0BACfD,KAAkB,CAACxB,WAAAA,CAAAA,CAAAA,GAmClB0B,WAAWC,qBAAuB,CAAA,GAAIC,KAAK,OAAA,ECjR5C,IACMC,GAAkCC,OAK3BC,GACXF,GAAOG,aACNH,GAAOI,WADDD,QAC2BH,GAAOI,SAASC,eAClD,uBAAwBC,SAASC,WACjC,YAAaC,cAAcD,UAkBvBE,GAAoBC,OAAAA,EAEpBC,GAAc,IAAIC,QASXC,GATWD,KASXC,CAOXC,YACEC,EACAC,EACAC,EAAAA,CAEA,GAVFC,KAAe,aAAA,GAUTD,IAAcR,GAChB,MAAUU,MACR,mEAAA,EAGJD,KAAKH,QAAUA,EACfG,KAAKE,EAAWJ,CACjB,CAIGK,IAAAA,YAAAA,CAGF,IAAIA,EAAaH,KAAKI,EAChBN,EAAUE,KAAKE,EACrB,GAAIlB,IAA+BmB,IAA/BnB,OAAyD,CAC3D,IAAMqB,EAAYP,IAAZO,QAAqCP,EAAQQ,SAAW,EAC1DD,IACFF,EAAaV,GAAYc,IAAIT,CAAAA,GAE3BK,IAF2BL,UAG5BE,KAAKI,EAAcD,EAAa,IAAIb,eAAiBkB,YACpDR,KAAKH,OAAAA,EAEHQ,GACFZ,GAAYgB,IAAIX,EAASK,CAAAA,EAG9B,CACD,OAAOA,CACR,CAEDO,UAAAA,CACE,OAAOV,KAAKH,OACb,CAAA,EAiCUc,GAAaC,GACxB,IAAKjB,GACc,OAAViB,GAAU,SAAWA,EAAeA,EAAPC,GAAAA,OAEpCtB,EAAAA,EAWSuB,GAAM,CACjBhB,KACGiB,IAAAA,CAEH,IAAMlB,EACJC,EAAQQ,SAAW,EACfR,EAAQ,CAAA,EACRiB,EAAOC,OACL,CAACC,EAAKC,EAAGC,IAAQF,GA7CAL,GAAAA,CAEzB,GAAKA,EAAkC,eAAvC,GACE,OAAQA,EAAoBf,QACvB,GAAqB,OAAVe,GAAU,SAC1B,OAAOA,EAEP,MAAUX,MACR,mEACKW,EADL,sFAAA,CAIH,GAiCgDM,CAAAA,EAAKpB,EAAQqB,EAAM,CAAA,EAC5DrB,EAAQ,CAAA,CAAA,EAEhB,OAAO,IAAKH,GACVE,EACAC,EACAP,EAAAA,CACD,EAYU6B,GAAc,CACzBC,EACAC,IAAAA,CAEItC,GACDqC,EAA0BE,mBAAqBD,EAAOE,IAAKC,GAC1DA,aAAanC,cAAgBmC,EAAIA,EAAEtB,UAAAA,EAGrCmB,EAAOI,QAASD,GAAAA,CACd,IAAME,EAAQC,SAASC,cAAc,OAAA,EAE/BC,EAAShD,GAAyB,SACpCgD,IADoC,QAEtCH,EAAMI,aAAa,QAASD,CAAAA,EAE9BH,EAAMK,YAAeP,EAAgB5B,QACrCwB,EAAWY,YAAYN,CAAAA,CAAM,CAAA,CAEhC,EAWUO,GACXlD,GAEKyC,GAAyBA,EACzBA,GACCA,aAAanC,eAbY6C,GAAAA,CAC/B,IAAItC,EAAU,GACd,QAAWuC,KAAQD,EAAME,SACvBxC,GAAWuC,EAAKvC,QAElB,OAAOc,GAAUd,CAAAA,CAAQ,GAQkC4B,CAAAA,EAAKA,SCzK5Da,GAAkCC,OAiBlCC,GAAgBF,GACnBE,aAMGC,GAAiCD,GAClCA,GAAaE,YACd,GAEEC,GAEFL,GAAOM,+BA8PEC,GAA8C,CACzDC,YAAYC,EAAgBC,EAAAA,CAC1B,OAAQA,EAAAA,CACN,KAAKC,QACHF,EAAQA,EAAQN,GAAiC,KACjD,MACF,KAAKS,OACL,KAAKC,MAGHJ,EAAQA,GAAS,KAAOA,EAAQK,KAAKC,UAAUN,CAAAA,CAAAA,CAGnD,OAAOA,CACR,EAEDO,cAAcP,EAAsBC,EAAAA,CAClC,IAAIO,EAAqBR,EACzB,OAAQC,EAAAA,CACN,KAAKC,QACHM,EAAYR,IAAU,KACtB,MACF,KAAKS,OACHD,EAAYR,IAAU,KAAO,KAAOS,OAAOT,CAAAA,EAC3C,MACF,KAAKG,OACL,KAAKC,MAIH,GAAA,CAEEI,EAAYH,KAAKK,MAAMV,CAAAA,CACxB,MAAQW,CACPH,EAAY,IACb,CAAA,CAGL,OAAOA,CACR,CAAA,EAWUI,GAAuB,CAACZ,EAAgBa,IAE5CA,IAAQb,IAAUa,GAAQA,GAAOb,GAAUA,GAG9Cc,GAAkD,CACtDC,UAAAA,GACAd,KAAMe,OACNC,UAAWnB,GACXoB,QAAAA,GACAC,WAAYP,EAAAA,EASRQ,GAAY,YAeIC,GAfJ,cAwBRC,WAAAA,CAsgBRC,aAAAA,CACEC,MAAAA,EA3CMC,KAAAC,KAAwC,IAAIC,IAUpDF,KAAeG,gBAAAA,GAOfH,KAAUI,WAAAA,GAkBFJ,KAAoBK,KAAuB,KASjDL,KAAKM,KAAAA,CACN,CApbDC,OAAAA,eAAsBC,EAAAA,CAAAA,IAAAA,EACpBR,KAAKS,SAAAA,IACLC,EAACV,KAAKW,KAAa,MAAAD,IAAbC,OAAaD,EAAlBV,KAAKW,EAAkB,CAAA,GAAIC,KAAKJ,CAAAA,CAClC,CA0GUK,WAAAA,oBAAAA,CAETb,KAAKS,SAAAA,EACL,IAAMK,EAAuB,CAAA,EAU7B,OAPAd,KAAKe,kBAAkBC,QAAQ,CAACC,EAAGC,IAAAA,CACjC,IAAMC,EAAOnB,KAAKoB,KAA2BF,EAAGD,CAAAA,EAC5CE,IAD4CF,SAE9CjB,KAAKqB,KAAyBC,IAAIH,EAAMD,CAAAA,EACxCJ,EAAWF,KAAKO,CAAAA,EACjB,CAAA,EAEIL,CACR,CA2BDP,OAAAA,eACEgB,EACAC,EAA+BnC,GAAAA,CAiB/B,GAdImC,EAAQC,QAGTD,EAAgBlC,UAAAA,IAInBU,KAAKS,SAAAA,EACLT,KAAKe,kBAAkBO,IAAIC,EAAMC,CAAAA,EAAAA,CAM5BA,EAAQE,YAAAA,CAAe1B,KAAK2B,UAAUC,eAAeL,CAAAA,EAAO,CAC/D,IAAMM,EAAsB,OAATN,GAAS,SAAWO,OAAAA,EAAW,KAAKP,EACjDQ,EAAa/B,KAAKgC,sBAAsBT,EAAMM,EAAKL,CAAAA,EACrDO,IADqDP,QAEvD9C,OAAOuD,eAAejC,KAAK2B,UAAWJ,EAAMQ,CAAAA,CAY/C,CACF,CA6BSxB,OAAAA,sBACRgB,EACAM,EACAL,EAAAA,CAEA,MAAO,CAELU,KAAAA,CACE,OAAQlC,KAAkC6B,CAAAA,CAC3C,EACDP,IAA2B/C,EAAAA,CACzB,IAAM4D,EAAYnC,KAChBuB,CAAAA,EAEDvB,KAAwC6B,CAAAA,EAAiBtD,EACzDyB,KAAoCoC,cACnCb,EACAY,EACAX,CAAAA,CAEH,EACDa,aAAAA,GACAC,WAAAA,EAAY,CAEf,CAgBD/B,OAAAA,mBAA0BgB,EAAAA,CACxB,OAAOvB,KAAKe,kBAAkBmB,IAAIX,CAAAA,GAASlC,EAC5C,CAQSkB,OAAAA,UAAAA,CACR,GAAIP,KAAK4B,eAAejC,EAAAA,EACtB,MAAA,GAEFK,KAAKL,EAAAA,EAAAA,GAEL,IAAM4C,EAAY7D,OAAO8D,eAAexC,IAAAA,EAexC,GAdAuC,EAAU9B,SAAAA,EAIN8B,EAAU5B,IAJJF,SAKRT,KAAKW,EAAgB,CAAA,GAAI4B,EAAU5B,CAAAA,GAErCX,KAAKe,kBAAoB,IAAIb,IAAIqC,EAAUxB,iBAAAA,EAE3Cf,KAAKqB,KAA2B,IAAInB,IAKhCF,KAAK4B,eAAyC,YAAA,EAAsB,CACtE,IAAMa,EAAQzC,KAAK0C,WAEbC,EAAW,CAAA,GACZjE,OAAOkE,oBAAoBH,CAAAA,EAAAA,GAC3B/D,OAAOmE,sBAAsBJ,CAAAA,CAAAA,EAGlC,QAAWvB,KAAKyB,EAId3C,KAAK8C,eAAe5B,EAAIuB,EAAcvB,CAAAA,CAAAA,CAEzC,CAkBD,OAjBAlB,KAAK+C,cAAgB/C,KAAKgD,eAAehD,KAAKiD,MAAAA,EAAAA,EAkB/C,CA4BS1C,OAAAA,eACR0C,EAAAA,CAEA,IAAMF,EAAgB,CAAA,EACtB,GAAIpE,MAAMuE,QAAQD,CAAAA,EAAS,CAIzB,IAAM3B,EAAM,IAAI6B,IAAKF,EAA0BG,KAAKC,GAAAA,EAAUC,QAAAA,CAAAA,EAE9D,QAAWC,KAAKjC,EACdyB,EAAcS,QAAQC,GAAmBF,CAAAA,CAAAA,CAE5C,MAAUN,IAAV,QACCF,EAAcnC,KAAK6C,GAAmBR,CAAAA,CAAAA,EAExC,OAAOF,CACR,CAaOxC,OAAAA,KACNgB,EACAC,EAAAA,CAEA,IAAMlC,EAAYkC,EAAQlC,UAC1B,OAAOA,IAAP,GAAOA,OAEkB,OAAdA,GAAc,SACrBA,EACgB,OAATiC,GAAS,SAChBA,EAAKmC,YAAAA,EAAAA,MAEV,CAqDOpD,MAAAA,CAAAA,IAAAA,EACNN,KAAK2D,KAAkB,IAAIC,QACxBC,GAAS7D,KAAK8D,eAAiBD,CAAAA,EAElC7D,KAAK+D,KAAsB,IAAI7D,IAC/BF,KAAKgE,KAAAA,EAGLhE,KAAKoC,cAAAA,GACL1B,EAACV,KAAKF,YAAuCa,KAAa,MAAAD,IAAbC,QAAaD,EAAEM,QAASiD,GACnEA,EAAEjE,IAAAA,CAAAA,CAEL,CAWDkE,cAAcC,EAAAA,CAAAA,IAAAA,EAAAA,IACZzD,EAACV,KAAKoE,QAAa,MAAA1D,IAAb0D,OAAa1D,EAAlBV,KAAKoE,KAAkB,CAAA,GAAIxD,KAAKuD,CAAAA,EAK7BnE,KAAKqE,aALwBF,QAKInE,KAAKsE,eACxCC,EAAAJ,EAAWK,iBAAa,MAAAD,IAAbC,QAAaD,EAAAE,KAAAN,CAAAA,EAE3B,CAMDO,iBAAiBP,EAAAA,CAAAA,IAAAA,GAGfzD,EAAAV,KAAKoE,QAHUD,MAGVC,IAAAA,QAAAA,EAAeO,OAAO3E,KAAKoE,KAAcQ,QAAQT,CAAAA,IAAgB,EAAG,CAAA,CAC1E,CAcOH,MAAAA,CAGLhE,KAAKF,YAAuCiB,kBAAkBC,QAC7D,CAAC6D,EAAI3D,IAAAA,CACClB,KAAK4B,eAAeV,CAAAA,IACtBlB,KAAKC,KAAsBqB,IAAIJ,EAAGlB,KAAKkB,CAAAA,CAAAA,EAAAA,OAChClB,KAAKkB,CAAAA,EACb,CAAA,CAGN,CAWS4D,kBAAAA,CAAAA,IAAAA,EACR,IAAMT,GACJ3D,EAAAV,KAAK+E,cACL,MAAArE,IADKqE,OACLrE,EAAAV,KAAKgF,aACFhF,KAAKF,YAAuCmF,iBAAAA,EAMjD,OAJAC,GACEb,EACCrE,KAAKF,YAAuCiD,aAAAA,EAExCsB,CACR,CAODc,mBAAAA,CAAAA,IAAAA,EAEMnF,KAAKqE,aAFXc,SAIMnF,KAGAqE,WAAarE,KAAK8E,iBAAAA,GAEtB9E,KAAK8D,eAAAA,EAAe,GACpBpD,EAAAV,KAAKoE,QAAa,MAAA1D,IAAb0D,QAAa1D,EAAEM,QAASoE,GAAAA,CAAAA,IAAAA,EAAM,OAAA1E,EAAA0E,EAAEZ,iBAAF,MAAEA,IAAAA,OAAAA,OAAAA,EAAAA,KAAAA,CAAAA,CAAiB,CAAA,CACvD,CAQSV,eAAeuB,EAAAA,CAA6B,CAQtDC,sBAAAA,CAAAA,IAAAA,GACE5E,EAAAV,KAAKoE,QAAa,MAAA1D,IAAb0D,QAAa1D,EAAEM,QAASoE,GAAAA,CAAAA,IAAAA,EAAM,OAAA1E,EAAA0E,EAAEG,oBAAF,MAAEA,IAAAA,OAAAA,OAAAA,EAAAA,KAAAA,CAAAA,CAAoB,CAAA,CAC1D,CAcDC,yBACEjE,EACAkE,EACAlH,EAAAA,CAEAyB,KAAK0F,KAAsBnE,EAAMhD,CAAAA,CAClC,CAEOoH,KACNpE,EACAhD,EACAiD,EAA+BnC,GAAAA,CAAAA,IAAAA,EAE/B,IAAM8B,EACJnB,KAAKF,YACLsB,KAA2BG,EAAMC,CAAAA,EACnC,GAAIL,IAAJ,QAA0BK,EAAQ/B,UAA9B0B,GAAgD,CAClD,IAKMyE,KAJJlF,EAACc,EAAQhC,aACTqG,MADSrG,IAAAA,OAAAA,OAAAA,EAAyClB,eAI9CsH,OAFCpE,EAAQhC,UACTnB,IACsBC,YAAaC,EAAOiD,EAAQhD,IAAAA,EAwBxDwB,KAAKK,KAAuBkB,EACxBqE,GAAa,KACf5F,KAAK8F,gBAAgB3E,CAAAA,EAErBnB,KAAK+F,aAAa5E,EAAMyE,CAAAA,EAG1B5F,KAAKK,KAAuB,IAC7B,CACF,CAGDqF,KAAsBnE,EAAchD,EAAAA,CAAAA,IAAAA,EAClC,IAAMyH,EAAOhG,KAAKF,YAGZmG,EAAYD,EAAK3E,KAA0Ca,IAAIX,CAAAA,EAGrE,GAAI0E,IAAJ,QAA8BjG,KAAKK,OAAyB4F,EAAU,CACpE,IAAMzE,EAAUwE,EAAKE,mBAAmBD,CAAAA,EAClCzG,EACyB,OAAtBgC,EAAQhC,WAAc,WACzB,CAACV,cAAe0C,EAAQhC,SAAAA,IACxBkB,EAAAc,EAAQhC,aAAS,MAAAkB,IAATlB,OAASkB,OAAAA,EAAE5B,iBADKU,OAExBgC,EAAQhC,UACRnB,GAEN2B,KAAKK,KAAuB4F,EAC5BjG,KAAKiG,CAAAA,EAA0BzG,EAAUV,cACvCP,EACAiD,EAAQhD,IAAAA,EAIVwB,KAAKK,KAAuB,IAC7B,CACF,CAgBD+B,cACEb,EACAY,EACAX,EAAAA,CAEA,IAAI2E,EAAAA,GAEA5E,IAFsB,WAGxBC,EACEA,GACCxB,KAAKF,YAAuCoG,mBAAmB3E,CAAAA,GACvC7B,YAAcP,IAC1Ba,KAAKuB,CAAAA,EAAqBY,CAAAA,GAClCnC,KAAK+D,KAAoBqC,IAAI7E,CAAAA,GAChCvB,KAAK+D,KAAoBzC,IAAIC,EAAMY,CAAAA,EAMjCX,EAAQ/B,UANyB0C,IAMLnC,KAAKK,OAAyBkB,IACxDvB,KAAKqG,OADmD9E,SAE1DvB,KAAKqG,KAAyB,IAAInG,KAEpCF,KAAKqG,KAAuB/E,IAAIC,EAAMC,CAAAA,IAIxC2E,EAAAA,IAAsB,CAGrBnG,KAAKG,iBAAmBgG,IAC3BnG,KAAK2D,KAAkB3D,KAAKsG,KAAAA,EAO/B,CAKOC,MAAAA,MAAAA,CACNvG,KAAKG,gBAAAA,GACL,GAAA,CAAA,MAGQH,KAAK2D,IACZ,OAAQzE,EAAAA,CAKP0E,QAAQ4C,OAAOtH,CAAAA,CAChB,CACD,IAAMuH,EAASzG,KAAK0G,eAAAA,EAOpB,OAHID,GAAU,MAAVA,MACIA,EAAAA,CAEAzG,KAAKG,eACd,CAmBSuG,gBAAAA,CACR,OAAO1G,KAAK2G,cAAAA,CACb,CAmBSA,eAAAA,CAAAA,IAAAA,EAIR,GAAA,CAAK3G,KAAKG,gBACR,OAIGH,KAAKI,WAyBNJ,KAAKC,OAIPD,KAAKC,KAAsBe,QAAQ,CAACC,EAAGC,IAAQlB,KAAakB,CAAAA,EAAKD,CAAAA,EACjEjB,KAAKC,KAAAA,QAEP,IAAI2G,EAAAA,GACEC,EAAoB7G,KAAK+D,KAC/B,GAAA,CACE6C,EAAe5G,KAAK4G,aAAaC,CAAAA,EAC7BD,GACF5G,KAAK8G,WAAWD,CAAAA,GAChBtC,EAAAvE,KAAKoE,QAAa,MAAAG,IAAbH,QAAaG,EAAEvD,QAASoE,GAAAA,CAAAA,IAAAA,EAAM,OAAA1E,EAAA0E,EAAE2B,cAAF,MAAEA,IAAAA,OAAAA,OAAAA,EAAAA,KAAAA,CAAAA,CAAc,CAAA,EACnD/G,KAAKgH,OAAOH,CAAAA,GAEZ7G,KAAKiH,KAAAA,CAER,OAAQ/H,EAAAA,CAMP,MAHA0H,EAAAA,GAEA5G,KAAKiH,KAAAA,EACC/H,CACP,CAEG0H,GACF5G,KAAKkH,KAAYL,CAAAA,CAEpB,CAuBSC,WAAWK,EAAAA,CAA4C,CAIjED,KAAYL,EAAAA,CAAAA,IAAAA,GACVnG,EAAAV,KAAKoE,QAAa,MAAA1D,IAAb0D,QAAa1D,EAAEM,QAASoE,GAAAA,CAAAA,IAAAA,EAAM,OAAA1E,EAAA0E,EAAEgC,eAAF,MAAEA,IAAAA,OAAAA,OAAAA,EAAAA,KAAAA,CAAAA,CAAe,CAAA,EAC/CpH,KAAKI,aACRJ,KAAKI,WAAAA,GACLJ,KAAKqH,aAAaR,CAAAA,GAEpB7G,KAAKsH,QAAQT,CAAAA,CAiBd,CAEOI,MAAAA,CACNjH,KAAK+D,KAAsB,IAAI7D,IAC/BF,KAAKG,gBAAAA,EACN,CAkBGoH,IAAAA,gBAAAA,CACF,OAAOvH,KAAKwH,kBAAAA,CACb,CAyBSA,mBAAAA,CACR,OAAOxH,KAAK2D,IACb,CAUSiD,aAAaO,EAAAA,CACrB,MAAA,EACD,CAWSH,OAAOG,EAAAA,CACXnH,KAAKqG,OADMc,SAIbnH,KAAKqG,KAAuBrF,QAAQ,CAACC,EAAGwG,IACtCzH,KAAK2F,KAAsB8B,EAAGzH,KAAKyH,CAAAA,EAAkBxG,CAAAA,CAAAA,EAEvDjB,KAAKqG,KAAAA,QAEPrG,KAAKiH,KAAAA,CACN,CAYSK,QAAQH,EAAAA,CAAsC,CAkB9CE,aAAaF,EAAAA,CAAsC,CAAA,EA99B5CvH,GAACD,EAAAA,EAAAA,GAQXC,GAAAmB,kBAA4C,IAAIb,IAmChDN,GAAamD,cAA6B,CAAA,EAwQ1CnD,GAAAqF,kBAAoC,CAACyC,KAAM,MAAA,EA+qBpDvJ,KAAkB,CAACyB,gBAAAA,EAAAA,CAAAA,IAoCnB+H,GAAC7J,GAAO8J,2BAAuB,MAAAD,KAAvBC,OAAuBD,GAA9B7J,GAAO8J,wBAA4B,CAAA,GAAIhH,KAAK,OAAA,SC//CvCiH,GAAkCC,OAmOlCC,GAAgBF,GAAsCE,aAUtDC,GAASD,GACXA,GAAaE,aAAa,WAAY,CACpCC,WAAaC,GAAMA,CAAAA,CAAAA,EAAAA,OA8EnBC,GAAuB,QAMvBC,GAAS,QAAcC,KAAKC,OAAAA,EAAZC,IAAsBC,MAAM,CAAA,CAAA,IAG5CC,GAAc,IAAML,GAIpBM,GAAa,IAAID,EAAAA,IAEjBE,GAOAC,SAGAC,GAAe,IAAMF,GAAEG,cAAc,EAAA,EAIrCC,GAAeC,GACnBA,IAAU,MAAyB,OAATA,GAAS,UAA4B,OAATA,GAAS,WAC3DC,GAAUC,MAAMD,QAChBE,GAAcH,GAClBC,GAAQD,CAAAA,GAEqC,OAArCA,IAAgBI,OAAOC,QAAAA,GAAc,WAEzCC,GAAa;OAkBbC,GAAe,sDAKfC,GAAkB,OAIlBC,GAAmB,KAwBnBC,GAAkBC,OACtB,KAAKL,EAAAA,qBAAgCA,EAAAA,KAAeA,EAAAA;0BACpD,GAAA,EAOIM,GAA0B,KAC1BC,GAA0B,KAO1BC,GAAiB,qCAgEjBC,GACmBC,GACvB,CAACC,KAAkCC,KAU1B,CAELC,WAAgBH,EAChBC,QAAAA,EACAC,OAAAA,CAAAA,GAiBOE,EAAOL,GA9FA,CAAA,EAuHPM,GAAMN,GAtHA,CAAA,EA4HNO,EAAWlB,OAAOmB,IAAI,cAAA,EAqBtBC,EAAUpB,OAAOmB,IAAI,aAAA,EAS5BE,GAAgB,IAAIC,QAqCpBC,GAAShC,GAAEiC,iBACfjC,GACA,IACA,KAAA,EACA,EAqBF,SAASkC,GACPC,EACAC,EAAAA,CAOA,GAAA,CAAK7B,MAAMD,QAAQ6B,CAAAA,GAAAA,CAASA,EAAIE,eAAe,KAAA,EAiB7C,MAAUC,MAhBI,gCAAA,EAkBhB,OAAOlD,KAAP,OACIA,GAAOE,WAAW8C,CAAAA,EACjBA,CACP,CAcA,IAAMG,GAAkB,CACtBjB,EACAD,IAAAA,CAQA,IAAMmB,EAAIlB,EAAQmB,OAAS,EAIrBC,EAAuC,CAAA,EAMzCC,EALAlB,EAAOJ,IApRM,EAoRgB,QAAU,GASvCuB,EAAQhC,GAEZ,QAASiC,EAAI,EAAGA,EAAIL,EAAGK,IAAK,CAC1B,IAAMtD,EAAI+B,EAAQuB,CAAAA,EAOdC,EAEAC,EAHAC,EAAAA,GAEAC,EAAY,EAKhB,KAAOA,EAAY1D,EAAEkD,SAEnBG,EAAMK,UAAYA,EAClBF,EAAQH,EAAMM,KAAK3D,CAAAA,EACfwD,IAAU,OAGdE,EAAYL,EAAMK,UACdL,IAAUhC,GACRmC,EA3WU,CAAA,IA2We,MAC3BH,EAAQ/B,GACCkC,EA7WG,CAAA,IA4WJlC,OAGR+B,EAAQ9B,GACCiC,EA/WF,CAAA,IA8WCjC,QAEJK,GAAegC,KAAKJ,EAhXjB,CAAA,CAAA,IAmXLJ,EAAsB3B,OAAO,KAAK+B,EAnX7B,CAAA,EAmXgD,GAAA,GAEvDH,EAAQ7B,IACCgC,EArXM,CAAA,IAoXPhC,SAQR6B,EAAQ7B,IAED6B,IAAU7B,GACfgC,EA7VS,CAAA,IA6Ve,KAG1BH,EAAQD,GAAmB/B,GAG3BoC,EAAAA,IACSD,EAnWI,CAAA,IAkWO,OAGpBC,EAAAA,IAEAA,EAAmBJ,EAAMK,UAAYF,EAtWrB,CAAA,EAsW8CN,OAC9DK,EAAWC,EAxWE,CAAA,EAyWbH,EACEG,EAxWO,CAAA,IAuWTH,OAEM7B,GACAgC,EA1WG,CAAA,IA0WmB,IACtB7B,GACAD,IAGR2B,IAAU1B,IACV0B,IAAU3B,GAEV2B,EAAQ7B,GACC6B,IAAU/B,IAAmB+B,IAAU9B,GAChD8B,EAAQhC,IAIRgC,EAAQ7B,GACR4B,EAAAA,QA8BJ,IAAMS,EACJR,IAAU7B,IAAeO,EAAQuB,EAAI,CAAA,EAAGQ,WAAW,IAAA,EAAQ,IAAM,GACnE5B,GACEmB,IAAUhC,GACNrB,EAAIQ,GACJiD,GAAoB,GACnBN,EAAUY,KAAKR,CAAAA,EAChBvD,EAAEM,MAAM,EAAGmD,CAAAA,EACTxD,GACAD,EAAEM,MAAMmD,CAAAA,EACVvD,GACA2D,GACA7D,EACAE,IACCuD,IADDvD,IAC4BiD,EAAUY,KAAAA,MAAKC,EAAYV,GAAKO,EACnE,CAMD,MAAO,CAAClB,GAAwBZ,EAH9BG,GAAQH,EAAQkB,CAAAA,GAAM,QAAUnB,IA3ZjB,EA2ZuC,SAAW,GAAA,EAGbqB,CAAAA,CAAU,EAK5Dc,GAAN,MAAMA,CAAAA,CAMJC,YAAAA,CAEEnC,QAACA,EAASE,WAAgBH,CAAAA,EAC1BqC,EAAAA,CAEA,IAAIC,EAPNC,KAAKC,MAAwB,CAAA,EAQ3B,IAAIC,EAAY,EACZC,EAAgB,EACdC,EAAY1C,EAAQmB,OAAS,EAC7BoB,EAAQD,KAAKC,MAAAA,CAGZpC,EAAMiB,CAAAA,EAAaH,GAAgBjB,EAASD,CAAAA,EAKnD,GAJAuC,KAAKK,GAAKT,EAASU,cAAczC,EAAMiC,CAAAA,EACvC1B,GAAOmC,YAAcP,KAAKK,GAAGG,QAGzB/C,IA1bW,EA0bU,CACvB,IAAM+C,EAAUR,KAAKK,GAAGG,QAClBC,EAAaD,EAAQE,WAC3BD,EAAWE,OAAAA,EACXH,EAAQI,OAAAA,GAAUH,EAAWI,UAAAA,CAC9B,CAGD,MAAQd,EAAO3B,GAAO0C,SAAAA,KAAgB,MAAQb,EAAMpB,OAASuB,GAAW,CACtE,GAAIL,EAAKgB,WAAa,EAAG,CAuBvB,GAAKhB,EAAiBiB,cAAAA,EAAiB,CAIrC,IAAMC,EAAgB,CAAA,EACtB,QAAWC,KAASnB,EAAiBoB,kBAAAA,EAQnC,GACED,EAAKE,SAASxF,EAAAA,GACdsF,EAAKzB,WAAW5D,EAAAA,EAChB,CACA,IAAMwF,EAAWvC,EAAUqB,GAAAA,EAE3B,GADAc,EAAcvB,KAAKwB,CAAAA,EACfG,IADeH,OACS,CAE1B,IAGMI,EAHSvB,EAAiBwB,aAC9BF,EAASG,YAAAA,EAAgB5F,EAAAA,EAEL6F,MAAM5F,EAAAA,EACtB6F,EAAI,eAAepC,KAAK+B,CAAAA,EAC9BpB,EAAMP,KAAK,CACTjC,KA/eK,EAgfLkE,MAAOzB,EACPgB,KAAMQ,EAAE,CAAA,EACRhE,QAAS4D,EACTM,KACEF,EAAE,CAAA,IAAO,IACLG,GACAH,EAAE,CAAA,IAAO,IACTI,GACAJ,EAAE,CAAA,IAAO,IACTK,GACAC,EAAAA,CAAAA,CAET,MACC/B,EAAMP,KAAK,CACTjC,KAzfG,EA0fHkE,MAAOzB,CAAAA,CAAAA,CAGZ,CAEH,QAAWgB,KAAQD,EAChBlB,EAAiBkC,gBAAgBf,CAAAA,CAErC,CAGD,GAAI3D,GAAegC,KAAMQ,EAAiBmC,OAAAA,EAAU,CAIlD,IAAMxE,EAAWqC,EAAiBoC,YAAaV,MAAM5F,EAAAA,EAC/CwD,EAAY3B,EAAQmB,OAAS,EACnC,GAAIQ,EAAY,EAAG,CAChBU,EAAiBoC,YAAc5G,GAC3BA,GAAa6G,YACd,GAMJ,QAASnD,EAAI,EAAGA,EAAII,EAAWJ,IAC5Bc,EAAiBa,OAAOlD,EAAQuB,CAAAA,EAAI3C,GAAAA,CAAAA,EAErC8B,GAAO0C,SAAAA,EACPb,EAAMP,KAAK,CAACjC,KA5hBP,EA4hByBkE,MAAAA,EAASzB,CAAAA,CAAAA,EAKxCH,EAAiBa,OAAOlD,EAAQ2B,CAAAA,EAAY/C,GAAAA,CAAAA,CAC9C,CACF,CACF,SAAUyD,EAAKgB,WAAa,EAE3B,GADchB,EAAiBsC,OAClBnG,GACX+D,EAAMP,KAAK,CAACjC,KAviBH,EAuiBqBkE,MAAOzB,CAAAA,CAAAA,MAChC,CACL,IAAIjB,EAAAA,GACJ,MAAQA,EAAKc,EAAiBsC,KAAKC,QAAQzG,GAAQoD,EAAI,CAAA,KAAvD,IAGEgB,EAAMP,KAAK,CAACjC,KAxiBH,EAwiBuBkE,MAAOzB,CAAAA,CAAAA,EAEvCjB,GAAKpD,GAAOgD,OAAS,CAExB,CAEHqB,GACD,CAWF,CAIDqC,OAAAA,cAAqB1E,EAAmB2E,EAAAA,CACtC,IAAMnC,EAAKjE,GAAEkE,cAAc,UAAA,EAE3B,OADAD,EAAGoC,UAAY5E,EACRwC,CACR,CAAA,EAgBH,SAASqC,GACPC,EACAlG,EACAmG,EAA0BD,EAC1BE,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAIA,GAAIpG,IAAUsB,EACZ,OAAOtB,EAET,IAAIqG,EACFD,IADEC,QAEGC,EAAAH,EAAyBI,QAAY,MAAAD,IAAZC,OAAYD,OAAAA,EAAGF,CAAAA,EACxCD,EAA+CK,KAChDC,EAA2B1G,GAAYC,CAAAA,EAAAA,OAGxCA,EAA2C,gBAyBhD,OAxBIqG,GAAkBjD,cAAgBqD,KAEpCC,EAAAL,GAAuD,QAAC,MAAAK,IAAD,QAACA,EAAAC,KAAAN,EAAAA,EAAG,EACvDI,IADuD,OAEzDJ,EAAAA,QAEAA,EAAmB,IAAII,EAAyBP,CAAAA,EAChDG,EAAiBO,KAAaV,EAAMC,EAAQC,CAAAA,GAE1CA,IAF0CA,SAG1CS,GAAAC,EAAAX,GAAyBI,QAAA,MAAAM,IAAAN,OAAAM,EAAAC,EAAAP,KAAiB,CAAA,GAAIH,CAAAA,EAC9CC,EAEDF,EAAiCK,KAAcH,GAGhDA,IAHgDA,SAIlDrG,EAAQiG,GACNC,EACAG,EAAiBU,KAAUb,EAAOlG,EAA0BkB,MAAAA,EAC5DmF,EACAD,CAAAA,GAGGpG,CACT,CAOA,IAAMgH,GAAN,KAAMA,CASJ5D,YAAY6D,EAAoBd,EAAAA,CAPhC5C,KAAO2D,KAA4B,CAAA,EAKnC3D,KAAwB4D,KAAAA,OAGtB5D,KAAK6D,KAAaH,EAClB1D,KAAK8D,KAAWlB,CACjB,CAGGmB,IAAAA,YAAAA,CACF,OAAO/D,KAAK8D,KAASC,UACtB,CAGGC,IAAAA,MAAAA,CACF,OAAOhE,KAAK8D,KAASE,IACtB,CAIDC,EAAOnE,EAAAA,CAAAA,IAAAA,EACL,GAAA,CACEO,GAAAA,CAAIG,QAACA,CAAAA,EACLP,MAAOA,CAAAA,EACLD,KAAK6D,KACHK,IAAYnB,EAAAjD,GAASqE,iBAAiB,MAAApB,IAAjBoB,OAAiBpB,EAAA3G,IAAGgI,WAAW5D,EAAAA,EAAS,EACnEpC,GAAOmC,YAAc2D,EAErB,IAAInE,EAAO3B,GAAO0C,SAAAA,EACdZ,EAAY,EACZmE,EAAY,EACZC,EAAerE,EAAM,CAAA,EAEzB,KAAOqE,IAAP,QAAmC,CACjC,GAAIpE,IAAcoE,EAAa3C,MAAO,CACpC,IAAIgB,EACA2B,EAAa7G,OAprBN,EAqrBTkF,EAAO,IAAI4B,GACTxE,EACAA,EAAKyE,YACLxE,KACAF,CAAAA,EAEOwE,EAAa7G,OA5rBT,EA6rBbkF,EAAO,IAAI2B,EAAa1C,KACtB7B,EACAuE,EAAapD,KACboD,EAAa5G,QACbsC,KACAF,CAAAA,EAEOwE,EAAa7G,OA/rBX,IAgsBXkF,EAAO,IAAI8B,GAAY1E,EAAqBC,KAAMF,CAAAA,GAEpDE,KAAK2D,KAAQjE,KAAKiD,CAAAA,EAClB2B,EAAerE,EAAAA,EAAQoE,CAAAA,CACxB,CACGnE,IAAcoE,GAAc3C,QAC9B5B,EAAO3B,GAAO0C,SAAAA,EACdZ,IAEH,CAKD,OADA9B,GAAOmC,YAAcnE,GACd8H,CACR,CAEDQ,EAAQ/G,EAAAA,CACN,IAAIsB,EAAI,EACR,QAAW0D,KAAQ3C,KAAK2D,KAClBhB,IADkBgB,SAUfhB,EAAuBjF,UAT1BiF,QAUCA,EAAuBgC,KAAWhH,EAAQgF,EAAuB1D,CAAAA,EAIlEA,GAAM0D,EAAuBjF,QAASmB,OAAS,GAE/C8D,EAAKgC,KAAWhH,EAAOsB,CAAAA,CAAAA,GAG3BA,GAEH,CAAA,EA8CGsF,GAAN,MAAMA,CAAAA,CA4CJ1E,YACE+E,EACAC,EACAjC,EACA9C,EAAAA,CAAAA,IAAAA,EA/COE,KAAIvC,KA5xBI,EA8xBjBuC,KAAgB8E,KAAY7G,EA+B5B+B,KAAwB4D,KAAAA,OAgBtB5D,KAAK+E,KAAcH,EACnB5E,KAAKgF,KAAYH,EACjB7E,KAAK8D,KAAWlB,EAChB5C,KAAKF,QAAUA,EAIfE,KAAKiF,MAAgBlC,EAAAjD,GAASoF,eAAW,MAAAnC,IAAXmC,QAAWnC,CAK1C,CAtCGiB,IAAAA,MAAAA,CAAAA,IAAAA,EAAAA,EAIF,OAAOb,GAAAJ,EAAA/C,KAAK8D,QAAU,MAAAf,IAAVe,OAAUf,OAAAA,EAAAiB,QAAiB,MAAAb,IAAjBa,OAAiBb,EAAAnD,KAAKiF,IAC7C,CAqDGlB,IAAAA,YAAAA,CACF,IAAIA,EAAwB/D,KAAK+E,KAAahB,WACxCnB,EAAS5C,KAAK8D,KAUpB,OARElB,IAQF,QAPEmB,GAAYhD,WAAa,KAKzBgD,EAAcnB,EAAwCmB,YAEjDA,CACR,CAMGa,IAAAA,WAAAA,CACF,OAAO5E,KAAK+E,IACb,CAMGF,IAAAA,SAAAA,CACF,OAAO7E,KAAKgF,IACb,CAEDL,KAAWlI,EAAgB0I,EAAmCnF,KAAAA,CAM5DvD,EAAQiG,GAAiB1C,KAAMvD,EAAO0I,CAAAA,EAClC3I,GAAYC,CAAAA,EAIVA,IAAUwB,GAAWxB,GAAS,MAAQA,IAAU,IAC9CuD,KAAK8E,OAAqB7G,GAQ5B+B,KAAKoF,KAAAA,EAEPpF,KAAK8E,KAAmB7G,GACfxB,IAAUuD,KAAK8E,MAAoBrI,IAAUsB,GACtDiC,KAAKqF,EAAY5I,CAAAA,EAGTA,EAAqC,aAH5BA,OAInBuD,KAAKsF,EAAsB7I,CAAAA,EACjBA,EAAesE,WADEtE,OAiB3BuD,KAAKuF,EAAY9I,CAAAA,EACRG,GAAWH,CAAAA,EACpBuD,KAAKwF,EAAgB/I,CAAAA,EAGrBuD,KAAKqF,EAAY5I,CAAAA,CAEpB,CAEOgJ,EAAwB1F,EAAAA,CAC9B,OAAiBC,KAAK+E,KAAahB,WAAa2B,aAC9C3F,EACAC,KAAKgF,IAAAA,CAER,CAEOO,EAAY9I,EAAAA,CACduD,KAAK8E,OAAqBrI,IAC5BuD,KAAKoF,KAAAA,EAmCLpF,KAAK8E,KAAmB9E,KAAKyF,EAAQhJ,CAAAA,EAExC,CAEO4I,EAAY5I,EAAAA,CAKhBuD,KAAK8E,OAAqB7G,GAC1BzB,GAAYwD,KAAK8E,IAAAA,EAEC9E,KAAK+E,KAAaP,YAarBnC,KAAO5F,EAqBpBuD,KAAKuF,EAAYnJ,GAAEuJ,eAAelJ,CAAAA,CAAAA,EAStCuD,KAAK8E,KAAmBrI,CACzB,CAEO6I,EACNM,EAAAA,CAAAA,IAAAA,EAGA,GAAA,CAAMjI,OAACA,EAAQC,WAAgBH,CAAAA,EAAQmI,EAKjClC,EACY,OAATjG,GAAS,SACZuC,KAAK6F,KAAcD,CAAAA,GAClBnI,EAAK4C,KADauF,SAEhBnI,EAAK4C,GAAKT,GAASU,cAClBhC,GAAwBb,EAAKqI,EAAGrI,EAAKqI,EAAE,CAAA,CAAA,EACvC9F,KAAKF,OAAAA,GAETrC,GAEN,KAAiDwB,EAA5Ce,KAAK8E,QAAuC,MAAA/B,IAAvC+B,OAAuC/B,OAAAA,EAAAc,QAAeH,EAS7D1D,KAAK8E,KAAsCJ,EAAQ/G,CAAAA,MAC/C,CACL,IAAMoI,EAAW,IAAItC,GAAiBC,EAAsB1D,IAAAA,EACtDkE,EAAW6B,EAAS9B,EAAOjE,KAAKF,OAAAA,EAUtCiG,EAASrB,EAAQ/G,CAAAA,EAUjBqC,KAAKuF,EAAYrB,CAAAA,EACjBlE,KAAK8E,KAAmBiB,CACzB,CACF,CAIDF,KAAcD,EAAAA,CACZ,IAAIlC,EAAWxF,GAAc8H,IAAIJ,EAAOlI,OAAAA,EAIxC,OAHIgG,IAGJ,QAFExF,GAAc+H,IAAIL,EAAOlI,QAAUgG,EAAW,IAAI9D,GAASgG,CAAAA,CAAAA,EAEtDlC,CACR,CAEO8B,EAAgB/I,EAAAA,CAWjBC,GAAQsD,KAAK8E,IAAAA,IAChB9E,KAAK8E,KAAmB,CAAA,EACxB9E,KAAKoF,KAAAA,GAKP,IAAMc,EAAYlG,KAAK8E,KAEnBqB,EADA9B,EAAY,EAGhB,QAAW+B,KAAQ3J,EACb4H,IAAc6B,EAAUrH,OAK1BqH,EAAUxG,KACPyG,EAAW,IAAI5B,EACdvE,KAAKyF,EAAQnJ,GAAAA,CAAAA,EACb0D,KAAKyF,EAAQnJ,GAAAA,CAAAA,EACb0D,KACAA,KAAKF,OAAAA,CAAAA,EAKTqG,EAAWD,EAAU7B,CAAAA,EAEvB8B,EAASxB,KAAWyB,CAAAA,EACpB/B,IAGEA,EAAY6B,EAAUrH,SAExBmB,KAAKoF,KACHe,GAAiBA,EAASnB,KAAYR,YACtCH,CAAAA,EAGF6B,EAAUrH,OAASwF,EAEtB,CAaDe,KACEiB,EAA+BrG,KAAK+E,KAAaP,YACjD8B,EAAAA,CAAAA,IAAAA,EAGA,KADAvD,EAAA/C,KAAKuG,QAA4B,MAAAxD,IAA5BwD,QAA4BxD,EAAAK,KAAApD,KAAAA,GAAA,GAAasG,CAAAA,EACvCD,GAASA,IAAUrG,KAAKgF,MAAW,CACxC,IAAMwB,EAASH,EAAQ7B,YACjB6B,EAAoB1F,OAAAA,EAC1B0F,EAAQG,CACT,CACF,CAQDC,aAAavB,EAAAA,CAAAA,IAAAA,EACPlF,KAAK8D,OADEoB,SAETlF,KAAKiF,KAAgBC,GACrBnC,EAAA/C,KAAKuG,QAA4B,MAAAxD,IAA5BwD,QAA4BxD,EAAAK,KAAApD,KAAAkF,CAAAA,EAOpC,CAAA,EA2BGlD,GAAN,KAAMA,CAoCJnC,YACE6G,EACAxF,EACAxD,EACAkF,EACA9C,EAAAA,CAxCOE,KAAIvC,KAruCQ,EAqvCrBuC,KAAgB8E,KAA6B7G,EAM7C+B,KAAwB4D,KAAAA,OAoBtB5D,KAAK0G,QAAUA,EACf1G,KAAKkB,KAAOA,EACZlB,KAAK8D,KAAWlB,EAChB5C,KAAKF,QAAUA,EACXpC,EAAQmB,OAAS,GAAKnB,EAAQ,CAAA,IAAO,IAAMA,EAAQ,CAAA,IAAO,IAC5DsC,KAAK8E,KAAuBnI,MAAMe,EAAQmB,OAAS,CAAA,EAAG8H,KAAK,IAAI3K,MAAAA,EAC/DgE,KAAKtC,QAAUA,GAEfsC,KAAK8E,KAAmB7G,CAK3B,CA7BGiE,IAAAA,SAAAA,CACF,OAAOlC,KAAK0G,QAAQxE,OACrB,CAGG8B,IAAAA,MAAAA,CACF,OAAOhE,KAAK8D,KAASE,IACtB,CA8CDW,KACElI,EACA0I,EAAmCnF,KACnC4G,EACAC,EAAAA,CAEA,IAAMnJ,EAAUsC,KAAKtC,QAGjBoJ,EAAAA,GAEJ,GAAIpJ,IAAJ,OAEEjB,EAAQiG,GAAiB1C,KAAMvD,EAAO0I,EAAiB,CAAA,EACvD2B,EAAAA,CACGtK,GAAYC,CAAAA,GACZA,IAAUuD,KAAK8E,MAAoBrI,IAAUsB,EAC5C+I,IACF9G,KAAK8E,KAAmBrI,OAErB,CAEL,IAAMkB,EAASlB,EAGXwC,EAAG8H,EACP,IAHAtK,EAAQiB,EAAQ,CAAA,EAGXuB,EAAI,EAAGA,EAAIvB,EAAQmB,OAAS,EAAGI,IAClC8H,EAAIrE,GAAiB1C,KAAMrC,EAAOiJ,EAAc3H,CAAAA,EAAIkG,EAAiBlG,CAAAA,EAEjE8H,IAAMhJ,IAERgJ,EAAK/G,KAAK8E,KAAoC7F,CAAAA,GAEhD6H,IAAAA,EAAAA,CACGtK,GAAYuK,CAAAA,GAAMA,IAAO/G,KAAK8E,KAAoC7F,CAAAA,GACjE8H,IAAM9I,EACRxB,EAAQwB,EACCxB,IAAUwB,IACnBxB,IAAUsK,GAAK,IAAMrJ,EAAQuB,EAAI,CAAA,GAIlCe,KAAK8E,KAAoC7F,CAAAA,EAAK8H,CAElD,CACGD,GAAAA,CAAWD,GACb7G,KAAKgH,EAAavK,CAAAA,CAErB,CAGDuK,EAAavK,EAAAA,CACPA,IAAUwB,EACN+B,KAAK0G,QAAqBzE,gBAAgBjC,KAAKkB,IAAAA,EAmB/ClB,KAAK0G,QAAqBO,aAC9BjH,KAAKkB,KACJzE,GAAS,EAAA,CAGf,CAAA,EAIGoF,GAAN,cAA2BG,EAAAA,CAA3BnC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EACoBG,KAAIvC,KAp4CF,CA45CrB,CArBUuJ,EAAavK,EAAAA,CAmBnBuD,KAAK0G,QAAgB1G,KAAKkB,IAAAA,EAAQzE,IAAUwB,EAAAA,OAAsBxB,CACpE,CAAA,EAOGyK,GAAiC3L,GAClCA,GAAa6G,YACd,GAGEN,GAAN,cAAmCE,EAAAA,CAAnCnC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EACoBG,KAAIvC,KAv6CO,CA27C9B,CAjBUuJ,EAAavK,EAAAA,CAQhBA,GAASA,IAAUwB,EACf+B,KAAK0G,QAAqBO,aAC9BjH,KAAKkB,KACLgG,EAAAA,EAGIlH,KAAK0G,QAAqBzE,gBAAgBjC,KAAKkB,IAAAA,CAExD,CAAA,EAkBGa,GAAN,cAAwBC,EAAAA,CAGtBnC,YACE6G,EACAxF,EACAxD,EACAkF,EACA9C,EAAAA,CAEAqH,MAAMT,EAASxF,EAAMxD,EAASkF,EAAQ9C,CAAAA,EATtBE,KAAIvC,KA58CL,CA89ChB,CAKQkH,KACPyC,EACAjC,EAAmCnF,KAAAA,CAAAA,IAAAA,EAInC,IAFAoH,GACErE,EAAAL,GAAiB1C,KAAMoH,EAAajC,EAAiB,CAAA,KAAM,MAAApC,IAAN,OAAMA,EAAA9E,KACzCF,EAClB,OAEF,IAAMsJ,EAAcrH,KAAK8E,KAInBwC,EACHF,IAAgBnJ,GAAWoJ,IAAgBpJ,GAC3CmJ,EAAyCG,UACvCF,EAAyCE,SAC3CH,EAAyCI,OACvCH,EAAyCG,MAC3CJ,EAAyCK,UACvCJ,EAAyCI,QAIxCC,EACJN,IAAgBnJ,IACfoJ,IAAgBpJ,GAAWqJ,GAY1BA,GACFtH,KAAK0G,QAAQiB,oBACX3H,KAAKkB,KACLlB,KACAqH,CAAAA,EAGAK,GAIF1H,KAAK0G,QAAQkB,iBACX5H,KAAKkB,KACLlB,KACAoH,CAAAA,EAGJpH,KAAK8E,KAAmBsC,CACzB,CAEDS,YAAYC,EAAAA,CAAAA,IAAAA,EAAAA,EAC2B,OAA1B9H,KAAK8E,MAAqB,WACnC9E,KAAK8E,KAAiB1B,MAAKD,GAAclE,EAAde,KAAKF,WAAS,MAAAiD,IAATjD,OAASiD,OAAAA,EAAAgF,QAAnB3E,MAAmB2E,IAAAA,OAAAA,EAAQ/H,KAAK0G,QAASoB,CAAAA,EAE9D9H,KAAK8E,KAAyC+C,YAAYC,CAAAA,CAE9D,CAAA,EAIGrD,GAAN,KAAMA,CAiBJ5E,YACS6G,EACP9D,EACA9C,EAAAA,CAFOE,KAAO0G,QAAPA,EAjBA1G,KAAIvC,KAviDM,EAmjDnBuC,KAAwB4D,KAAAA,OAStB5D,KAAK8D,KAAWlB,EAChB5C,KAAKF,QAAUA,CAChB,CAGGkE,IAAAA,MAAAA,CACF,OAAOhE,KAAK8D,KAASE,IACtB,CAEDW,KAAWlI,EAAAA,CAOTiG,GAAiB1C,KAAMvD,CAAAA,CACxB,CAAA,EAqBUuL,GAAO,CAElBC,EAAuBrM,GACvBsM,EAASrM,GACTsM,EAAcjM,GACdkM,EAnnDkB,EAonDlBC,EAAkB1J,GAElB2J,EAAmB7E,GACnB8E,EAAa3L,GACb4L,EAAmB9F,GACnB+F,EAAYlE,GACZmE,EAAgB1G,GAChB2G,EAAuB7G,GACvB8G,EAAY7G,GACZ8G,EAAehH,GACfiH,EAAcrE,EAAAA,EAIVsE,GAEF1N,GAAO2N,uBACXD,KAAkBnJ,GAAU2E,EAAAA,IAI5BhB,GAAClI,GAAO4N,mBAAe,MAAA1F,KAAf0F,OAAe1F,GAAtBlI,GAAO4N,gBAAoB,CAAA,GAAIvJ,KAAK,OAAA,EAkCxB,IAAAwJ,GAAS,CACpBzM,EACA0M,EACArJ,IAAAA,CAAAA,IAAAA,EAAAA,EAUA,IAAMsJ,GAAgBrG,EAAAjD,GAASuJ,gBAAgB,MAAAtG,IAAhBsG,OAAgBtG,EAAAoG,EAG3CxG,EAAmByG,EAAkC,WASzD,GAAIzG,IAAJ,OAAwB,CACtB,IAAMkC,GAAU1B,EAAArD,GAASuJ,gBAAgB,MAAAlG,IAAhBkG,OAAgBlG,EAAA,KAGxCiG,EAAkC,WAAIzG,EAAO,IAAI4B,GAChD4E,EAAUzD,aAAapJ,GAAAA,EAAgBuI,CAAAA,EACvCA,EAAAA,OAEA/E,GAAW,CAAA,CAAA,CAEd,CAUD,OATA6C,EAAKgC,KAAWlI,CAAAA,EASTkG,CAAgB,YC7hEnB,IAAO2G,EAAP,cAA0BC,EAAAA,CAAhCC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EAgBWC,KAAAC,cAA+B,CAACC,KAAMF,IAAAA,EAEvCA,KAAWG,KAAAA,MA8FpB,CAzFoBC,kBAAAA,CAAAA,IAAAA,EAAAA,EACjB,IAAMC,EAAaC,MAAMF,iBAAAA,EAOzB,OADAG,GAAAC,EAAAR,KAAKC,eAAcQ,gBAAA,MAAAF,IAAAE,SAAAD,EAAAC,aAAiBJ,EAAYK,YACzCL,CACR,CASkBM,OAAOC,EAAAA,CAIxB,IAAMC,EAAQb,KAAKc,OAAAA,EACdd,KAAKe,aACRf,KAAKC,cAAce,YAAchB,KAAKgB,aAExCV,MAAMK,OAAOC,CAAAA,EACbZ,KAAKG,KAAcW,GAAOD,EAAOb,KAAKK,WAAYL,KAAKC,aAAAA,CACxD,CAsBQgB,mBAAAA,CAAAA,IAAAA,EACPX,MAAMW,kBAAAA,GACNV,EAAAP,KAAKG,QAAW,MAAAI,IAAXJ,QAAWI,EAAEW,aAAAA,EAAa,CAChC,CAqBQC,sBAAAA,CAAAA,IAAAA,EACPb,MAAMa,qBAAAA,GACNZ,EAAAP,KAAKG,QAAW,MAAAI,IAAXJ,QAAWI,EAAEW,aAAAA,EAAa,CAChC,CASSJ,QAAAA,CACR,OAAOM,CACR,CAAA,EAvGyBvB,EAAY,UAAA,GAG/BA,EAAgB,cAAA,IAwGzBW,GAAAa,WAAWC,4BAAwB,MAAAd,KAAxBc,QAAwBd,GAAAe,KAAAF,WAAG,CAACxB,WAAAA,CAAAA,CAAAA,EAGvC,IAAM2B,GAEFH,WAAWI,0BACfD,KAAkB,CAAC3B,WAAAA,CAAAA,CAAAA,IAiEnB6B,GAACC,WAAWC,sBAAkB,MAAAF,KAAlBE,OAAkBF,GAA7BC,WAAWC,mBAAuB,CAAA,GAAIC,KAAK,OAAA,ECtQ5C,IAAMC,GAAQC,OAAOC,IAAI,EAAA,EAGnBC,GAAqBC,GAAAA,CACzB,GAAKA,GAAgCC,IAAML,GAG3C,OAAQI,GAA+C,YAAC,EAP1D,IAiEME,GAAe,IAAIC,IAKZC,GACVC,GACD,CAACC,KAAkCC,IAAAA,CACjC,IAAMC,EAAID,EAAOE,OACbC,EACAC,EACEC,EAA+B,CAAA,EAC/BC,EAAgC,CAAA,EAGlCC,EAFAC,EAAI,EACJC,EAAAA,GAGJ,KAAOD,EAAIP,GAAG,CAKZ,IAJAM,EAAIR,EAAQS,CAAAA,EAKVA,EAAIP,IACFG,EAAeJ,EAAOQ,CAAAA,GACvBL,EAAcO,GAAkBN,CAAAA,KAF7BH,SAIJM,GAAKJ,EAAcJ,EAAAA,EAAUS,CAAAA,EAC7BC,EAAAA,GAGED,IAAMP,GACRK,EAAcK,KAAKP,CAAAA,EAErBC,EAAcM,KAAKJ,CAAAA,EACnBC,GACD,CAOD,GAJIA,IAAMP,GACRI,EAAcM,KAAKZ,EAAQE,CAAAA,CAAAA,EAGzBQ,EAAY,CACd,IAAMG,EAAMP,EAAcQ,KAAK,SAAA,GAC/Bd,EAAUJ,GAAamB,IAAIF,CAAAA,KADI,SAO5BP,EAAsBU,IAAMV,EAC7BV,GAAaqB,IACXJ,EACCb,EAAUM,CAAAA,GAGfL,EAASM,CACV,CACD,OAAOR,EAAQC,EAAAA,GAAYC,CAAAA,CAAO,EASzBiB,GAAOpB,GAAWqB,CAAAA,EAQlBC,GAAMtB,GAAWuB,EAAAA,SC3JxBC,KACJC,GANsCC,OAM/BC,mBAAe,MAAAF,KAAfE,OAAeF,OAAAA,GAAEG,UAAUC,mBAAoB,KAClD,CAACC,EAAuBC,IACtBD,EAAKD,iBAAiBE,CAAAA,EACxB,CAACD,EAAuBC,IACtBD,EACGE,cAAcD,CAAAA,EACdE,OACEC,GAA0BA,EAAKC,WAAaC,KAAKC,YAAAA,ECSjD,IAAAC,EAAW,CACtBC,UAAW,EACXC,MAAO,EACPC,SAAU,EACVC,kBAAmB,EACnBC,MAAO,EACPC,QAAS,CAAA,EAoCEC,EACgBC,GAC3B,IAAIC,KAAsE,CAExEC,gBAAqBF,EACrBC,OAAAA,CAAAA,GAQkBE,EARlBF,KAQkBE,CAkBpBC,YAAYC,EAAAA,CAAuB,CAG/BC,IAAAA,MAAAA,CACF,OAAOC,KAAKC,KAASF,IACtB,CAGDG,KACEC,EACAC,EACAC,EAAAA,CAEAL,KAAKM,KAASH,EACdH,KAAKC,KAAWG,EAChBJ,KAAKO,KAAmBF,CACzB,CAEDG,KAAUL,EAAYM,EAAAA,CACpB,OAAOT,KAAKU,OAAOP,EAAMM,CAAAA,CAC1B,CAIDC,OAAOC,EAAaF,EAAAA,CAClB,OAAOT,KAAKY,OAAAA,GAAUH,CAAAA,CACvB,CAAA,ECvHH,GAAA,CAAOI,EAAYC,EAAAA,EAAaC,GAkBnBC,GAAeC,GAC1BA,IAAU,MAAyB,OAATA,GAAS,UAA4B,OAATA,GAAS,WAnBjE,IAwCaC,GAAqC,CAChDC,EACAC,IAEAA,IAFAA,OAIKD,GAAuC,aAF5CC,OAGKD,GAAuC,aAAMC,EAKvCC,GACXF,GAAAA,CAAAA,IAAAA,EAEA,QAAOG,EAACH,GAA+C,cAAC,MAAAG,IAAD,OAACA,OAAAA,EAAEC,IAAK,IAAI,EAvDrE,IAgFaC,GAAsBC,GAChCA,EAA2BC,UADKD,OAG7BE,GAAe,IAAMC,SAASC,cAAc,EAAA,EAcrCC,EAAa,CACxBC,EACAC,EACAP,IAAAA,CAAAA,IAAAA,EAEA,IAAMQ,EAAiBF,EAAcG,KAAaC,WAE5CC,EACJJ,IADII,OACoBL,EAAcM,KAAYL,EAAQE,KAE5D,GAAIT,IAAJ,OAAwB,CACtB,IAAMa,EAAiBL,EAAWM,aAAaZ,GAAAA,EAAgBS,CAAAA,EACzDI,EAAeP,EAAWM,aAAaZ,GAAAA,EAAgBS,CAAAA,EAC7DX,EAAO,IAAIgB,GACTH,EACAE,EACAT,EACAA,EAAcW,OAAAA,CAEjB,KAAM,CACL,IAAMF,EAAef,EAAKY,KAAYM,YAChCC,EAAYnB,EAAKoB,KACjBC,EAAgBF,IAAcb,EACpC,GAAIe,EAAe,CAUjB,IAAIC,GATJC,EAAAvB,EAAKwB,QAA4B,MAAAD,IAA5BC,QAA4BD,EAAAE,KAAAzB,EAAAM,CAAAA,EAKjCN,EAAKoB,KAAWd,EAMdN,EAAK0B,OANSpB,SAObgB,EAAqBhB,EAAcqB,QAClCR,EAAWQ,MAEb3B,EAAK0B,KAA0BJ,CAAAA,CAElC,CACD,GAAIP,IAAYJ,GAAWU,EAAe,CACxC,IAAIO,EAAqB5B,EAAKS,KAC9B,KAAOmB,IAAUb,GAAS,CACxB,IAAMc,EAAsBD,EAAQV,YAC/BV,EAAWM,aAAac,EAAQjB,CAAAA,EACrCiB,EAAQC,CACT,CACF,CACF,CAED,OAAO7B,CAAI,EAmBA8B,EAAoB,CAC/B9B,EACA+B,EACAC,EAAmChC,KAEnCA,EAAKiC,KAAWF,EAAOC,CAAAA,EAChBhC,GAKHkC,GAAc,CAAA,EAaPC,GAAoB,CAACnC,EAAY+B,EAAiBG,KAC5DlC,EAAKoC,KAAmBL,EAgBdM,GAAqBrC,GAAoBA,EAAKoC,KAO9CE,GAActC,GAAAA,CAAAA,IAAAA,GACzBuB,EAAAvB,EAAK0B,QAAyB,MAAAH,IAAzBG,QAAyBH,EAAAE,KAAAzB,EAAAA,GAAG,EAAO,EACxC,IAAI4B,EAA0B5B,EAAKS,KAC7B8B,EAA6BvC,EAAKY,KAAYM,YACpD,KAAOU,IAAUW,GAAK,CACpB,IAAMV,EAA2BD,EAAQV,YACnCU,EAAsBY,OAAAA,EAC5BZ,EAAQC,CACT,CAAA,EAGUY,GAAazC,GAAAA,CACxBA,EAAK0C,KAAAA,CAAS,ECnHhB,IAAMC,GAAiC,CACrCC,EACAC,IAAAA,CAAAA,IAAAA,EAAAA,EAEA,IAAMC,EAAWF,EAAOG,KACxB,GAAID,IAAJ,OACE,MAAA,GAEF,QAAWE,KAAOF,GAShBG,GAAAC,EAACF,GAA2D,QAT5CF,MAS4CK,IAAA,QAAAA,EAAA,KAAAC,EAC1DP,EAAAA,EACA,EAGFF,GAA+BK,EAAKH,CAAAA,EAEtC,MAAA,EAAW,EASPQ,GAAkCL,GAAAA,CACtC,IAAIJ,EAAQE,EACZ,EAAG,CACD,IAAKF,EAASI,EAAIM,QAAlB,OACE,MAEFR,EAAWF,EAAOG,KAClBD,EAASS,OAAOP,CAAAA,EAChBA,EAAMJ,CAAAA,OACCE,GAAUU,OAAS,EAAG,EAG3BC,GAA6BT,GAAAA,CAGjC,QAASJ,EAASA,EAASI,EAAIM,KAAWN,EAAMJ,EAAQ,CACtD,IAAIE,EAAWF,EAAOG,KACtB,GAAID,IAAJ,OACEF,EAAOG,KAA2BD,EAAW,IAAIY,YACxCZ,EAASa,IAAIX,CAAAA,EAGtB,MAEFF,EAASc,IAAIZ,CAAAA,EACba,GAAqBjB,CAAAA,CACtB,CAAA,EAUH,SAASkB,GAAyCC,EAAAA,CAC5CC,KAAKjB,OADuCgB,QAE9CV,GAA+BW,IAAAA,EAC/BA,KAAKV,KAAWS,EAChBN,GAA0BO,IAAAA,GAE1BA,KAAKV,KAAWS,CAEpB,CAuBA,SAASE,GAEPpB,EACAqB,EAAAA,GACAC,EAAgB,EAAA,CAEhB,IAAMC,EAAQJ,KAAKK,KACbvB,EAAWkB,KAAKjB,KACtB,GAAID,IAAJ,QAA8BA,EAASU,OAAS,EAGhD,GAAIU,EACF,GAAII,MAAMC,QAAQH,CAAAA,EAIhB,QAASI,EAAIL,EAAeK,EAAIJ,EAAMK,OAAQD,IAC5C7B,GAA+ByB,EAAMI,CAAAA,EAAAA,EAAI,EACzCnB,GAA+Be,EAAMI,CAAAA,CAAAA,OAE9BJ,GAAS,OAIlBzB,GAA+ByB,EAAAA,EAAyB,EACxDf,GAA+Be,CAAAA,QAGjCzB,GAA+BqB,KAAMnB,CAAAA,CAEzC,CAKA,IAAMgB,GAAwBb,GAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EACvBA,EAAkB0B,MAAQC,EAASC,SACtC1B,GAAA2B,EAAC7B,GAAkB8B,QADmBF,MACnBE,IAAAA,SAAAA,EAAAA,KACjBb,KACFhB,GAAA8B,EAAC/B,GAAkBgC,QADjBf,MACiBe,IAAAA,SAAAA,EAAAA,KAA8BlB,IAClD,EAoBmBmB,GAAhB,cAAuCC,CAAAA,CAA7CC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EAYWnB,KAAwBjB,KAAAA,MAgFlC,CAzEUqC,KACPC,EACAzC,EACA0C,EAAAA,CAEAC,MAAMH,KAAaC,EAAMzC,EAAQ0C,CAAAA,EACjC7B,GAA0BO,IAAAA,EAC1BA,KAAKnB,YAAcwC,EAAKG,IACzB,CAcQC,KACP5C,EACA6C,EAAAA,GAAsB,CAAA,IAAAtC,EAAA,EAElBP,IAAgBmB,KAAKnB,cACvBmB,KAAKnB,YAAcA,EACfA,GACFK,EAAAc,KAAK2B,eAAW,MAAAzC,IAAXyC,QAAWzC,EAAA0C,KAAA5B,IAAAA,GAEhBf,EAAAe,KAAK6B,gBAAY,MAAA5C,IAAZ4C,QAAY5C,EAAA2C,KAAA5B,IAAAA,GAGjB0B,IACF/C,GAA+BqB,KAAMnB,CAAAA,EACrCQ,GAA+BW,IAAAA,EAElC,CAYD8B,SAAS1B,EAAAA,CACP,GAAI2B,GAAmB/B,KAAKgC,IAAAA,EAC1BhC,KAAKgC,KAAOC,KAAW7B,EAAOJ,IAAAA,MACzB,CAML,IAAMkC,EAAY,CAAA,GAAKlC,KAAKgC,KAAO3B,IAAAA,EACnC6B,EAAUlC,KAAKmC,IAAAA,EAAqB/B,EACnCJ,KAAKgC,KAAyBC,KAAWC,EAAWlC,KAAM,CAAA,CAC5D,CACF,CAQS6B,cAAAA,CAAiB,CACjBF,aAAAA,CAAgB,CAAA,ECjXf,IAAAS,GAAaC,MACxBC,EACAC,IAAAA,CAEA,cAAiBC,KAAKF,EACpB,GAA4B,MAAjBC,EAASC,CAAAA,IAApB,GACE,MAEH,EASUC,GATV,KASUA,CAEXC,YAAYC,EAAAA,CACVC,KAAKC,EAAOF,CACb,CAIDG,YAAAA,CACEF,KAAKC,EAAAA,MACN,CAIDE,UAAUJ,EAAAA,CACRC,KAAKC,EAAOF,CACb,CAIDK,OAAAA,CACE,OAAOJ,KAAKC,CACb,CAAA,EAMUI,GANV,KAMUA,CAAbP,aAAAA,CACUE,KAAQM,EAAAA,OACRN,KAAQO,EAAAA,MAwBjB,CAhBCC,KAAAA,CACE,OAAOR,KAAKM,CACb,CAIDG,OAAAA,CAAAA,IAAAA,GACEC,EAAAV,KAAKM,KAAL,MAAAI,IAAKJ,SAALN,KAAKM,EAAa,IAAIK,QAASC,GAAaZ,KAAKO,EAAWK,CAAAA,EAC7D,CAIDC,QAAAA,CAAAA,IAAAA,GACEH,EAAAV,KAAKO,KAAQ,MAAAG,IAARH,QAAQG,EAAAI,KAAAd,IAAAA,EACbA,KAAKM,EAAWN,KAAKO,EAAAA,MACtB,CAAA,ECtEG,IAAOQ,GAAP,cAAqCC,EAAAA,CAA3CC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EAEUC,KAAAC,KAAa,IAAIC,GAAcF,IAAAA,EAC/BA,KAAAG,KAAW,IAAIC,EA4ExB,CAxECC,OAAUC,EAAyBC,EAAAA,CACjC,OAAOC,CACR,CAEQC,OACPC,EAAAA,CACCJ,EAAOK,CAAAA,EAAAA,CASR,GALKX,KAAKY,aACRZ,KAAKa,aAAAA,EAIHP,IAAUN,KAAKc,KACjB,OAEFd,KAAKc,KAAUR,EACf,IAAIS,EAAI,EACR,CAAOd,KAAYe,EAAUb,KAAUc,CAAAA,EAAUjB,KAmCjD,OA9BAkB,GAAWZ,EAAOa,MAAOC,GAAAA,CAGvB,KAAOH,EAAOI,IAAAA,GAAAA,MACNJ,EAAOI,IAAAA,EAKf,IAAMC,EAAQN,EAASO,MAAAA,EACvB,GAAID,IAAJ,OAAyB,CAGvB,GAAIA,EAAMR,OAAYR,EACpB,MAAA,GAOEK,IAPK,SAQPS,EAAIT,EAAOS,EAAGL,CAAAA,GAGhBO,EAAME,YAAYJ,EAAGL,CAAAA,EACrBA,GACD,CACD,MAAA,EAAW,CAAA,EAENP,CACR,CAGSgB,YAAYlB,EAAgBmB,EAAAA,CACpCzB,KAAK0B,SAASpB,CAAAA,CACf,CAEQO,cAAAA,CACPb,KAAKC,KAAW0B,WAAAA,EAChB3B,KAAKG,KAASyB,MAAAA,CACf,CAEQC,aAAAA,CACP7B,KAAKC,KAAW6B,UAAU9B,IAAAA,EAC1BA,KAAKG,KAAS4B,OAAAA,CACf,CAAA,EAqBUC,GAAeC,EAAUpC,EAAAA,MC/CzBqC,GAAcC,EAhD3B,cAAmCC,EAAAA,CAIjCC,YAAYC,EAAAA,CAEV,GADAC,MAAMD,CAAAA,EACFA,EAASE,OAASC,EAASC,MAC7B,MAAUC,MAAM,mDAAA,CAEnB,CAGQC,OAAOC,EAAiBC,EAAAA,CAE/B,OADAC,KAAKC,KAAcH,EACZN,MAAMK,OAAOC,EAAMC,CAAAA,CAC3B,CAGkBG,YAAYC,EAAgBC,EAAAA,CAGzCA,IAAU,GACZC,GAAUL,KAAKC,IAAAA,EAGjB,IAAMK,EAAUC,EAAWP,KAAKC,IAAAA,EAChCO,EAAkBF,EAASH,CAAAA,CAC5B,CAAA,CAAA,ECbH,IAAMM,GACJC,GAEAC,GAAyBD,CAAAA,EAAUA,EAAmB,WAAEE,EAAIF,EAAOG,QAiFxDC,GAAQC,EA/ErB,cAA6BC,CAAAA,CAI3BC,YAAYC,EAAAA,CACVC,MAAMD,CAAAA,EAJAE,KAAAC,GAAiB,IAAIC,OAK5B,CAEDC,OAAOC,EAAAA,CAGL,MAAO,CAACA,CAAAA,CACT,CAEQC,OAAOC,EAAAA,CAA2BF,CAAAA,EAAAA,CACzC,IAAMG,EAAYC,GAAiBR,KAAKS,EAAAA,EACpCpB,GAA6BW,KAAKS,EAAAA,EAClC,KACEC,EAAOF,GAAiBJ,CAAAA,EAAKf,GAA6Be,CAAAA,EAAK,KAKrE,GAAIG,IAAc,OAASG,IAAS,MAAQH,IAAcG,GAAO,CAE/D,IACMC,EADYC,GAAkBN,CAAAA,EACRO,IAAAA,EACxBC,EAAsBd,KAAKC,GAAec,IAAIR,CAAAA,EAClD,GAAIO,IAAJ,OAAuC,CACrC,IAAME,EAAWC,SAASC,uBAAAA,EAC1BJ,EAAsBX,GAAOgB,EAASH,CAAAA,EACtCF,EAAoBM,aAAAA,EAAa,EACjCpB,KAAKC,GAAeoB,IAAId,EAAWO,CAAAA,CACpC,CAEDQ,GAAkBR,EAAqB,CAACH,CAAAA,CAAAA,EACxCY,EAAWT,EAAAA,OAAgCH,CAAAA,CAC5C,CAID,GAAID,IAAS,KAAM,CACjB,GAAIH,IAAc,MAAQA,IAAcG,EAAM,CAC5C,IAAMI,EAAsBd,KAAKC,GAAec,IAAIL,CAAAA,EACpD,GAAII,IAAJ,OAAuC,CAErC,IAGMU,EAHYZ,GAChBE,CAAAA,EAE2BD,IAAAA,EAE7BY,GAAUnB,CAAAA,EACViB,EAAWjB,EAAAA,OAA0BkB,CAAAA,EACrCF,GAAkBhB,EAAe,CAACkB,CAAAA,CAAAA,CACnC,CACF,CAEDxB,KAAKS,GAASL,CACf,MACCJ,KAAKS,GAAAA,OAEP,OAAOT,KAAKG,OAAOC,CAAAA,CACpB,CAAA,CAAA,MCsBUsB,GAAWC,EArGxB,cAAgCC,CAAAA,CAQ9BC,YAAYC,EAAAA,CAAAA,IAAAA,EAEV,GADAC,MAAMD,CAAAA,EAEJA,EAASE,OAASC,EAASC,WAC3BJ,EAASK,OAAS,WACjBC,EAAAN,EAASO,WADDF,MACCE,IAAAA,OAAAA,OAAAA,EAASC,QAAoB,EAEvC,MAAUC,MACR,oGAAA,CAIL,CAEDC,OAAOC,EAAAA,CAEL,MACE,IACAC,OAAOC,KAAKF,CAAAA,EACTG,OAAQC,GAAQJ,EAAUI,CAAAA,CAAAA,EAC1BC,KAAK,GAAA,EACR,GAEH,CAEQC,OAAOC,EAAAA,CAAsBP,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAEpC,GAAIQ,KAAKC,KAAT,OAAyC,CACvCD,KAAKC,GAAmB,IAAIC,IACxBH,EAAKX,UADmBc,SAE1BF,KAAKG,GAAiB,IAAID,IACxBH,EAAKX,QACFS,KAAK,GAAA,EACLO,MAAM,IAAA,EACNT,OAAQU,GAAMA,IAAM,EAANA,CAAAA,GAGrB,QAAWnB,KAAQM,EACbA,EAAUN,CAAAA,GAAAA,EAA+B,GAArBC,EAAAa,KAAKG,MAAgB,MAAAhB,IAAhBgB,SAAgBhB,EAAAmB,IAAIpB,CAAAA,IAC/Cc,KAAKC,GAAiBM,IAAIrB,CAAAA,EAG9B,OAAOc,KAAKT,OAAOC,CAAAA,CACpB,CAED,IAAMgB,EAAYT,EAAKU,QAAQD,UAK/BR,KAAKC,GAAiBS,QAASxB,GAAAA,CACvBA,KAAQM,IACZgB,EAAUG,OAAOzB,CAAAA,EACjBc,KAAKC,GAAkBW,OAAO1B,CAAAA,EAC/B,CAAA,EAIH,QAAWA,KAAQM,EAAW,CAG5B,IAAMqB,EAAAA,CAAAA,CAAUrB,EAAUN,CAAAA,EAExB2B,IAAUb,KAAKC,GAAiBK,IAAIpB,CAAAA,GACd,GAArB4B,EAAAd,KAAKG,MAAgB,MAAAW,IAAhBX,SAAgBW,EAAAR,IAAIpB,CAAAA,IAEtB2B,GACFL,EAAUD,IAAIrB,CAAAA,EACdc,KAAKC,GAAiBM,IAAIrB,CAAAA,IAE1BsB,EAAUG,OAAOzB,CAAAA,EACjBc,KAAKC,GAAiBW,OAAO1B,CAAAA,GAGlC,CACD,OAAO6B,CACR,CAAA,CAAA,EChGH,IAAMC,GAAe,CAAA,EAyERC,GAAQC,EAvErB,cAA6BC,CAAAA,CAA7BC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EACUC,KAAcC,GAAYN,EA2BnC,CAzBCO,OAAOC,EAAiBC,EAAAA,CACtB,OAAOA,EAAAA,CACR,CAEQC,OAAOC,EAAAA,CAAcC,EAAOH,CAAAA,EAAAA,CACnC,GAAII,MAAMC,QAAQF,CAAAA,GAEhB,GACEC,MAAMC,QAAQT,KAAKC,EAAAA,GACnBD,KAAKC,GAAeS,SAAWH,EAAMG,QACrCH,EAAMI,MAAM,CAACC,EAAGC,IAAMD,IAAOZ,KAAKC,GAAkCY,CAAAA,CAAAA,EAEpE,OAAOC,UAEAd,KAAKC,KAAmBM,EAEjC,OAAOO,EAOT,OAFAd,KAAKC,GAAiBO,MAAMC,QAAQF,CAAAA,EAASC,MAAMO,KAAKR,CAAAA,EAASA,EACvDP,KAAKE,OAAOK,EAAOH,CAAAA,CAE9B,CAAA,CAAA,MCoDUY,GAAOC,EA3EpB,cAA4BC,CAAAA,CAC1BC,YAAYC,EAAAA,CAEV,GADAC,MAAMD,CAAAA,EAGFA,EAASE,OAASC,EAASC,UAC3BJ,EAASE,OAASC,EAASE,WAC3BL,EAASE,OAASC,EAASG,kBAG7B,MAAUC,MACR,gEAAA,EAGJ,GAAA,CAAKC,GAAmBR,CAAAA,EACtB,MAAUO,MAAM,sDAAA,CAEnB,CAEDE,OAAOC,EAAAA,CACL,OAAOA,CACR,CAEQC,OAAOC,EAAAA,CAAsBF,CAAAA,EAAAA,CACpC,GAAIA,IAAUG,GAAYH,IAAUI,EAClC,OAAOJ,EAET,IAAMK,EAAUH,EAAKG,QACfC,EAAOJ,EAAKI,KAElB,GAAIJ,EAAKV,OAASC,EAASC,UAEzB,GAAIM,IAAWK,EAAgBC,CAAAA,EAC7B,OAAOH,UAEAD,EAAKV,OAASC,EAASG,mBAChC,GAAA,CAAA,CAAMI,IAAUK,EAAQE,aAAaD,CAAAA,EACnC,OAAOH,UAEAD,EAAKV,OAASC,EAASE,WAC5BU,EAAQG,aAAaF,CAAAA,IAAiBN,EAAPS,GACjC,OAAON,EAMX,OADAO,GAAkBR,CAAAA,EACXF,CACR,CAAA,CAAA,EC7BH,IAAMW,GAGF,IAAIC,QA+GKC,GAAMC,EA3GnB,cAA2BC,EAAAA,CAKzBC,OAAOC,EAAAA,CACL,OAAOC,CACR,CAEQC,OAAOC,EAAAA,CAAoBP,CAAAA,EAAAA,CAAAA,IAAAA,EAClC,IAAMQ,EAAaR,IAAQS,KAAKL,EAahC,OAZII,GAAcC,KAAKL,IAAnBI,QAGFC,KAAKC,GAAAA,MAAgBC,GAEnBH,GAAcC,KAAKG,KAAuBH,KAAKI,MAGjDJ,KAAKL,EAAOJ,EACZS,KAAKK,IAAWC,EAAAR,EAAKS,WAAS,MAAAD,IAATC,OAASD,OAAAA,EAAAE,KAC9BR,KAAKC,GAAiBD,KAAKI,GAAWN,EAAKW,OAAAA,GAEtCb,CACR,CAEOK,GAAgBQ,EAAAA,CAAAA,IAAAA,EACtB,GAAyB,OAAdT,KAAKL,GAAS,WAAY,CAUnC,IAAMe,GAAUJ,EAAAN,KAAKK,MAAQ,MAAAC,IAARD,OAAQC,EAAIK,WAC7BC,EACFvB,GAAiCwB,IAAIH,CAAAA,EACnCE,IADmCF,SAErCE,EAAyB,IAAItB,QAC7BD,GAAiCyB,IAAIJ,EAASE,CAAAA,GAE5CA,EAAuBC,IAAIb,KAAKL,CAAAA,IAFYiB,QAG9CZ,KAAKL,EAAKoB,KAAKf,KAAKK,GAAAA,MAAUH,EAEhCU,EAAuBE,IAAId,KAAKL,EAAMc,CAAAA,EAElCA,IAFkCA,QAGpCT,KAAKL,EAAKoB,KAAKf,KAAKK,GAAUI,CAAAA,CAEjC,MACET,KAAKL,EAAsBqB,MAAQP,CAEvC,CAEWN,IAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EACV,OAA4B,OAAdH,KAAKL,GAAS,YAEWsB,EADnC5B,GACGwB,KAAIP,EAAAN,KAAKK,MAAY,MAAAC,IAAZD,OAAYC,EAAAK,UAAAA,KAAW,MAAAO,IAAXP,OAAWO,OAAAA,EAC/BL,IAAIb,KAAKL,CAAAA,GACbwB,EAAAnB,KAAKL,KAAI,MAAAwB,IAAJxB,OAAIwB,OAAAA,EAAEH,KAChB,CAEQI,cAAAA,CAKHpB,KAAKG,KAAuBH,KAAKI,IACnCJ,KAAKC,GAAAA,MAAgBC,CAExB,CAEQmB,aAAAA,CAGPrB,KAAKC,GAAgBD,KAAKI,EAAAA,CAC3B,CAAA,CAAA,ECnGH,IAAMkB,GAAc,CAACC,EAAiBC,EAAeC,IAAAA,CACnD,IAAMC,EAAM,IAAIC,IAChB,QAASC,EAAIJ,EAAOI,GAAKH,EAAKG,IAC5BF,EAAIG,IAAIN,EAAKK,CAAAA,EAAIA,CAAAA,EAEnB,OAAOF,CAAG,EAqcCI,GAASC,EAlctB,cAA8BC,CAAAA,CAG5BC,YAAYC,EAAAA,CAEV,GADAC,MAAMD,CAAAA,EACFA,EAASE,OAASC,EAASC,MAC7B,MAAUC,MAAM,+CAAA,CAEnB,CAEOC,GACNC,EACAC,EACAC,EAAAA,CAEA,IAAIC,EACAD,IADAC,OAEFD,EAAWD,EACFA,IADEA,SAEXE,EAAQF,GAEV,IAAMG,EAAO,CAAA,EACPC,EAAS,CAAA,EACXC,EAAQ,EACZ,QAAWC,KAAQP,EACjBI,EAAKE,CAAAA,EAASH,EAAQA,EAAMI,EAAMD,CAAAA,EAASA,EAC3CD,EAAOC,CAAAA,EAASJ,EAAUK,EAAMD,CAAAA,EAChCA,IAEF,MAAO,CACLD,OAAAA,EACAD,KAAAA,CAAAA,CAEH,CAQDI,OACER,EACAC,EACAC,EAAAA,CAEA,OAAOO,KAAKV,GAAkBC,EAAOC,EAAiBC,CAAAA,EAAUG,MACjE,CAEQK,OACPC,EAAAA,CACCX,EAAOC,EAAiBC,CAAAA,EAAAA,CAAAA,IAAAA,EAQzB,IAAMU,EAAWC,GACfF,CAAAA,EAAAA,CAEKN,OAAQS,EAAWV,KAAMW,CAAAA,EAAWN,KAAKV,GAC9CC,EACAC,EACAC,CAAAA,EAQF,GAAA,CAAKc,MAAMC,QAAQL,CAAAA,EAEjB,OADAH,KAAKS,GAAYH,EACVD,EAQT,IAAMK,GAAWC,EAAAX,KAAKS,MAAL,MAAAE,IAAKF,OAALE,EAAAX,KAAKS,GAAc,CAAA,EAK9BG,EAAwB,CAAA,EAM1BC,EACAC,EAGAC,EAAU,EACVC,EAAUb,EAASc,OAAS,EAC5BC,EAAU,EACVC,EAAUd,EAAUY,OAAS,EAsMjC,KAAOF,GAAWC,GAAWE,GAAWC,GACtC,GAAIhB,EAASY,CAAAA,IAAa,KAGxBA,YACSZ,EAASa,CAAAA,IAAa,KAG/BA,YACSN,EAAQK,CAAAA,IAAaT,EAAQY,CAAAA,EAEtCN,EAASM,CAAAA,EAAWE,EAClBjB,EAASY,CAAAA,EACTV,EAAUa,CAAAA,CAAAA,EAEZH,IACAG,YACSR,EAAQM,CAAAA,IAAaV,EAAQa,CAAAA,EAEtCP,EAASO,CAAAA,EAAWC,EAClBjB,EAASa,CAAAA,EACTX,EAAUc,CAAAA,CAAAA,EAEZH,IACAG,YACST,EAAQK,CAAAA,IAAaT,EAAQa,CAAAA,EAEtCP,EAASO,CAAAA,EAAWC,EAClBjB,EAASY,CAAAA,EACTV,EAAUc,CAAAA,CAAAA,EAEZE,EAAWnB,EAAeU,EAASO,EAAU,CAAA,EAAIhB,EAASY,CAAAA,CAAAA,EAC1DA,IACAI,YACST,EAAQM,CAAAA,IAAaV,EAAQY,CAAAA,EAEtCN,EAASM,CAAAA,EAAWE,EAClBjB,EAASa,CAAAA,EACTX,EAAUa,CAAAA,CAAAA,EAEZG,EAAWnB,EAAeC,EAASY,CAAAA,EAAWZ,EAASa,CAAAA,CAAAA,EACvDA,IACAE,YAEIL,IAMJ,SAHEA,EAAmBzC,GAAYkC,EAASY,EAASC,CAAAA,EACjDL,EAAmB1C,GAAYsC,EAASK,EAASC,CAAAA,GAE9CH,EAAiBS,IAAIZ,EAAQK,CAAAA,CAAAA,EAI3B,GAAKF,EAAiBS,IAAIZ,EAAQM,CAAAA,CAAAA,EAIlC,CAIL,IAAMO,EAAWT,EAAiBU,IAAIlB,EAAQY,CAAAA,CAAAA,EACxCO,EAAUF,IAAVE,OAAmCtB,EAASoB,CAAAA,EAAY,KAC9D,GAAIE,IAAY,KAAM,CAGpB,IAAMC,EAAUL,EAAWnB,EAAeC,EAASY,CAAAA,CAAAA,EACnDK,EAAkBM,EAASrB,EAAUa,CAAAA,CAAAA,EACrCN,EAASM,CAAAA,EAAWQ,CACrB,MAECd,EAASM,CAAAA,EAAWE,EAAkBK,EAASpB,EAAUa,CAAAA,CAAAA,EACzDG,EAAWnB,EAAeC,EAASY,CAAAA,EAAWU,CAAAA,EAG9CtB,EAASoB,CAAAA,EAAsB,KAEjCL,GACD,MAvBCS,GAAWxB,EAASa,CAAAA,CAAAA,EACpBA,SALAW,GAAWxB,EAASY,CAAAA,CAAAA,EACpBA,IA8BN,KAAOG,GAAWC,GAAS,CAGzB,IAAMO,EAAUL,EAAWnB,EAAeU,EAASO,EAAU,CAAA,CAAA,EAC7DC,EAAkBM,EAASrB,EAAUa,CAAAA,CAAAA,EACrCN,EAASM,GAAAA,EAAaQ,CACvB,CAED,KAAOX,GAAWC,GAAS,CACzB,IAAMS,EAAUtB,EAASY,GAAAA,EACrBU,IAAY,MACdE,GAAWF,CAAAA,CAEd,CAMD,OAHAzB,KAAKS,GAAYH,EAEjBsB,GAAkB1B,EAAeU,CAAAA,EAC1BiB,CACR,CAAA,CAAA,ECtZH,IAAMC,GAAY,YAEZC,GAAgB,KAAOD,GAqHhBE,GAAWC,EAjHxB,cAAgCC,CAAAA,CAG9BC,YAAYC,EAAAA,CAAAA,IAAAA,EAEV,GADAC,MAAMD,CAAAA,EAEJA,EAASE,OAASC,EAASC,WAC3BJ,EAASK,OAAS,WACjBC,EAAAN,EAASO,WADDF,MACCE,IAAAA,OAAAA,OAAAA,EAASC,QAAoB,EAEvC,MAAUC,MACR,4GAAA,CAIL,CAEDC,OAAOC,EAAAA,CACL,OAAOC,OAAOC,KAAKF,CAAAA,EAAWG,OAAO,CAACC,EAAOC,IAAAA,CAC3C,IAAMC,EAAQN,EAAUK,CAAAA,EACxB,OAAIC,GAAS,KACJF,EAcFA,EAAQ,GALfC,EAAOA,EAAKE,SAAS,GAAA,EACjBF,EACAA,EACGG,QAAQ,oCAAqC,KAAA,EAC7CC,YAAAA,CAAAA,IACmBH,CAAAA,GAAQ,EACjC,EAAA,CACJ,CAEQI,OAAOC,EAAAA,CAAsBX,CAAAA,EAAAA,CACpC,GAAA,CAAMI,MAACA,CAAAA,EAASO,EAAKC,QAErB,GAAIC,KAAKC,KAAT,OAAiD,CAC/CD,KAAKC,GAA2B,IAAIC,IACpC,QAAWrB,KAAQM,EACjBa,KAAKC,GAAyBE,IAAItB,CAAAA,EAEpC,OAAOmB,KAAKd,OAAOC,CAAAA,CACpB,CAKDa,KAAKC,GAA0BG,QAASvB,GAAAA,CAElCM,EAAUN,CAAAA,GAAS,OACrBmB,KAAKC,GAA0BI,OAAOxB,CAAAA,EAClCA,EAAKa,SAAS,GAAA,EAChBH,EAAMe,eAAezB,CAAAA,EAKpBU,EAAcV,CAAAA,EAAQ,GAE1B,CAAA,EAIH,QAAWA,KAAQM,EAAW,CAC5B,IAAMM,EAAQN,EAAUN,CAAAA,EACxB,GAAIY,GAAS,KAAM,CACjBO,KAAKC,GAAyBE,IAAItB,CAAAA,EAClC,IAAM0B,EACa,OAAVd,GAAU,UAAYA,EAAMe,SAASrC,EAAAA,EAC1CU,EAAKa,SAAS,GAAA,GAAQa,EACxBhB,EAAMkB,YACJ5B,EACA0B,EACKd,EAAiBiB,MAAM,EAAA,GAjFvB,EAkFAjB,EACLc,EAAcrC,GAAY,EAAA,EAI3BqB,EAAcV,CAAAA,EAAQY,CAE1B,CACF,CACD,OAAOkB,CACR,CAAA,CAAA,MCvFUC,GAAkBC,EA1B/B,cAAuCC,CAAAA,CAGrCC,YAAYC,EAAAA,CAEV,GADAC,MAAMD,CAAAA,EACFA,EAASE,OAASC,EAASC,MAC7B,MAAUC,MAAM,oDAAA,CAEnB,CAEDC,OAAOC,EAAAA,CACL,OAAIC,KAAKC,KAAsBF,EACtBG,GAETF,KAAKC,GAAoBF,EAClBI,SAASC,WAAWL,EAASM,QAAAA,EAAS,EAC9C,CAAA,CAAA,ECdG,IAAOC,GAAP,cAAmCC,CAAAA,CAOvCC,YAAYC,EAAAA,CAEV,GADAC,MAAMD,CAAAA,EAJAE,KAAMC,GAAYC,EAKpBJ,EAASK,OAASC,EAASC,MAC7B,MAAUC,MAELN,KAAKH,YAA2CU,cADnD,uCAAA,CAKL,CAEDC,OAAOC,EAAAA,CACL,GAAIA,IAAUP,GAAWO,GAAS,KAEhC,OADAT,KAAKU,GAAAA,OACGV,KAAKC,GAASQ,EAExB,GAAIA,IAAUE,EACZ,OAAOF,EAET,GAAoB,OAATA,GAAS,SAClB,MAAUH,MAELN,KAAKH,YAA2CU,cADnD,mCAAA,EAKJ,GAAIE,IAAUT,KAAKC,GACjB,OAAOD,KAAKU,GAEdV,KAAKC,GAASQ,EACd,IAAMG,EAAU,CAACH,CAAAA,EAKjB,OAHCG,EAAgBC,IAAMD,EAGfZ,KAAKU,GAAkB,CAI7BI,WAAiBd,KAAKH,YACnBkB,WACHH,QAAAA,EACAI,OAAQ,CAAA,CAAA,CAEX,CAAA,EAlDMrB,GAAaY,cAAG,aAChBZ,GAAUoB,WAJC,EAAA,IAkEPE,GAAaC,EAAUvB,EAAAA,EChEpC,IAAMwB,GAAN,cAAiCC,EAAAA,CAAAA,EACfD,GAAaE,cAAG,YAChBF,GAAUG,WAJT,EAAA,IAiBNC,GAAYC,EAAUL,EAAAA,ECfnC,IAAMM,GAAaC,GAAAA,CACTC,GAAYD,CAAAA,GAA8C,OAAhCA,EAAuBE,MAAS,WAG9DC,GAAY,WAELC,GAAP,cAA8BC,EAAAA,CAApCC,aAAAA,CAAAA,MAAAA,GAAAA,SAAAA,EACUC,KAAmBC,MAAWL,GAC9BI,KAAQE,MAAc,CAAA,EACtBF,KAAAG,KAAa,IAAIC,GAAcJ,IAAAA,EAC/BA,KAAAK,KAAW,IAAIC,EAsFxB,CApFCC,UAAUC,EAAAA,CAAAA,IAAAA,EACR,OAAsCC,EAA/BD,EAAKE,KAAMjB,GAAAA,CAAOD,GAAUC,CAAAA,CAAAA,KAAG,MAAAkB,IAAHlB,OAAGkB,EAAIC,CAC3C,CAEQC,OAAOC,EAAaN,EAAAA,CAC3B,IAAMO,EAAiBf,KAAKE,MACxBc,EAAiBD,EAAeE,OACpCjB,KAAKE,MAAWM,EAEhB,IAAMU,EAAWlB,KAAKG,KAChBgB,EAASnB,KAAKK,KAIfL,KAAKoB,aACRpB,KAAKqB,aAAAA,EAGP,QAASZ,EAAI,EAAGA,EAAID,EAAKS,QAAAA,EAEnBR,EAAIT,KAAKC,OAFkBQ,IAAK,CAMpC,IAAMa,EAAQd,EAAKC,CAAAA,EAGnB,GAAA,CAAKjB,GAAU8B,CAAAA,EAIb,OAHAtB,KAAKC,MAAsBQ,EAGpBa,EAILb,EAAIO,GAAkBM,IAAUP,EAAeN,CAAAA,IAMnDT,KAAKC,MAAsBL,GAC3BoB,EAAiB,EAMjBO,QAAQC,QAAQF,CAAAA,EAAO3B,KAAK8B,MAAOC,GAAAA,CAIjC,KAAOP,EAAOQ,IAAAA,GAAAA,MACNR,EAAOQ,IAAAA,EAKf,IAAMC,EAAQV,EAASW,MAAAA,EACvB,GAAID,IAAJ,OAAyB,CACvB,IAAME,EAAQF,EAAM1B,MAAS6B,QAAQT,CAAAA,EAIjCQ,EAAAA,IAAcA,EAAQF,EAAM3B,QAC9B2B,EAAM3B,MAAsB6B,EAC5BF,EAAMI,SAASN,CAAAA,EAElB,CAAA,CAAA,EAEJ,CAED,OAAOd,CACR,CAEQS,cAAAA,CACPrB,KAAKG,KAAW8B,WAAAA,EAChBjC,KAAKK,KAAS6B,MAAAA,CACf,CAEQC,aAAAA,CACPnC,KAAKG,KAAWiC,UAAUpC,IAAAA,EAC1BA,KAAKK,KAASgC,OAAAA,CACf,CAAA,EAwBUC,GAAQC,EAAU1C,EAAAA,EClI/B,IAAM2C,GAAqB,IAAI,QAQ/B,SAASC,GAA0BC,EAAOC,EAAY,CACpD,IAAIC,EAAQD,EACZ,KAAOC,GAAO,CACZ,GAAIJ,GAAmB,IAAII,CAAK,IAAMF,EACpC,MAAO,GAETE,EAAQ,OAAO,eAAeA,CAAK,CACrC,CACA,MAAO,EACT,CAOO,SAASC,EAAYH,EAAO,CACjC,OAAOC,GAAc,CACnB,GAAIF,GAA0BC,EAAOC,CAAU,EAC7C,OAAOA,EAET,IAAMG,EAAaJ,EAAMC,CAAU,EACnC,OAAAH,GAAmB,IAAIM,EAAYJ,CAAK,EACjCI,CACT,CACF,CCtBA,IAAMC,GAAU,QAEVC,GAAW,OAAO,yBAA8B,OAAO,uBAA4B,CAAC,GACrFA,GAAS,SAASD,EAAO,GAC5BC,GAAS,KAAKD,EAAO,EAIvB,IAAME,GAAyB,CAAC,CAAC,WAAW,UAAU,cAOhDC,GAAoCC,GAExC,cAAiCA,CAAW,CAM1C,WAAW,gBAAiB,CAC1B,MAAO,CAAC,CACV,CAEA,WAAW,uBAAwB,CACjC,OAAOJ,EACT,CAOA,WAAW,mBAAoB,CAC7B,OAAO,KAAK,mBACd,CAOA,WAAW,kBAAkBK,EAAO,CAClC,KAAK,oBAAsBA,CAC7B,CAOA,WAAW,eAAgB,CACzB,OAAO,KAAK,eACd,CAEA,WAAW,cAAcC,EAAQ,CAC/B,KAAK,gBAAkBA,CACzB,CAIA,eAAeC,EAAO,CACpB,MAAM,EAEN,KAAK,cAAgB,KAAK,eAAiB,MAC7C,CAOA,IAAI,UAAW,CAEb,OAAO,KAAK,YAAY,UAC1B,CAOA,IAAI,SAASC,EAAU,CAErB,KAAK,YAAY,WAAaA,CAChC,CAEA,kBAAmB,CACjB,GAAM,CAAE,eAAAC,EAAgB,kBAAAC,EAAmB,cAAAC,CAAc,EACb,KAAK,YAajD,GAVE,CAAC,KAAK,UAEL,KAAK,WAAa,KAAK,YAAY,YAClC,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,YAAa,YAAY,EAO9C,CACxB,KAAK,SAAWT,GAAyB,IAAI,sBAA0B,eACvE,OAAW,CAACU,EAASC,CAAK,IAAK,OAAO,QAAQJ,CAAc,EAC1D,KAAK,oBAAoBG,EAASC,CAAK,CAE3C,CAGA,IAAMC,EAAU,CACd,KAAM,OACN,GAAGJ,EACH,eAAgB,KAAK,SACrB,SAAU,KAAK,QACjB,EAEMK,EAAc,KAAK,aAAaD,CAAO,EAC7C,OAAIZ,KACF,KAAK,cAAc,cAAgBa,GAGjCA,aAAuB,aACzBC,GAAYD,EAAaJ,CAAa,EACtC,KAAK,cAAc,aAAe,KAAK,cAAc,cAAgBI,EAAY,YAG5EA,CACT,CAEA,oBAAoBH,EAAS,CAG3B,OAFaV,GAAyB,KAAK,WAAa,UAE5C,cAAcU,CAAO,CACnC,CAQA,oBAAoBA,EAASC,EAAO,CAClC,IAAMI,EAAkB,KAAK,SAAS,IAAIL,CAAO,EAcjD,OAbIK,GAAmBf,KAA2B,IAASe,IAAoBJ,GAE7E,QAAQ,MACN,CACE,sCAAsCD,CAAO,mEAC7C,sDACA,yFACA,oIACA,kKACA,sFACF,EAAE,KAAK;AAAA,CAAI,CACb,EAEGK,EAGE,KAAK,SAAS,IAAIL,CAAO,EAFvB,KAAK,SAAS,OAAOA,EAASC,CAAK,CAG9C,CASA,iBAAiBD,EAAS,CAExB,OAAO,KAAK,YAAY,iBAAiBA,CAAO,CAClD,CASA,OAAO,iBAAiBA,EAAS,CAE/B,OAAO,KAAK,WAAW,IAAIA,CAAO,EAAIA,EAAU,MAClD,CACF,EAEWM,GAAsBC,EAAYhB,EAAiC,EChMhF,IAAMiB,GAA8BC,GAGlC,cAAcA,CAAW,CACvB,WAAW,YAAa,CACtB,MAAO,CACL,SAAU,CACR,KAAM,QACN,QAAS,EACX,CACF,CACF,CAEA,aAAc,CACZ,MAAM,EAEN,KAAK,uBAAyB,GAE9B,KAAK,wBAA0B,GAE/B,KAAK,oBAAsB,GAC3B,KAAK,SAAW,EAClB,CAEA,yBAA0B,CACpB,KAAK,yBAA2B,KAClC,KAAK,uBAAyB,GAC9B,KAAK,oBAAsB,KAAK,SAChC,KAAK,sBAAsB,EAAI,EAEnC,CAEA,4BAA6B,CACvB,KAAK,yBAA2B,KAClC,KAAK,uBAAyB,GAC9B,KAAK,sBAAsB,KAAK,mBAAmB,EAEvD,CAMA,sBAAsBC,EAAO,CAC3B,KAAK,wBAA0B,GAC/B,KAAK,SAAWA,EAChB,KAAK,wBAA0B,EACjC,CAMA,cAAcC,EAAMC,EAAU,CAC5B,MAAM,cAAcD,EAAMC,CAAQ,EAC9BD,IAAS,aACP,KAAK,0BACP,KAAK,oBAAsB,KAAK,UAE9B,KAAK,WAAa,IAAS,KAAK,yBAA2B,IAC7D,KAAK,sBAAsB,EAAI,EAGrC,CACF,EAEWE,GAAgBC,EAAYN,EAA2B,ECjEpE,IAAMO,GAA0CC,GAG9C,cAAcC,GAAcD,CAAU,CAAE,CACtC,WAAW,YAAa,CACtB,MAAO,CAIL,SAAU,CACR,KAAM,OACN,QAAS,GACT,UAAW,UACb,CACF,CACF,CAEA,aAAc,CACZ,MAAM,EAEN,KAAK,wBAA0B,GAE/B,KAAK,oBAAsB,EAC3B,KAAK,sBAAsB,CAAC,CAC9B,CAEA,yBAA0B,CACxB,MAAM,wBAAwB,EAC1B,KAAK,yBAA2B,IAAS,KAAK,UAAY,OAC5D,KAAK,oBAAsB,KAAK,SAEpC,CAEA,4BAA6B,CAC3B,MAAM,2BAA2B,EAC7B,KAAK,yBAA2B,IAClC,KAAK,sBAAsB,KAAK,mBAAmB,CAEvD,CAMA,sBAAsBE,EAAO,CAC3B,KAAK,wBAA0B,GAC/B,KAAK,SAAWA,EAChB,KAAK,wBAA0B,EACjC,CAMA,cAAcC,EAAMC,EAAU,CAC5B,MAAM,cAAcD,EAAMC,CAAQ,EAE9BD,IAAS,aACP,KAAK,SACP,KAAK,sBAAsB,EAAE,EAE7B,KAAK,sBAAsB,KAAK,mBAAmB,GAInDA,IAAS,aACP,KAAK,yBAA2B,KAAK,UAAY,OACnD,KAAK,oBAAsB,KAAK,UAG9B,KAAK,WAAa,IAAM,KAAK,yBAA2B,IAC1D,KAAK,sBAAsB,EAAE,EAGnC,CAGA,aAAaE,EAAmB,CAC9B,MAAM,aAAaA,CAAiB,EAGhC,KAAK,UACP,KAAK,sBAAsB,EAAE,CAEjC,CACF,EAEWC,GAA4BC,EAAYR,EAAuC,ECnF5F,IAAMS,GAA0BC,GAE9B,cAAwBA,CAAW,CAIjC,IAAI,OAAQ,CACV,MAAO,CAAC,CACV,CAEA,aAAc,CACZ,MAAM,EAEN,KAAK,eAAiB,IAAI,IAAI,IAAI,CACpC,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,kBAAkB,CACzB,CAMA,gBAAgBC,EAAU,CAKxB,IAAMC,GAHyB,CAAC,CAAC,WAAW,UAAU,cACR,KAAK,WAAa,UAE1B,cAAc,KAAK,EAEnD,CAAE,cAAAC,EAAe,KAAAC,CAAK,EAAI,KAAK,cACrC,OAAAC,GAAOJ,EAAUC,EAAkB,CAAE,cAAAC,EAAe,KAAAC,CAAK,CAAC,EACnD,MAAM,KAAKF,EAAiB,UAAU,CAC/C,CAKA,mBAAoB,CACb,KAAK,yBACR,OAAO,KAAK,KAAK,KAAK,EAAE,QAAQI,GAAY,CAS1C,GAAI,EAPFA,IAAa,GAIT,MAAM,KAAK,KAAK,QAAQ,EAAE,KAAKC,GAAM,CAACA,EAAG,aAAa,MAAM,CAAC,EAC7D,MAAM,KAAK,KAAK,QAAQ,EAAE,KAAKA,GAAMA,EAAG,OAASD,CAAQ,GAEpC,CACzB,IAAME,EAAc,KAAK,MAAMF,CAAQ,EAAE,EAErCG,EAAQ,CAAC,EAETC,GAAiBF,CAAW,EAC9BC,EAAQ,KAAK,gBAAgBD,CAAW,EAC9B,MAAM,QAAQA,CAAW,IACnCC,EAAQ,CAAsBD,CAAY,GAG5CC,EAAM,QAAQE,GAAQ,CACdA,aAAgB,OAGlBA,aAAgB,SAAWL,IAAa,IAC1CK,EAAK,aAAa,OAAQL,CAAQ,EAEpC,KAAK,YAAYK,CAAI,EACrB,KAAK,eAAe,IAAIL,CAAQ,EAClC,CAAC,CACH,CACF,CAAC,EACD,KAAK,uBAAyB,GAElC,CAOA,eAAeA,EAAU,CACvB,OAAO,KAAK,eAAe,IAAIA,CAAQ,CACzC,CACF,EAEWM,GAAYC,EAAYd,EAAuB,ECnG5D,SAASe,GAAYC,EAAS,gBAAiB,CAC7C,IAAMC,EAA0D,OAAQ,OACxE,GAAID,IAAW,WACb,OAAOC,EAET,IAAMC,EAAS,OAAO,UAChBC,EAAaD,EAAO,OACpBE,EAAU,OAAkD,OAAQ,IAAS,IAC7EC,EAAWH,EAAO,UAAU,QAAQ,MAAM,EAAI,GAC9CI,EAAcJ,EAAO,UAAU,MAAM,OAAO,EAElD,GAAIF,IAAW,MACb,OAAOM,EAGT,GAAIN,IAAW,gBACb,OACEC,IAAe,MACf,OAAOA,EAAe,KACtBE,IAAe,eACfC,IAAY,IACZC,IAAa,EAKnB,CAEO,IAAME,GAAmB,CAC9B,OAAQ,UAAU,KAAK,OAAO,UAAU,SAAS,EACjD,SAAUR,GAAY,EACtB,YAAaA,GAAY,KAAK,EAC9B,WAAYA,GAAY,UAAU,EAClC,MAAO,UAAU,WAAW,QAAQ,KAAK,IAAM,EACjD,ECjCO,SAASS,GAAKC,EAAS,GAAI,CAEhC,MAAO,GADaA,EAAO,OAAS,EAAI,GAAGA,CAAM,IAAM,EAClC,GAAG,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,EAAG,EAAE,CAAC,EAClE,CCNA,IAAMC,GACgF,OAChFC,GAAkB,IAAI,QAK5B,SAASC,GAAoCC,EAAM,CAC7CH,GAA2B,2BAA6B,CAACC,GAAgB,IAAIE,CAAI,IACnFH,GAA2B,0BAA0BG,CAAI,EACzDF,GAAgB,IAAIE,EAAM,MAAS,EAEvC,CAOA,IAAMC,GAA2BC,GAE/B,cAAyBA,CAAW,CAElC,WAAW,YAAa,CACtB,MAAO,CACL,QAAS,CAAE,KAAM,QAAS,QAAS,EAAK,EACxC,eAAgB,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,iBAAkB,CAC/E,CACF,CAEA,aAAc,CACZ,MAAM,EAON,KAAK,QAAU,GAQf,KAAK,eAAiB,EACxB,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,8BAA8B,CACrC,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3B,KAAK,8BAA8B,CACrC,CAKA,OAAQ,CACN,KAAK,gBAAgB,MAAM,CAC7B,CAKA,MAAO,CACL,KAAK,gBAAgB,KAAK,CAC5B,CAUA,IAAI,gBAAiB,CAGnB,OAAmC,KAAK,YAAc,SAAS,cAAc,OAAO,CACtF,CAKA,WAAY,CAGV,GAFA,KAAK,QAAU,GAEX,OAAOL,GAA2B,2BAA8B,WAClE,KAAK,eAAiB,KAAK,eAAe,aAAa,0BAA0B,MAEjF,IAAI,CAEF,KAAK,eAAiB,KAAK,eAAe,QAAQ,gBAAgB,CACpE,MAAY,CACV,KAAK,eAAiB,EACxB,CACJ,CAKA,UAAW,CACT,KAAK,QAAU,GACf,KAAK,eAAiB,EACxB,CAKA,+BAAgC,CAC9BE,GAAoC,KAAK,YAAY,CAAC,EAMtD,KAAK,kBAAoBI,GAAM,CAC7BA,EAAG,gBAAgB,EACnB,KAAK,cAAc,IAAI,MAAM,OAAO,CAAC,CACvC,EACA,KAAK,eAAe,iBAAiB,QAAS,KAAK,iBAAiB,EAMpE,KAAK,iBAAmBA,GAAM,CAC5BA,EAAG,gBAAgB,EACnB,KAAK,cAAc,IAAI,MAAM,MAAM,CAAC,CACtC,EACA,KAAK,eAAe,iBAAiB,OAAQ,KAAK,gBAAgB,EAMlE,KAAK,oBAAsBA,GAAM,CAC/BA,EAAG,gBAAgB,EACnB,KAAK,UAAU,EACf,KAAK,cAAc,IAAI,MAAM,UAAW,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CAC5E,EACA,KAAK,eAAe,iBAAiB,UAAW,KAAK,mBAAmB,EAMxE,KAAK,qBAAuBA,GAAM,CAChCA,EAAG,gBAAgB,EACnB,KAAK,SAAS,EACd,KAAK,cAAc,IAAI,MAAM,WAAY,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CAC7E,EACA,KAAK,eAAe,iBAAiB,WAAY,KAAK,oBAAoB,CAC5E,CAKA,+BAAgC,CAC9B,KAAK,eAAe,oBAClB,QACmD,KAAK,iBAC1D,EACA,KAAK,eAAe,oBAClB,OACmD,KAAK,gBAC1D,EACA,KAAK,eAAe,oBAClB,UACmD,KAAK,mBAC1D,EACA,KAAK,eAAe,oBAClB,WACmD,KAAK,oBAC1D,CACF,CACF,EAOWC,GAAaC,EAAYJ,EAAwB,EC5L9D,IAAMK,GAAqB,CACzB,KAAK,4BACL,KAAK,2BACL,KAAK,2BAA6B,KAAK,2BACzC,EAYO,SAASC,GAA+BC,EAAqB,CAAE,QAAAC,CAAQ,EAAI,CAAC,EAAG,CAMpF,IAAMC,EAA2C,CAACC,EAAGC,IAAM,CAEzD,IAAMC,EAAMF,EAAE,wBAAwBC,CAAC,EAGvC,OAAIN,GAAmB,SAASO,CAAG,EAC1BC,GAAiB,OAAS,GAAK,EAEjCA,GAAiB,OAAS,EAAI,EACvC,EAEMC,EAAiBP,EAAoB,OAAOQ,GAAMA,CAAE,EAC1D,OAAAD,EAAe,KAAKL,CAAwC,EACxDD,GACFM,EAAe,QAAQ,EAElBA,CACT,CC3BO,IAAME,GAAN,KAAkB,CAEvB,YAAYC,EAAO,CAKjB,KAAK,KAAO,cAMZ,KAAK,UAAYA,CACnB,CAEA,UAAW,CACT,OAAO,KAAK,UAAU,CAAE,KAAM,KAAK,KAAM,UAAW,KAAK,SAAU,CAAC,CACtE,CACF,ECfA,IAAMC,GAAqCC,GAEzC,cAAcA,CAAW,CACvB,aAAc,CACZ,MAAM,EAMN,KAAK,iBAAmB,MAC1B,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,cACH,IAAI,YAAY,wBAAyB,CACvC,OAAQ,CAAE,QAAS,IAAK,EACxB,QAAS,EACX,CAAC,CACH,CACF,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3B,KAAK,wBAAwB,CAC/B,CAMA,yBAA0B,CACpB,KAAK,kBACP,KAAK,iBAAiB,kBAA0D,IAAK,CAEzF,CACF,EAEWC,GAAuBC,EAAYH,EAAkC,EC/BlF,IAAMI,GAAiCC,GAGrC,cAA+BC,GAAqBC,GAAcC,GAAUH,CAAU,CAAC,CAAC,CAAE,CAExF,WAAW,YAAa,CACtB,MAAO,CACL,KAAM,CAAE,KAAM,OAAQ,QAAS,EAAK,EACpC,SAAU,CAAE,KAAM,QAAS,UAAW,WAAY,QAAS,EAAK,EAChE,MAAO,OACP,YAAa,CAAE,KAAM,QAAS,UAAW,gBAAiB,QAAS,EAAK,EACxE,SAAU,CAAE,KAAM,OAAQ,UAAW,WAAY,EACjD,WAAY,CAAE,UAAW,EAAM,EAC/B,mBAAoB,CAAE,UAAW,EAAM,EACvC,oBAAqB,CAAE,UAAW,EAAM,EACxC,mBAAoB,CAAE,UAAW,EAAM,EACvC,yBAA0B,CAAE,UAAW,EAAM,CAC/C,CACF,CAOA,IAAI,OAAQ,CACV,OAAO,KAAK,SAAY,KAAK,YAAc,KAAK,WAAW,aAAgB,EAC7E,CAKA,IAAI,MAAMI,EAAU,CAClB,IAAMC,EAAW,KAAK,MAEtB,KAAK,QAAUD,EACf,KAAK,cAAc,QAASC,CAAQ,CACtC,CAOA,IAAI,UAAW,CACb,OAAO,KAAK,YAAe,KAAK,eAAiB,KAAK,cAAc,aAAgB,EACtF,CAKA,IAAI,SAASD,EAAU,CACrB,IAAMC,EAAW,KAAK,SAEtB,KAAK,WAAaD,EAClB,KAAK,cAAc,WAAYC,CAAQ,CACzC,CAMA,IAAI,WAAY,CACd,OAAO,KAAK,aAAe,KAAK,OAAS,KAAK,MAAQ,EACxD,CAKA,IAAI,UAAUC,EAAO,CAEnB,KAAK,YAAcA,CACrB,CAKA,IAAI,OAAQ,CACV,MAAO,CACL,GAAG,MAAM,MACT,MAAO,IAAM,CACX,IAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5C,OAAAA,EAAM,YAAc,KAAK,MAClBA,CACT,EACA,YAAa,IAAM,CACjB,IAAMC,EAAW,SAAS,cAAc,KAAK,EAC7C,OAAAA,EAAS,YAAc,KAAK,SACrBA,CACT,CACF,CACF,CAOA,IAAI,YAAa,CACf,OAA4C,KAAK,qBAAqB,OAAO,CAC/E,CAMA,IAAI,YAAa,CACf,OAAmC,KAAK,qBAAqB,OAAO,CACtE,CAMA,IAAI,eAAgB,CAClB,OAAmC,KAAK,qBAAqB,WAAW,CAC1E,CAMA,IAAI,eAAgB,CAClB,OAA8C,KAAK,qBAAqB,UAAU,CACpF,CAEA,aAAc,CACZ,MAAM,EAQN,KAAK,KAAO,GAUZ,KAAK,SAAW,GAOhB,KAAK,MAAQ,GAMb,KAAK,YAAc,GAOnB,KAAK,SAAW,GAqBhB,KAAK,SAAWC,GAAK,KAAK,SAAS,EAMnC,KAAK,mBAAqB,CAAC,EAM3B,KAAK,oBAAsB,CAAC,EAM5B,KAAK,mBAAqB,QAa1B,KAAK,yBAA2B,GAEhC,KAAK,iBACH,sBACmD,KAAK,2BAC1D,EAEA,KAAK,cAAgB,KAAK,cAAc,KAAK,IAAI,CACnD,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,wBAAwB,EAC7B,KAAK,qBAAqB,EAC1B,KAAK,sCAAsC,EAEvC,KAAK,YACP,KAAK,WAAW,iBAAiB,QAAS,KAAK,aAAa,CAEhE,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EACvB,KAAK,YACP,KAAK,WAAW,oBAAoB,QAAS,KAAK,aAAa,CAEnE,CAGA,QAAQC,EAAmB,CACzB,MAAM,QAAQA,CAAiB,EAE3BA,EAAkB,IAAI,oBAAoB,GAC5C,KAAK,kBACH,kBACA,KAAK,mBACL,KAAK,0BACP,EAGEA,EAAkB,IAAI,qBAAqB,GAC7C,KAAK,kBACH,mBACA,KAAK,oBACL,KAAK,2BACP,EAGEA,EAAkB,IAAI,OAAO,GAAK,KAAK,aACzC,KAAK,WAAW,YAAc,KAAK,OAGjCA,EAAkB,IAAI,UAAU,GAAK,KAAK,gBAC5C,KAAK,cAAc,YAAc,KAAK,UAGpCA,EAAkB,IAAI,MAAM,GAC9B,KAAK,cAEH,IAAI,YAAY,4BAA6B,CAC3C,OAAQ,CAAE,QAASA,EAAkB,IAAI,MAAM,EAAG,QAAS,KAAK,IAAK,EACrE,QAAS,EACX,CAAC,CACH,CAEJ,CAGA,uCAAwC,CACtC,KAAK,uCAAuC,CAC9C,CAGA,yBAA0B,CACpB,KAAK,YACP,KAAK,WAAW,UAAU,IAAI,cAAc,CAEhD,CAGA,sBAAuB,CACrB,GAAM,CAAE,WAAAC,EAAY,WAAAC,EAAY,cAAAC,EAAe,cAAAC,CAAc,EAAI,KAE7DH,IACFA,EAAW,GAAKA,EAAW,IAAM,KAAK,UAEpCC,IACFA,EAAW,aAAa,MAAO,KAAK,QAAQ,EAC5C,KAAK,oBAAoBA,EAAY,CAAE,SAAU,OAAQ,CAAC,GAExDC,GACF,KAAK,qBAAqBA,EAAe,CAAE,SAAU,WAAY,CAAC,EAEhEC,IAEF,KAAK,iBAAiB,UAAW,IAAM,CACrCA,EAAc,aAAa,YAAa,QAAQ,CAClD,CAAC,EACD,KAAK,iBAAiB,WAAY,IAAM,CACtCA,EAAc,aAAa,YAAa,WAAW,CACrD,CAAC,EAED,KAAK,qBAAqBA,EAAe,CAAE,SAAU,UAAW,CAAC,GAEnE,KAAK,uCAAuC,CAC9C,CAUA,uCACEC,EAAkB,CAAC,SAAU,SAAU,SAAU,OAAO,EACxD,CACAA,EAAgB,QAAQC,GAAkB,CACxC,IAAMC,EAAU,KAAK,qBAAqBD,CAAc,EACpDC,IACEA,EAAQ,aAAa,YAAY,GACnC,KAAK,oBAAoBA,EAAS,CAAE,SAAUD,CAAe,CAAC,EAE5DC,EAAQ,aAAa,kBAAkB,GACzC,KAAK,qBAAqBA,EAAS,CAAE,SAAUD,CAAe,CAAC,EAGrE,CAAC,CACH,CAWA,kBAAkBE,EAAUC,EAAOC,EAAS,CAC1C,GAAI,KAAK,WAAY,CACnB,GAAIA,EAAS,CACX,IAAMC,EAAcF,EAAM,OAAOG,GAAK,KAAK,SAASA,CAAC,CAAC,EAChDC,EAAeJ,EAAM,OAAOG,GAAK,CAAC,KAAK,SAASA,CAAC,CAAC,EAGxDH,EAAQ,CAAC,GAAGK,GAA+BH,CAAW,EAAG,GAAGE,CAAY,CAC1E,CACA,IAAME,EAASN,EAAM,IAAIG,GAAKA,EAAE,EAAE,EAAE,KAAK,GAAG,EAC5C,KAAK,WAAW,aAAaJ,EAAUO,CAAM,CAC/C,CACF,CAqCA,QAAS,CACP,OAAOC;AAAA,6CACgC,KAAK,kBAAkB,CAAC;AAAA,6CACxB,KAAK,kBAAkB,CAAC;AAAA,OAEjE,CAMA,mBAAoB,CAClB,OAAOA,KAAQ,KAAK,eAAe,CAAC,IAAI,KAAK,kBAAkB,CAAC,GAClE,CAMA,mBAAoB,CAClB,OAAOA,KAAQ,KAAK,oBAAoB,CAAC,IAAI,KAAK,kBAAkB,CAAC,GACvE,CAOA,gBAAiB,CACf,OAAOA;AAAA;AAAA;AAAA;AAAA,OAKT,CAOA,mBAAoB,CAClB,OAAOA;AAAA;AAAA;AAAA;AAAA,OAKT,CAMA,qBAAsB,CACpB,OAAOA;AAAA;AAAA,YAED,KAAK,0BAA0B,CAAC;AAAA;AAAA,cAE9B,KAAK,0BAA0B,CAAC,IAAI,KAAK,yBAAyB,CAAC;AAAA,cACnE,KAAK,0BAA0B,CAAC;AAAA;AAAA,YAElC,KAAK,yBAAyB,CAAC;AAAA;AAAA,OAGvC,CAOA,2BAA4B,CAC1B,OAAOA;AAAA;AAAA;AAAA;AAAA,OAKT,CAMA,2BAA4B,CAC1B,OAAQ,MAAM,KAAK,KAAK,QAAQ,EAAE,KAAKC,GAASA,EAAM,OAAS,QAAQ,EAEnED;AAAA;AAAA;AAAA;AAAA,YADAE,CAMN,CAOA,0BAA2B,CACzB,OAAOF;AAAA;AAAA;AAAA;AAAA,OAKT,CAMA,2BAA4B,CAC1B,OAAQ,MAAM,KAAK,KAAK,QAAQ,EAAE,KAAKC,GAASA,EAAM,OAAS,QAAQ,EAEnED;AAAA;AAAA;AAAA;AAAA,YADAE,CAMN,CAOA,0BAA2B,CACzB,OAAOF;AAAA;AAAA;AAAA;AAAA,OAKT,CAOA,mBAAoB,CAClB,OAAOA;AAAA;AAAA;AAAA;AAAA,OAKT,CAQA,SAASG,EAAiC,KAAM,WAAY,CAC1D,IAAIvB,EAAQuB,EAMZ,GALwB,KAAM,sBAAsBC,KAClDxB,EAA4B,KAAM,WAAW,WAI3C,OAAOA,GAAU,UAAYA,IAAU,MAAQ,EAAEA,aAAiB,MACpE,MAAO,CAAC,OAAO,KAAKA,CAAK,EAAE,OAK7B,IAAMyB,EAAgB,OAAOzB,GAAU,WAAaA,IAAU,GAAK,OAAO,MAAMA,CAAK,GAGrF,MAAO,CAACA,GAAS,CAACyB,GAAiB,EAFZ,OAAOzB,GAAU,WAAaA,IAAU,GAGjE,CA0EA,WAAW,QAAS,CAClB,MAAO,CACL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAgEF,CACF,CASA,6BAA8B,CAC5B,MAAO,CAAC,KAAK,cAAe,KAAK,aAAa,CAChD,CAOA,oBAAoBf,EAAS,CAAE,SAAAgB,EAAW,GAAI,QAAAb,EAAU,EAAK,EAAI,CAAC,EAAG,CAEnEH,EAAQ,GAAKA,EAAQ,IAAM,GAAGgB,CAAQ,IAAI,KAAK,QAAQ,GAClD,KAAK,mBAAmB,SAAShB,CAAO,IAC3C,KAAK,mBAAqB,CAAC,GAAG,KAAK,mBAAoBA,CAAO,EAG9D,KAAK,2BAA6B,EAAQG,EAE9C,CAMA,yBAAyBH,EAAS,CAC5B,KAAK,mBAAmB,SAASA,CAAO,IAC1C,KAAK,mBAAmB,OAAO,KAAK,mBAAmB,QAAQA,CAAO,EAAG,CAAC,EAC1E,KAAK,mBAAqB,CAAC,GAAG,KAAK,kBAAkB,EAGrD,KAAK,2BAA6B,GAEtC,CAOA,qBAAqBA,EAAS,CAAE,SAAAgB,EAAW,GAAI,QAAAb,EAAU,EAAK,EAAI,CAAC,EAAG,CAEpEH,EAAQ,GAAKA,EAAQ,IAAM,GAAGgB,CAAQ,IAAI,KAAK,QAAQ,GAClD,KAAK,oBAAoB,SAAShB,CAAO,IAC5C,KAAK,oBAAsB,CAAC,GAAG,KAAK,oBAAqBA,CAAO,EAGhE,KAAK,4BAA8B,EAAQG,EAE/C,CAMA,0BAA0BH,EAAS,CAC7B,KAAK,oBAAoB,SAASA,CAAO,IAC3C,KAAK,oBAAoB,OAAO,KAAK,oBAAoB,QAAQA,CAAO,EAAG,CAAC,EAC5E,KAAK,oBAAsB,CAAC,GAAG,KAAK,mBAAmB,EAGvD,KAAK,2BAA6B,GAEtC,CAMA,qBAAqBiB,EAAU,CAC7B,OAAqC,MAAM,KAAK,KAAK,QAAQ,EAAG,KAC9DC,GAAMA,EAAG,OAASD,CACpB,CACF,CAEA,wCAAyC,CAGnC,KAAK,qBAAuB,UAUhC,KAAK,iCAAmC,GACxC,KAAK,cACH,IAAI,YAAY,sBAAuB,CACrC,QAAS,GACT,OAA+C,CAC7C,SAAU,CAAC,IAAI,EACf,WAAY,GACZ,kBAAmB,EACrB,CACF,CAAC,CACH,EACF,CASA,mCAAmCE,EAAI,CAAC,CAKxC,4BAA4BA,EAAI,CAG9B,KAAK,mCAAmCA,CAAE,EAE1C,IAAMC,EAAUD,EAAG,QAAUA,EAAG,OAAO,SAAYA,EAAG,OAChDE,EACJ,KAAK,0BAA4B,KAAK,qBAAuB,eAG/D,GAAID,IAAW,KACb,OAQFD,EAAG,yBAAyB,EAQ5B,IAAMG,EADU,KAAK,qBAAuB,SACN,CAAC,KAAK,iCACtCC,EAA2BJ,EAAG,QAAUA,EAAG,OAAO,WAYxD,GAXIG,GAAsBC,GAWtB,CAAC,KAAK,wBAAwBH,CAAM,EACtC,OAMF,IAAII,EAAiB,CAAC,EACjBH,IACHG,EAAkBL,EAAG,QAAUA,EAAG,OAAO,UAAa,CAACC,CAAM,GAE/D,IAAMK,EAAW,CAAC,GAAGD,EAAgB,IAAI,EAMzC,KAAK,cACH,IAAI,YAAY,sBAAuB,CACrC,QAAS,GACT,OAA+C,CAC7C,SAAAC,EACA,kBAAmB,EAAQN,EAAG,QAAQ,iBACxC,CACF,CAAC,CACH,CACF,CAUA,wBAAwBC,EAAQ,CAC9B,MAAO,EAAQA,CACjB,CAeA,eAAgB,CAAC,CACnB,EAEWM,EAAmBC,EAAY7C,EAA8B,ECh8B1E,IAAM8C,GAAM,OAAO,IAAI,oCAAoC,EAQrDC,GAAqB,YAAc,OAC5BC,GAAN,KAA4B,CACjC,aAAc,CAEZ,KAAK,KAAOD,GAAmBD,EAAG,EAC9BC,GAAmBD,EAAG,EACrBC,GAAmBD,EAAG,EAAI,IAAI,GACrC,CAQA,IAAIG,EAAKC,EAAO,CACT,KAAK,IAAID,CAAG,GACf,KAAK,KAAK,IAAIA,EAAKC,CAAK,CAE5B,CAMA,IAAID,EAAK,CACP,OAAO,KAAK,KAAK,IAAIA,CAAG,CAC1B,CAKA,IAAIA,EAAK,CACP,OAAO,KAAK,KAAK,IAAIA,CAAG,CAC1B,CACF,ECxCO,IAAME,GAAmB,IAAIC,GCHpC,SAASC,GAAqBC,EAAIC,EAAQ,CACzC,OAAOA,EAAS,CAAE,QAAS,CAAC,CAAE,EAAGD,EAAGC,EAAQA,EAAO,OAAO,EAAGA,EAAO,OACrE,CAGA,IAAIC,GAAO,OACPC,GAAQ,QACRC,GAAS,SACTC,EAAU,UACVC,GAAW,UAKXC,GAAuB,CACzB,OAAQ,CACN,QAAS,CACP,MAAO,SACT,EACA,QAAS,CACP,MAAO,UACP,sBAAuB,CACzB,EACA,SAAU,CACR,MAAO,WACP,SAAU,KACZ,EACA,QAAS,CACP,MAAO,SACT,EACA,QAAS,CACP,MAAO,SACT,CACF,EACA,KAAM,CACJ,MAAO,CACL,MAAOF,EACP,IAAKA,EACL,KAAMC,EACR,EACA,OAAQ,CACN,MAAOH,GACP,IAAKE,EACL,KAAMA,CACR,EACA,KAAM,CACJ,MAAOH,GACP,IAAKG,EACL,KAAMA,CACR,EACA,KAAM,CACJ,MAAOH,GACP,IAAKG,EACL,KAAMA,EACN,QAASH,EACX,EACA,QAAS,CACP,MAAOC,GACP,IAAKE,EACL,KAAMA,CACR,CACF,EACA,KAAM,CACJ,MAAO,CACL,KAAMA,EACN,OAAQA,CACV,EACA,OAAQ,CACN,KAAMA,EACN,OAAQA,EACR,OAAQA,CACV,EACA,KAAM,CACJ,KAAMA,EACN,OAAQA,EACR,OAAQA,EACR,aAAcF,EAChB,EACA,KAAM,CACJ,KAAME,EACN,OAAQA,EACR,OAAQA,EACR,aAAcF,EAChB,EACA,QAAS,CACP,KAAME,EACN,OAAQA,EACR,OAAQA,CACV,CACF,EACA,SAAU,CACR,QAAS,CACP,MAAO,CACL,qBAAsB,EACtB,sBAAuB,CACzB,EACA,QAAS,CACP,qBAAsB,EACtB,sBAAuB,CACzB,EACA,QAAS,CACP,qBAAsB,EACtB,sBAAuB,CACzB,CACF,CACF,EACA,mBAAoB,SAAUG,EAAuB,CACnD,GAAKA,EACL,KAAIC,EAAU,CAAC,EACXC,EAAWF,EAAQ,MAAM,eAAe,EACxCG,EAAOH,EAAQ,QAAQ,QAAS,EAAE,EAAE,OASxC,GARI,CAACG,GAAQD,IAAUC,EAAO,GAC1BA,GACFF,EAAQ,MAAQ,WAChBA,EAAQ,gBAAkBE,IAAS,EAAI,SAAWA,IAAS,EAAI,OAAS,OACxEF,EAAQ,SAAWC,EAAWA,EAAS,CAAC,EAAE,YAAY,EAAI,OACjDF,EAAQ,QAAQ,GAAG,GAAK,IACjCC,EAAQ,MAAQ,WAEd,CAAC,QAAQ,KAAKD,CAAO,EAAG,OAAOC,EAAQ,MAAQA,EAAU,OAE7D,GADAA,EAAQ,YAAcD,EAAQ,QAAQ,GAAG,GAAK,EAC1C,cAAc,KAAKA,CAAO,GAAKA,EAAQ,QAAQ,GAAG,GAAK,EAAG,CAC5D,IAAII,EAAOJ,EAAQ,QAAQ,sBAAuB,EAAE,EACpDC,EAAQ,yBAA2B,KAAK,IAAI,KAAK,IAAIG,EAAK,QAAQ,SAAU,EAAE,EAAE,OAAQ,CAAC,EAAG,EAAE,EAC9FH,EAAQ,yBAA2B,KAAK,IAAI,KAAK,IAAIG,EAAK,OAAQ,CAAC,EAAG,EAAE,CAC1E,KAAO,CAIL,QAHIC,EAAQL,EAAQ,QAAQ,UAAW,EAAE,EAAE,MAAM,GAAG,EAChDM,EAAUD,EAAM,CAAC,EACjBE,EAAID,EAAQ,OAAS,EAClBA,EAAQC,CAAC,IAAM,KAAK,EAAEA,EAC7BN,EAAQ,qBAAuB,KAAK,IAAI,KAAK,IAAIK,EAAQ,OAAS,EAAIC,EAAG,CAAC,EAAG,EAAE,EAC/E,IAAIC,EAAWH,EAAM,CAAC,GAAK,GAE3B,IADAE,EAAI,EACGC,EAASD,CAAC,IAAM,KAAK,EAAEA,EAE9B,IADAN,EAAQ,sBAAwB,KAAK,IAAI,KAAK,IAAIM,EAAG,CAAC,EAAG,EAAE,EACpDC,EAASD,CAAC,IAAM,KAAK,EAAEA,EAC9BN,EAAQ,sBAAwB,KAAK,IAAI,KAAK,IAAIM,EAAG,CAAC,EAAG,EAAE,CAC7D,CACA,OAAON,EACT,EACA,iBAAkB,SAAUD,EAAuB,CACjD,GAAKA,EAEL,SADIC,EAAU,CAAC,EACNQ,EAAI,EAAGA,EAAIT,EAAQ,QAAS,CAGnC,QAFIU,EAAUV,EAAQS,CAAC,EACnBF,EAAI,EACDP,EAAQ,EAAES,CAAC,IAAMC,GAAS,EAAEH,EACnC,OAAQG,EAAS,CACf,IAAK,IACHT,EAAQ,IAAMM,IAAM,EAAIX,GAASW,IAAM,EAAIb,GAAOC,GAClD,MACF,IAAK,IACL,IAAK,IACHM,EAAQ,KAAOM,IAAM,EAAIT,GAAWD,EACpC,MACF,IAAK,IACL,IAAK,IACHU,EAAI,KAAK,IAAI,KAAK,IAAIA,EAAI,EAAG,CAAC,EAAG,CAAC,EAClCN,EAAQ,MAAQ,CAAEJ,EAASC,GAAUH,GAAOD,GAAME,EAAO,EAAEW,CAAC,EAC5D,MACF,IAAK,IACL,IAAK,IACL,IAAK,IACHN,EAAQ,QAAUM,IAAM,EAAIX,GAASW,IAAM,EAAIb,GAAOC,GACtD,MACF,IAAK,IACL,IAAK,IACHM,EAAQ,IAAMM,IAAM,EAAIT,GAAWD,EACnC,MACF,IAAK,IACL,IAAK,IACHI,EAAQ,OAAS,GACjBA,EAAQ,KAAOM,IAAM,EAAIT,GAAWD,EACpC,MACF,IAAK,IACL,IAAK,IACHI,EAAQ,OAAS,GACjBA,EAAQ,KAAOM,IAAM,EAAIT,GAAWD,EACpC,MACF,IAAK,IACHI,EAAQ,OAASM,IAAM,EAAIT,GAAWD,EACtC,MACF,IAAK,IACL,IAAK,IACHI,EAAQ,OAASM,IAAM,EAAIT,GAAWD,EACtC,MACF,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACHI,EAAQ,aAAeM,IAAM,EAAIZ,GAAQD,GACzC,KACJ,CACF,CACA,OAAO,OAAO,KAAKO,CAAO,EAAE,OAASA,EAAU,OACjD,CACF,EAKIU,GAAsB,SAA8BC,EAAuCC,EAAiD,CAC9I,GAAI,OAAOD,GAAW,UAAYC,EAAUD,CAAM,EAAG,OAAOA,EAE5D,QADIE,EAAU,CAAC,EAAE,OAAOF,GAAU,CAAC,CAAC,EAC3BG,EAAI,EAAGC,EAAKF,EAAQ,OAAQC,EAAIC,EAAI,EAAED,EAE7C,QADIL,EAAUI,EAAQC,CAAC,EAAE,MAAM,GAAG,EAC3BL,EAAQ,QAAQ,CACrB,IAAIO,EAAYP,EAAQ,KAAK,GAAG,EAChC,GAAIG,EAAUI,CAAS,EAAG,OAAOA,EACjCP,EAAQ,IAAI,CACd,CAEJ,EAKIQ,GAAO,OAAQC,EAAM,MAAOC,EAAM,MAAOC,EAAM,MAAOC,EAAO,OAAQC,EAAQ,QAC7EC,EAAI,CACN,SAAU,EAAoC,CAC5C,IAAIjB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIY,EACbI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,MAAO,IAAKA,GAAKA,GAAK,EAAIY,EACtBI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BF,EAAI,CAAC,EACT,OAAOE,IAAM,GAAKF,IAAM,EAAIY,EACxBI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIW,GACbX,IAAM,EAAIY,EACVZ,IAAM,EAAIa,EACV,GAAKb,EAAI,KAAOA,EAAI,KAAO,GAAKc,EAChC,IAAMd,EAAI,KAAOA,EAAI,KAAO,GAAKe,EACjCC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAChC,OAAOhB,IAAM,GAAKgB,IAAM,EAAIN,EACxBI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKY,EACnC,GAAKZ,EAAI,IAAMA,EAAI,IAAM,IAAOA,EAAI,IAAM,IAAM,GAAKA,EAAI,KAAOc,EACjEd,EAAI,KAAO,GAAM,GAAKA,EAAI,IAAMA,EAAI,IAAM,GAAO,IAAMA,EAAI,KAAOA,EAAI,KAAO,GAAMe,EACnFC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,EAAI,KAAO,GAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMY,EAC1EZ,EAAI,KAAO,GAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMa,GACrE,GAAKb,EAAI,IAAMA,EAAI,IAAM,GAAMA,EAAI,KAAO,KAAQA,EAAI,IAAM,IAAM,GAAKA,EAAI,OAASA,EAAI,IAAM,IAAM,GAAKA,EAAI,OAASA,EAAI,IAAM,IAAM,GAAKA,EAAI,KAAQc,EACzJd,IAAM,GAAKA,EAAI,MAAY,EAAIe,EAC/BC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAC5BD,EAAI,EAAE,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAC/B,OAAOC,IAAM,GAAKhB,EAAI,KAAO,GAAKA,EAAI,MAAQ,IAAMe,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKL,EACjFM,IAAM,GAAM,GAAKhB,EAAI,IAAMA,EAAI,IAAM,IAAOA,EAAI,IAAM,IAAM,GAAKA,EAAI,MAAS,GAAKe,EAAI,IAAMA,EAAI,IAAM,IAAOA,EAAI,IAAM,IAAM,GAAKA,EAAI,KAAOH,EAC9IE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAChC,OAAOhB,IAAM,GAAKgB,IAAM,EAAIN,EACvB,GAAKV,GAAKA,GAAK,GAAMgB,IAAM,EAAIJ,EAChCI,IAAM,EAAIH,EACVC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIW,GACbX,IAAM,EAAIY,EACVZ,IAAM,EAAIa,EACVb,IAAM,EAAIc,EACVd,IAAM,EAAIe,EACVC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3B,EAAI,EAAE,GAAK,GAAG,QAAQ,gBAAiB,EAAE,EACzCF,EAAI,CAAC,EACT,OAAOA,IAAM,GAAK,IAAM,IAAME,IAAM,GAAKA,IAAM,GAAKU,EAChDI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAC5BD,EAAI,EAAE,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAC/B,OAAOC,IAAM,GAAKhB,EAAI,MAAQ,GAAKe,EAAI,MAAQ,EAAIL,EAC/CM,IAAM,GAAKhB,EAAI,MAAQ,GAAKe,EAAI,MAAQ,EAAIJ,EAC5CK,IAAM,GAAM,GAAKhB,EAAI,KAAOA,EAAI,KAAO,GAAO,GAAKe,EAAI,KAAOA,EAAI,KAAO,EAAKH,EAC9EE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC/B,OAAOA,IAAM,GAAKA,IAAM,EAAIU,EACxBI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAC5BD,EAAI,EAAE,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAC/B,OAAOC,IAAM,IAAMhB,IAAM,GAAKA,IAAM,GAAKA,IAAM,IAAMgB,IAAM,GAAMhB,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAMgB,IAAM,GAAMD,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAKA,EAAI,KAAO,EAAKL,EAC1KI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIY,EACbZ,IAAM,EAAIa,EACV,GAAKb,GAAKA,GAAK,EAAIc,EACnB,GAAKd,GAAKA,GAAK,GAAKe,EACpBC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,GAAKA,IAAM,GAAKY,EACzBZ,IAAM,GAAKA,IAAM,GAAKa,EACpB,GAAKb,GAAKA,GAAK,IAAQ,IAAMA,GAAKA,GAAK,GAAOc,EAChDE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAChC,OAAOA,IAAM,GAAKhB,EAAI,KAAO,EAAIU,EAC7BM,IAAM,GAAKhB,EAAI,KAAO,EAAIW,EAC1BK,IAAM,IAAMhB,EAAI,MAAQ,GAAKA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMY,EACrGI,IAAM,EAAIH,EACVC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAC5BlB,EAAI,CAAC,EACT,OAAOE,IAAM,GAAKgB,IAAM,EAAIN,EACxBV,IAAM,GAAKgB,IAAM,EAAIL,EACrBK,IAAM,IAAMlB,EAAI,GAAK,GAAKA,IAAMA,EAAI,KAAO,EAAIe,EAC/CC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3B,EAAI,EAAE,GAAK,GAAG,QAAQ,gBAAiB,EAAE,EAC7C,OAAO,IAAM,GAAKA,EAAI,KAAO,GAAKA,EAAI,MAAQ,IAAM,IAAM,EAAIU,EAC1DI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIY,EACbZ,IAAM,EAAIa,EACVG,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIW,GACbX,IAAM,EAAIY,EACVI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BF,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIW,IACZT,IAAM,GAAKA,IAAM,IAAMF,IAAM,EAAIY,EAClCI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIC,EAAI,EAAE,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAC3BjB,EAAI,CAAC,EACT,OAAOA,EAAI,KAAO,IAAMA,EAAI,IAAM,IAAM,GAAKA,EAAI,KAAOY,EACnD,GAAKZ,EAAI,IAAMA,EAAI,IAAM,IAAOA,EAAI,IAAM,IAAM,GAAKA,EAAI,KAAOc,EACjEG,IAAM,EAAIF,EACVC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIE,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAC5BD,EAAI,EAAE,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAC3BjB,EAAI,CAAC,EACT,OAAOA,EAAI,KAAO,GAAM,IAAMA,EAAI,KAAOA,EAAI,KAAO,IAAOkB,IAAM,GAAM,IAAMD,EAAI,KAAOA,EAAI,KAAO,GAAMN,GACrGX,EAAI,KAAO,GAAKA,EAAI,MAAQ,IAAMkB,IAAM,GAAKD,EAAI,KAAO,GAAKA,EAAI,MAAQ,IAAMC,IAAM,GAAKD,EAAI,KAAO,EAAIL,EACzGI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAC5BD,EAAI,EAAE,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAC/B,OAAOC,IAAM,GAAKhB,EAAI,KAAO,GAAKA,EAAI,MAAQ,IAAMe,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKL,EACjFI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAC5BlB,EAAI,CAAC,EACT,OAAOE,IAAM,GAAKgB,IAAM,EAAIN,EACxBM,IAAM,GAAKlB,IAAM,GAAKA,IAAM,GAAM,GAAKA,EAAI,KAAOA,EAAI,KAAO,GAAMc,EACnEE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIY,EACbZ,IAAM,GAAM,GAAKA,EAAI,KAAOA,EAAI,KAAO,GAAMc,EAC7C,IAAMd,EAAI,KAAOA,EAAI,KAAO,GAAKe,EACjCC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAChC,OAAOhB,IAAM,GAAKgB,IAAM,EAAIN,EACxBM,IAAM,GAAM,GAAKhB,EAAI,IAAMA,EAAI,IAAM,IAAOA,EAAI,IAAM,IAAM,GAAKA,EAAI,KAAOY,EAC5EI,IAAM,GAAKhB,IAAM,GAAM,GAAKA,EAAI,IAAMA,EAAI,IAAM,GAAMgB,IAAM,GAAM,GAAKhB,EAAI,IAAMA,EAAI,IAAM,GAAMgB,IAAM,GAAM,IAAMhB,EAAI,KAAOA,EAAI,KAAO,GAAMa,EAC/IC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC/B,MAAO,IAAKA,GAAKA,GAAK,EAAIU,EACtBI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAChC,OAAOA,IAAM,GAAKhB,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKU,EAC/CM,IAAM,GAAM,GAAKhB,EAAI,IAAMA,EAAI,IAAM,IAAOA,EAAI,IAAM,IAAM,GAAKA,EAAI,KAAOY,EAC5EI,IAAM,GAAKhB,EAAI,KAAO,GAAKgB,IAAM,GAAM,GAAKhB,EAAI,IAAMA,EAAI,IAAM,GAAMgB,IAAM,GAAM,IAAMhB,EAAI,KAAOA,EAAI,KAAO,GAAMa,EACpHC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BF,EAAI,CAAC,EACT,OAAOE,IAAM,GAAKF,IAAM,EAAIY,EACxB,GAAKZ,GAAKA,GAAK,GAAKc,EACpBE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3Be,EAAI,EAAE,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAC3BjB,EAAI,CAAC,EACT,OAAQA,IAAM,GAAKA,IAAM,GAAME,IAAM,GAAKe,IAAM,EAAIL,EAChDI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC3BgB,GAAK,EAAI,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,OAChC,OAAOA,IAAM,GAAKhB,EAAI,MAAQ,EAAIU,EAC9BM,IAAM,GAAKhB,EAAI,MAAQ,EAAIW,EAC3BK,IAAM,GAAM,GAAKhB,EAAI,KAAOA,EAAI,KAAO,GAAMgB,IAAM,EAAIJ,EACvDE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,MAAQ,IAAKA,GAAKA,GAAK,GAAO,IAAMA,GAAKA,GAAK,GAAMY,EAChDI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,GAAKA,IAAM,GAAKA,IAAM,GAAKA,IAAM,GAAKA,IAAM,GAAKA,IAAM,GAAKY,EACrEZ,IAAM,GAAKA,IAAM,EAAIa,EACrBb,IAAM,EAAIc,EACVd,IAAM,EAAIe,EACVC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC/B,OAAQA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAOA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMU,EAC7JV,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,KAAOA,EAAI,MAAS,IAAOY,EACvNZ,IAAM,GAAKA,EAAI,KAAO,GAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMa,EAClFC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAQA,EAAI,KAAO,GAAKA,EAAI,KAAO,IAAOA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMc,EAC1EE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,GAAKA,IAAM,EAAIY,EACxBZ,IAAM,EAAIa,EACVb,IAAM,EAAIc,EACVE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,GAAKA,IAAM,GAAKA,IAAM,GAAKA,IAAM,EAAIW,GAC9CX,IAAM,EAAIY,EACVZ,IAAM,EAAIa,EACVb,IAAM,GAAKA,IAAM,EAAIc,EACrBd,IAAM,GAAKA,IAAM,EAAIe,EACrBC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKY,EACpCZ,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKa,EACjCb,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKc,EACjCE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIY,EACbZ,IAAM,GAAKA,IAAM,EAAIa,EACrBb,IAAM,EAAIc,EACVd,IAAM,EAAIe,EACVC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,GAAKA,IAAM,EAAIY,EACxBI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,IAAMA,IAAM,GAAKA,IAAM,IAAMA,IAAM,IAAMe,EAClDC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC/B,OAAOA,IAAM,EAAIU,EACbV,IAAM,GAAO,GAAKA,EAAI,KAAOA,EAAI,KAAO,IAAOA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMa,EACrGC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAKA,IAAM,EAAIe,EAC7DC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAId,EAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAC/B,OAAOA,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKU,EACpCV,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKW,GAChCX,EAAI,KAAO,GAAKA,EAAI,KAAO,IAAOA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMa,EACvEC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIY,EACbZ,IAAM,GAAKA,IAAM,EAAIa,EACrBb,IAAM,EAAIc,EACVE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,MAAO,IAAKA,GAAKA,GAAK,EAAIY,EACtBI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAQA,IAAM,GAAKA,IAAM,GAAM,GAAKA,GAAKA,GAAK,EAAMY,EAChDZ,IAAM,GAAKA,IAAM,EAAIa,EACrBb,IAAM,EAAIc,EACVd,IAAM,EAAIe,EACVC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,IAAM,EAAIY,EACbZ,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKe,EACjCC,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAQA,EAAI,KAAO,GAAKA,EAAI,KAAO,IAAOA,EAAI,MAAQ,IAAMA,EAAI,MAAQ,GAAMY,EAC1EI,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAQA,EAAI,KAAO,GAAKA,EAAI,KAAO,GAAMA,IAAM,GAAKc,EAChDE,CACN,EACA,SAAU,EAAoC,CAC5C,IAAIhB,EAAI,CAAC,EACT,OAAOA,EAAI,KAAO,GAAKA,EAAI,MAAQ,GAAKc,EACpCE,CACN,CACF,EAEIG,GAAU,CACZ,GAAI,CAAE,SAAUF,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,CAAC,CAAE,EACtC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,CAAC,CAAE,EACrC,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,CAAC,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,CAAC,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,EAAE,CAAE,EACtC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,CAAC,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,QAAS,CAAE,SAAUA,EAAE,CAAC,CAAE,EAC1B,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,CAAC,CAAE,EACrC,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACtC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,CAAE,EACtB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,EAAG,QAASA,EAAE,EAAE,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,CAAC,CAAE,EACrC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,EAAE,CAAE,EACvB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,EAAE,EAAG,QAASA,EAAE,EAAE,CAAE,EACtC,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,IAAK,CAAE,SAAUA,EAAE,CAAC,CAAE,EACtB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,SAAUA,EAAE,CAAC,CAAE,EACrB,GAAI,CAAE,QAASA,EAAE,CAAC,CAAE,EACpB,GAAI,CAAE,QAASA,EAAE,CAAC,CAAE,EACpB,GAAI,CAAE,QAASA,EAAE,CAAC,CAAE,CACtB,EAEIG,GAAyBpC,GAAqB,SAAUE,EAAQmC,EAAS,CAiB7EA,EAAUnC,EAAO,QAAU,SACzBoC,EACAjB,EACAkB,EACgC,CAChC,OAAOC,EAAaF,EAAK,KAAMjB,GAAU,KAAMkB,GAAS,CAAC,EAAG,EAAI,CAClE,EAEAF,EAAQ,QAAU,SAChBC,EACAjB,EACAkB,EAC+B,CAC/B,OAAOC,EAAaF,EAAK,KAAMjB,GAAU,KAAMkB,GAAS,CAAC,EAAG,EAAK,CACnE,EAEA,SAASC,EACPC,EACAC,EACArB,EACAkB,EACAI,EACe,CACf,IAAI7B,EAAQ2B,EAAS,IAAI,SAAUG,EAAS,CAC1C,OAAOC,EAAiBD,EAASF,EAAQrB,EAAQkB,EAAOI,CAAI,CAC9D,CAAC,EAED,OAAKA,EAQD7B,EAAM,SAAW,EAAUA,EAAM,CAAC,EAC/B,SAAiBgC,EAAM,CAE5B,QADIC,EAAU,GACLC,EAAI,EAAGA,EAAIlC,EAAM,OAAQ,EAAEkC,EAClCD,GAAWjC,EAAMkC,CAAC,EAAEF,CAAI,EAE1B,OAAOC,CACT,EAdS,SAAiBD,EAAM,CAC5B,OAAOhC,EAAM,OAAO,SAAUA,EAAOmC,EAAM,CACzC,OAAOnC,EAAM,OAAOmC,EAAKH,CAAI,CAAC,CAChC,EAAG,CAAC,CAAC,CACP,CAWJ,CAEA,SAASD,EACPD,EACAF,EACArB,EACAkB,EACAI,EACe,CACf,GAAI,OAAOC,GAAY,SAAU,CAC/B,IAAIM,EAAqBN,EACzB,OAAO,UAAmB,CAAE,OAAOM,CAAM,CAC3C,CAEA,IAAIC,EAAKP,EAAQ,CAAC,EACdQ,EAAOR,EAAQ,CAAC,EAEpB,GAAIF,GAAUE,EAAQ,CAAC,IAAM,IAAK,CAChCO,EAAKT,EAAO,CAAC,EACb,IAAIW,EAASX,EAAO,CAAC,EACjBY,GAAaf,EAAM,QAAUgB,EAAS,QAAQ,CAAEJ,EAAI,QAAS,EAAG9B,CAAM,EAC1E,OAAO,SAAiByB,EAAM,CAC5B,OAAOQ,EAAUE,EAAOL,EAAIL,CAAI,EAAIO,EAAQP,CAAI,CAClD,CACF,CAGA,IAAIW,EACAL,IAAS,UAAYA,IAAS,iBAChCK,EAAW,CAAC,EACZ,OAAO,KAAKb,EAAQ,CAAC,CAAC,EAAE,QAAQ,SAAUc,EAAK,CAC7CD,EAASC,CAAG,EAAIlB,EAAaI,EAAQ,CAAC,EAAEc,CAAG,EAAGd,EAASvB,EAAQkB,EAAOI,CAAI,CAC5E,CAAC,EACDC,EAAU,CAAEA,EAAQ,CAAC,EAAGA,EAAQ,CAAC,EAAGA,EAAQ,CAAC,EAAGa,CAAS,GAChDb,EAAQ,CAAC,GAAK,OAAOA,EAAQ,CAAC,GAAM,WAC7Ca,EAAW,CAAC,EACZ,OAAO,KAAKb,EAAQ,CAAC,CAAC,EAAE,QAAQ,SAAUc,EAAK,CAC7CD,EAASC,CAAG,EAAIlB,EAAaI,EAAQ,CAAC,EAAEc,CAAG,EAAGd,EAASvB,EAAQkB,EAAOI,CAAI,CAC5E,CAAC,EACDC,EAAU,CAAEA,EAAQ,CAAC,EAAGA,EAAQ,CAAC,EAAGa,CAAS,GAG/C,IAAIE,GAAUP,IAASb,EAAMa,CAAI,GAAKG,EAASH,CAAI,GACnD,GAAIO,GAAS,CACX,IAAIC,GAAOD,GAAQf,EAASvB,CAAM,EAClC,OAAO,SAAiByB,EAAM,CAC5B,OAAOc,GAAKJ,EAAOL,EAAIL,CAAI,EAAGA,CAAI,CACpC,CACF,CAEA,OAAOH,EACH,SAAiBG,EAAM,CAAE,OAAO,OAAOU,EAAOL,EAAIL,CAAI,CAAC,CAAE,EACzD,SAAiBA,EAAM,CAAE,OAAOU,EAAOL,EAAIL,CAAI,CAAE,CACvD,CAEA,SAASU,EAAQL,EAAiBL,EAA8B,CAC9D,GAAIA,GAASK,KAAML,EAAO,OAAOA,EAAKK,CAAE,EAGxC,QAFIrC,EAAQqC,EAAG,MAAM,GAAG,EACpBU,EAAIf,EACC5B,EAAI,EAAG4C,EAAKhD,EAAM,OAAQ+C,GAAK3C,EAAI4C,EAAI,EAAE5C,EAChD2C,EAAIA,EAAE/C,EAAMI,CAAC,CAAC,EAEhB,OAAO2C,CACT,CAEA,SAASE,EAAiBnB,EAA2BrB,EAAuB,CAC1E,IAAIyC,EAAQpB,EAAQ,CAAC,EACjBlC,EAAUF,GAAqB,OAAOwD,CAAK,GAAKxD,GAAqB,mBAAmBwD,CAAK,GAAKxD,GAAqB,OAAO,QAClI,OAAO,IAAI,KAAK,aAAae,EAASb,CAAO,EAAE,MACjD,CAEA,SAASuD,EAAmBrB,EAA2BrB,EAAuB,CAC5E,IAAIyC,EAAQpB,EAAQ,CAAC,EACjBlC,EAAUF,GAAqB,SAASwD,CAAK,GAAKxD,GAAqB,SAAS,QAChF0D,EAAK,IAAI,KAAK,aAAa3C,EAASb,EAAQ,OAAO,EAAE,OACrDyD,EAAK,IAAI,KAAK,aAAa5C,EAASb,EAAQ,OAAO,EAAE,OACrD0D,EAAK,IAAI,KAAK,aAAa7C,EAASb,EAAQ,KAAK,EAAE,OACnD2D,EAAM,gBAAgB,KAAK,OAAO9C,CAAO,CAAC,EAAI,IAAM,IAExD,OAAO,SAAU+C,EAAGxB,EAAM,CAExB,GADAwB,EAAI,CAACA,EACD,CAAC,SAASA,CAAC,EAAG,OAAOJ,EAAGI,CAAC,EAC7B,IAAIC,EAAI,CAAC,EAAED,EAAI,GAAK,IAChBE,GAAI,CAAC,EAAEF,EAAI,GAAK,IAChBG,IAAOF,EAAKH,EAAG,KAAK,IAAIG,CAAC,CAAC,EAAIF,EAAO,IACvCF,EAAG,KAAK,IAAIK,EAAC,CAAC,EAAIH,EAAMH,EAAG,KAAK,IAAII,EAAI,EAAE,CAAC,EAC7C,OAAOA,EAAI,EAAIF,EAAG,EAAE,EAAE,QAAQA,EAAG,CAAC,EAAGK,EAAG,EAAIA,EAC9C,CACF,CAEA,SAASC,EAAmB9B,EAA2BrB,EAAuB,CAC5E,IAAI6B,EAAOR,EAAQ,CAAC,EAChBoB,EAAQpB,EAAQ,CAAC,EACjBlC,EAAUF,GAAqB4C,CAAI,EAAEY,CAAK,GAAKxD,GAAqB,iBAAiBwD,CAAK,GAAKxD,GAAqB4C,CAAI,EAAE,QAC9H,OAAO,IAAI,KAAK,eAAe7B,EAASb,CAAO,EAAE,MACnD,CAEA,SAASiE,EAAiB/B,EAA2BrB,EAAuB,CAC1E,IAAI6B,EAAOR,EAAQ,CAAC,EAChBgC,EAAaxB,IAAS,gBAAkB,UAAY,WACpDC,EAAST,EAAQ,CAAC,EAClBa,EAAWb,EAAQ,CAAC,EACpBiC,EACJ,GAAI,KAAK,aAAe,KAAK,YAAY,mBAAmBtD,CAAO,EAAE,OAAS,EAC5EsD,EAAc,IAAI,KAAK,YAAYtD,EAAS,CAAE,KAAMqD,CAAW,CAAC,MAC3D,CACL,IAAIvD,EAASD,GAAoBG,EAASY,EAAO,EAC7C2C,EAAUzD,GAAUc,GAAQd,CAAM,EAAEuD,CAAU,GAAMG,EACxDF,EAAc,CAAE,OAAQC,CAAO,CACjC,CAEA,OAAO,SAAU5B,EAAOJ,EAAM,CAC5B,IAAIkC,GACFvB,EAAS,KAAM,CAACP,CAAK,GACrBO,EAASoB,EAAY,OAAO3B,EAAQG,CAAM,CAAC,GAC3CI,EAAS,MACX,OAAOuB,GAAOlC,CAAI,CACpB,CACF,CAEA,SAASiC,GAA+B,CAAE,MAAO,OAAQ,CAEzD,SAASE,EAAiBrC,EAA2BrB,EAAuB,CAC1E,IAAIkC,EAAWb,EAAQ,CAAC,EACxB,OAAO,SAAUM,EAAOJ,EAAM,CAC5B,IAAIkC,EAASvB,EAASP,CAAK,GAAKO,EAAS,MACzC,OAAOuB,EAAOlC,CAAI,CACpB,CACF,CAEA,IAAIS,EAAuB,CACzB,OAAQQ,EACR,QAASA,EACT,SAAUA,EACV,SAAUE,EACV,KAAMS,EACN,KAAMA,EACN,OAAQC,EACR,cAAeA,EACf,OAAQM,CACV,EACA5C,EAAQ,MAAQkB,CAChB,CAAC,EACG2B,GAA2B9C,GAAuB,QAClD+C,GAA2B/C,GAAuB,MAElDgD,GAAqBpF,GAAqB,SAAUE,EAAQmC,EAAS,CAqBzE,IAAIgD,EAAU,IACVC,EAAU,IACVC,EAAU,IACVC,EAAU,IACVC,EAAU,IACVC,EAAU,IACVC,EAAU,KACVC,EAAe,KACfC,EAAM,IACNC,EAAS,UACTC,EAAc,CAChB,SACA,OACA,OACA,UACA,WACA,UACF,EACIC,EAAY,CACd,SACA,SACA,eACF,EAqDA3D,EAAUnC,EAAO,QAAU,SACzBO,EACAC,EACU,CACV,OAAOuF,EAAS,CACd,QAAS,OAAOxF,CAAO,EACvB,MAAO,EACP,SAAWC,GAAWA,EAAQ,UAAa,KAC3C,OAASA,GAAWA,EAAQ,QAAW,IACzC,EAAG,EAAE,CACP,EAEA,SAASuF,EAAU9E,EAAuB+E,EAAmC,CAC3E,IAAIzF,EAAUU,EAAQ,QAClBgF,EAAS1F,EAAQ,OACjBgC,EAAqB,CAAC,EACtB2D,EAAQjF,EAAQ,MAChBkF,EAAOC,EAAUnF,EAAS+E,CAAU,EAGxC,IAFIG,GAAM5D,EAAS,KAAK4D,CAAI,EACxBA,GAAQlF,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,OAAQV,EAAQ,MAAM2F,EAAOjF,EAAQ,KAAK,CAAE,CAAC,EACxFA,EAAQ,MAAQgF,GAAQ,CAC7B,GAAI1F,EAAQU,EAAQ,KAAK,IAAMmE,EAAS,CACtC,GAAI,CAACY,EAAY,MAAMK,EAASpF,CAAO,EACvC,KACF,CACA,GAAI+E,GAAc/E,EAAQ,UAAYV,EAAQ,MAAMU,EAAQ,MAAOA,EAAQ,MAAQwE,EAAQ,MAAM,IAAMA,EAAS,MAChHlD,EAAS,KAAK+D,EAAiBrF,CAAO,CAAC,EACvCiF,EAAQjF,EAAQ,MAChBkF,EAAOC,EAAUnF,EAAS+E,CAAU,EAChCG,GAAM5D,EAAS,KAAK4D,CAAI,EACxBA,GAAQlF,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,OAAQV,EAAQ,MAAM2F,EAAOjF,EAAQ,KAAK,CAAE,CAAC,CACjG,CACA,OAAOsB,CACT,CAEA,SAAS6D,EAAWnF,EAAuB+E,EAAsC,CAO/E,QANIzF,EAAUU,EAAQ,QAClBgF,EAAS1F,EAAQ,OACjBgG,EAAiBP,IAAe,UAAYA,IAAe,gBAC3DQ,EAAiB,CAAC,CAACvF,EAAQ,SAC3BwF,EAAcT,IAAe,UAC7BG,EAAO,GACJlF,EAAQ,MAAQgF,GAAQ,CAC7B,IAAIS,EAAOnG,EAAQU,EAAQ,KAAK,EAChC,GACEyF,IAASvB,GAAWuB,IAAStB,GAC5BmB,GAAiBG,IAASpB,GAC1BkB,GAAkBE,IAASnB,GAC3BkB,GAAcE,EAAaD,EAAK,WAAW,CAAC,CAAC,EAE9C,MACK,GAAIA,IAASf,EAElB,GADAe,EAAOnG,EAAQ,EAAEU,EAAQ,KAAK,EAC1ByF,IAASf,EACXQ,GAAQO,EACR,EAAEzF,EAAQ,cAGVyF,IAASvB,GAAWuB,IAAStB,GAC5BmB,GAAiBG,IAASpB,GAC1BkB,GAAkBE,IAASnB,GAC5BkB,EAGA,IADAN,GAAQO,EACD,EAAEzF,EAAQ,MAAQgF,GAEvB,GADAS,EAAOnG,EAAQU,EAAQ,KAAK,EACxByF,IAASf,GAAOpF,EAAQU,EAAQ,MAAQ,CAAC,IAAM0E,EACjDQ,GAAQR,EACR,EAAE1E,EAAQ,cACDyF,IAASf,EAAK,CACvB,EAAE1E,EAAQ,MACV,KACF,MACEkF,GAAQO,OAIZP,GAAQR,OAIVQ,GAAQO,EACR,EAAEzF,EAAQ,KAEd,CACA,OAAOkF,CACT,CAEA,SAASQ,EAAcC,EAAiC,CACtD,OACGA,GAAQ,GAAQA,GAAQ,IACzBA,IAAS,IAAQA,IAAS,KAAQA,IAAS,KAAQA,IAAS,MAC3DA,GAAQ,MAAUA,GAAQ,MAC3BA,IAAS,MAAUA,IAAS,MAAUA,IAAS,MAAUA,IAAS,MAClEA,IAAS,MAAUA,IAAS,OAAUA,IAAS,KAEnD,CAEA,SAASC,EAAgB5F,EAAkC,CAIzD,QAHIV,EAAUU,EAAQ,QAClBgF,EAAS1F,EAAQ,OACjB2F,EAAQjF,EAAQ,MACbA,EAAQ,MAAQgF,GAAUU,EAAapG,EAAQ,WAAWU,EAAQ,KAAK,CAAC,GAC7E,EAAEA,EAAQ,MAERiF,EAAQjF,EAAQ,OAASA,EAAQ,QACnCA,EAAQ,OAAO,KAAK,CAAE,QAASA,EAAQ,QAAQ,MAAMiF,EAAOjF,EAAQ,KAAK,CAAE,CAAC,CAEhF,CAEA,SAASqF,EAAkBrF,EAAyC,CAClE,IAAIV,EAAUU,EAAQ,QACtB,GAAIV,EAAQU,EAAQ,KAAK,IAAMqE,EAC7B,OAAIrE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUqE,CAAQ,CAAC,EAC7D,EAAErE,EAAQ,MACH,CAAEqE,CAAQ,EAGnB,IAAIwB,EAAMC,EAAS9F,CAAO,EAC1B,GAAI6F,EAAK,OAAOA,EAGhB,GAAIvG,EAAQU,EAAQ,KAAK,IAAMkE,EAAS,MAAMkB,EAASpF,EAASkE,CAAO,EACnElE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUkE,CAAQ,CAAC,EAC7D,EAAElE,EAAQ,MACV4F,EAAe5F,CAAO,EAEtB,IAAIgC,EAAK+D,EAAQ/F,CAAO,EACxB,GAAI,CAACgC,EAAI,MAAMoD,EAASpF,EAAS,gBAAgB,EAC7CA,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,KAAMgC,CAAG,CAAC,EACpD4D,EAAe5F,CAAO,EAEtB,IAAIyF,EAAOnG,EAAQU,EAAQ,KAAK,EAChC,GAAIyF,IAAStB,EACX,OAAInE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUmE,CAAQ,CAAC,EAC7D,EAAEnE,EAAQ,MACH,CAAEgC,CAAG,EAGd,GAAIyD,IAASrB,EAAS,MAAMgB,EAASpF,EAASoE,EAAU,OAASD,CAAO,EACpEnE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUoE,CAAQ,CAAC,EAC7D,EAAEpE,EAAQ,MACV4F,EAAe5F,CAAO,EAEtB,IAAIiC,EAAO8D,EAAQ/F,CAAO,EAC1B,GAAI,CAACiC,EAAM,MAAMmD,EAASpF,EAAS,kBAAkB,EAIrD,GAHIA,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,OAAQiC,CAAK,CAAC,EACxD2D,EAAe5F,CAAO,EACtByF,EAAOnG,EAAQU,EAAQ,KAAK,EACxByF,IAAStB,EAAS,CAEpB,GADInE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUmE,CAAQ,CAAC,EACzDlC,IAAS,UAAYA,IAAS,iBAAmBA,IAAS,SAC5D,MAAMmD,EAASpF,EAASiC,EAAO,eAAe,EAEhD,QAAEjC,EAAQ,MACH,CAAEgC,EAAIC,CAAK,CACpB,CAEA,GAAIwD,IAASrB,EAAS,MAAMgB,EAASpF,EAASoE,EAAU,OAASD,CAAO,EACpEnE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUoE,CAAQ,CAAC,EAC7D,EAAEpE,EAAQ,MACV4F,EAAe5F,CAAO,EAEtB,IAAIgG,EACJ,GAAI/D,IAAS,UAAYA,IAAS,gBAAiB,CACjD,IAAIC,EAAS+D,EAAkBjG,CAAO,EACtC4F,EAAe5F,CAAO,EACtBgG,EAAM,CAAEhE,EAAIC,EAAMC,EAAQgE,GAAiBlG,EAASiC,CAAI,CAAE,CAC5D,SAAWA,IAAS,SAClB+D,EAAM,CAAEhE,EAAIC,EAAMiE,GAAiBlG,EAASiC,CAAI,CAAE,UACzC2C,EAAY,QAAQ3C,CAAI,GAAK,EACtC+D,EAAM,CAAEhE,EAAIC,EAAMkE,EAAkBnG,CAAO,CAAE,MACxC,CACL,IAAIoG,EAAQpG,EAAQ,MAChBqG,GAAoCF,EAAkBnG,CAAO,EACjE4F,EAAe5F,CAAO,EAClBV,EAAQU,EAAQ,KAAK,IAAMkE,IAC7BlE,EAAQ,MAAQoG,EAChBC,GAASH,GAAiBlG,EAASiC,CAAI,GAEzC+D,EAAM,CAAEhE,EAAIC,EAAMoE,EAAO,CAC3B,CAGA,GADAT,EAAe5F,CAAO,EAClBV,EAAQU,EAAQ,KAAK,IAAMmE,EAAS,MAAMiB,EAASpF,EAASmE,CAAO,EACvE,OAAInE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUmE,CAAQ,CAAC,EAC7D,EAAEnE,EAAQ,MACHgG,CACT,CAEA,SAASF,EAAU9F,EAA0C,CAC3D,IAAIsG,EAAWtG,EAAQ,SACvB,GAAI,GAACsG,GAAYtG,EAAQ,QAAQA,EAAQ,KAAK,IAAMsE,GAEpD,IAAItE,EAAQ,QAAQ,MAAMA,EAAQ,MAAOA,EAAQ,MAAQwE,EAAQ,MAAM,IAAMA,EAC3E,MAAMY,EAASpF,EAAS,KAAM,0CAA0C,EAEtEA,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUsE,CAAQ,CAAC,EAC7D,EAAEtE,EAAQ,MAEV,IAAIgC,EAAK+D,EAAQ/F,EAAS,EAAI,EAC9B,GAAI,CAACgC,EAAI,MAAMoD,EAASpF,EAAS,gBAAgB,EAIjD,GAHIA,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,KAAMgC,CAAG,CAAC,EACpD4D,EAAe5F,CAAO,EAElBA,EAAQ,QAAQ,MAAMA,EAAQ,MAAOA,EAAQ,MAAQyE,EAAa,MAAM,IAAMA,EAChF,OAAIzE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUyE,CAAa,CAAC,EAClEzE,EAAQ,OAASyE,EAAa,OACvB,CAAEzC,EAAIsE,CAAS,EAExB,GAAItG,EAAQ,QAAQA,EAAQ,KAAK,IAAMuE,EAAS,MAAMa,EAASpF,EAASuE,CAAO,EAC3EvE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUuE,CAAQ,CAAC,EAC7D,EAAEvE,EAAQ,MAEV,IAAIsC,EAAWwC,EAAS9E,EAASsG,CAAQ,EAErCC,EAAMvG,EAAQ,MAClB,GAAIA,EAAQ,QAAQ,MAAMA,EAAQ,MAAOA,EAAQ,MAAQwE,EAAQ,MAAM,IAAMA,EAAS,MAAMY,EAASpF,EAASwE,EAAUxC,EAAKuC,CAAO,EAChIvE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUwE,CAAQ,CAAC,EAC7DxE,EAAQ,OAASwE,EAAQ,OACzB,IAAIgC,EAAUT,EAAQ/F,EAAS,EAAI,EAEnC,GADIwG,GAAWxG,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,KAAMwG,CAAQ,CAAC,EAChExE,IAAOwE,EACT,MAAAxG,EAAQ,MAAQuG,EACVnB,EAASpF,EAASwE,EAAUxC,EAAKuC,EAASC,EAAUgC,EAAUjC,CAAO,EAG7E,GADAqB,EAAe5F,CAAO,EAClBA,EAAQ,QAAQA,EAAQ,KAAK,IAAMuE,EAAS,MAAMa,EAASpF,EAASuE,CAAO,EAC/E,OAAIvE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUuE,CAAQ,CAAC,EAC7D,EAAEvE,EAAQ,MAEH,CAAEgC,EAAIsE,EAAU,CAAE,SAAUhE,CAAS,CAAE,EAChD,CAEA,SAASyD,EAAS/F,EAAuByG,EAAsC,CAI7E,QAHInH,EAAUU,EAAQ,QAClBgF,EAAS1F,EAAQ,OACjB0C,EAAK,GACFhC,EAAQ,MAAQgF,GAAQ,CAC7B,IAAIS,EAAOnG,EAAQU,EAAQ,KAAK,EAChC,GACEyF,IAASvB,GAAWuB,IAAStB,GAAWsB,IAASrB,GACjDqB,IAASpB,GAAWoB,IAASf,GAAOgB,EAAaD,EAAK,WAAW,CAAC,CAAC,GAClEgB,IAAUhB,IAASnB,GAAWmB,IAASlB,GAAWkB,IAAS,KAC5D,MACFzD,GAAMyD,EACN,EAAEzF,EAAQ,KACZ,CACA,OAAOgC,CACT,CAEA,SAASmE,EAAmBnG,EAAoC,CAC9D,IAAIiF,EAAQjF,EAAQ,MAChB6C,EAAQsC,EAAUnF,EAAS,SAAS,EACxC,GAAI,CAAC6C,EAAO,MAAMuC,EAASpF,EAAS,wBAAwB,EAC5D,OAAIA,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,QAASA,EAAQ,QAAQ,MAAMiF,EAAOjF,EAAQ,KAAK,CAAE,CAAC,EACzF6C,CACT,CAEA,SAASoD,EAAmBjG,EAAoC,CAC9D,IAAIV,EAAUU,EAAQ,QAClBgF,EAAS1F,EAAQ,OACjB4C,EAAS,EACb,GAAI5C,EAAQ,MAAMU,EAAQ,MAAOA,EAAQ,MAAQ2E,EAAO,MAAM,IAAMA,EAAQ,CACtE3E,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAU,QAAS,EAAG,CAAE,SAAU,GAAI,CAAC,EACjFA,EAAQ,OAAS2E,EAAO,OACxBiB,EAAe5F,CAAO,EAEtB,QADIiF,EAAQjF,EAAQ,MACbA,EAAQ,MAAQgF,GAAU0B,GAAQpH,EAAQ,WAAWU,EAAQ,KAAK,CAAC,GACxE,EAAEA,EAAQ,MAEZ,GAAIiF,IAAUjF,EAAQ,MAAO,MAAMoF,EAASpF,EAAS,eAAe,EAChEA,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUV,EAAQ,MAAM2F,EAAOjF,EAAQ,KAAK,CAAE,CAAC,EACzFkC,EAAS,CAAC5C,EAAQ,MAAM2F,EAAOjF,EAAQ,KAAK,CAC9C,CACA,OAAOkC,CACT,CAEA,SAASwE,GAASf,EAAiC,CACjD,OAAQA,GAAQ,IAAQA,GAAQ,EAClC,CAEA,SAASO,GAAkBlG,EAAuB+E,EAA2C,CAI3F,QAHIzF,EAAUU,EAAQ,QAClBgF,EAAS1F,EAAQ,OACjBC,EAA4B,CAAC,EAC1BS,EAAQ,MAAQgF,GAAU1F,EAAQU,EAAQ,KAAK,IAAMmE,GAAS,CACnE,IAAIwC,EAAWZ,EAAQ/F,CAAO,EAC9B,GAAI,CAAC2G,EAAU,MAAMvB,EAASpF,EAAS,sBAAsB,EACzDA,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,WAAY2G,CAAS,CAAC,EAChEf,EAAe5F,CAAO,EACtBT,EAAQoH,CAAQ,EAAIC,EAAgB5G,EAAS+E,CAAU,EACvDa,EAAe5F,CAAO,CACxB,CACA,GAAI,CAACT,EAAQ,OAASsF,EAAU,QAAQE,CAAU,GAAK,EACrD,MAAMK,EAASpF,EAAS,KAAM,KAAM,4CAA8C+E,CAAU,EAE9F,OAAOxF,CACT,CAEA,SAASqH,EAAiB5G,EAAuB+E,EAAmC,CAClF,GAAI/E,EAAQ,QAAQA,EAAQ,KAAK,IAAMkE,EAAS,MAAMkB,EAASpF,EAASkE,EAAU,uBAAuB,EACrGlE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUkE,CAAQ,CAAC,EAC7D,EAAElE,EAAQ,MACV,IAAI4B,EAAUkD,EAAS9E,EAAS+E,CAAU,EAC1C,GAAI/E,EAAQ,QAAQA,EAAQ,KAAK,IAAMmE,EAAS,MAAMiB,EAASpF,EAASmE,EAAU,qBAAqB,EACvG,OAAInE,EAAQ,QAAQA,EAAQ,OAAO,KAAK,CAAE,SAAUmE,CAAQ,CAAC,EAC7D,EAAEnE,EAAQ,MACH4B,CACT,CAEA,SAASwD,EAAUpF,EAAuBoF,EAA4ByB,EAAyBjF,EAA0B,CACvH,IAAItC,EAAUU,EAAQ,QAClB8G,EAAQxH,EAAQ,MAAM,EAAGU,EAAQ,KAAK,EAAE,MAAM,OAAO,EACrDkC,EAASlC,EAAQ,MACjB+G,EAAOD,EAAM,OACbE,EAASF,EAAM,MAAM,EAAE,EAAE,CAAC,EAAE,OAChC,OAAAD,EAAQA,IACL7G,EAAQ,OAASV,EAAQ,OAAU,yBAC/ByG,EAAQ/F,CAAO,GAAKV,EAAQU,EAAQ,KAAK,GAE3C4B,IAASA,EAAUqF,GAAa7B,EAAUyB,CAAK,GACpDjF,GAAW,OAAStC,EAAQ,QAAQ,SAAU;AAAA,CAAI,EAC3C,IAAI4H,GAAYtF,EAASwD,EAAUyB,EAAO3E,EAAQ6E,EAAMC,CAAM,CACvE,CAEA,SAASC,GAAc7B,EAAwByB,EAAmB,CAChE,OAAKzB,EACE,YAAcA,EAAW,cAAgByB,EAD1B,cAAgBA,EAAQ,QAEhD,CAMA,SAASK,GAAatF,EAAsBwD,EAAwByB,EAAqB3E,EAAqB6E,EAAmBC,EAAqB,CACpJ,MAAM,KAAK,KAAMpF,CAAO,EACxB,KAAK,KAAO,cACZ,KAAK,QAAUA,EACf,KAAK,SAAWwD,EAChB,KAAK,MAAQyB,EACb,KAAK,OAAS3E,EACd,KAAK,KAAO6E,EACZ,KAAK,OAASC,CAChB,CACAE,GAAY,UAAY,OAAO,OAAO,MAAM,SAAS,EACrDhG,EAAQ,YAAcgG,EACtB,CAAC,EACGC,GAAuBlD,GAAmB,YAE1CmD,GAAe,IAAI,OACrB,KAAO,OAAO,KAAKpG,EAAO,EAAE,KAAK,GAAG,EAAI,MAC1C,EAkBIqG,GAAoD,IAAI,QAO5D,SAASC,GACPhI,EACAc,EACAb,EACA,CACA,GAAI,EAAE,gBAAgB+H,KAAkBD,GAAU,IAAI,IAAI,EACxD,MAAM,IAAI,UAAU,0DAA0D,EAEhF,IAAIlG,EAAM8C,GAAmB3E,CAAO,EACpC+H,GAAU,IAAI,KAAM,CAClB,IAAKlG,EACL,OAAQF,GAAuBE,EAAKf,EAASb,GAAWA,EAAQ,KAAK,EACrE,OAAQ+H,GAAc,mBAAmBlH,CAAO,EAAE,CAAC,GAAK,KACxD,QAASA,EACT,QAASb,CACX,CAAC,CACH,CACA,IAAIgI,GAAgBD,GAGpB,OAAO,iBAAiBA,GAAc,UAAW,CAC/C,OAAQ,CACN,aAAc,GACd,IAAK,UAAmB,CACtB,IAAIE,EAASH,GAAU,IAAI,IAAI,EAC/B,GAAI,CAACG,EAAQ,MAAM,IAAI,UAAU,oGAAqG,EACtI,OAAOA,EAAO,MAChB,CACF,EACA,cAAe,CACb,aAAc,GACd,SAAU,GACV,MAAO,SAAwB7F,EAAuB,CACpD,IAAI6F,EAASH,GAAU,IAAI,IAAI,EAC/B,GAAI,CAACG,EAAQ,MAAM,IAAI,UAAU,2GAA4G,EAC7I,IAAI/E,EAAO+E,EAAO,UAAYA,EAAO,QAAUvG,GAAuB,QACpEuG,EAAO,IACPA,EAAO,QACPA,EAAO,SAAWA,EAAO,QAAQ,KACnC,GACA,OAAO/E,EAAKd,CAAI,CAClB,CACF,EACA,gBAAiB,CACf,aAAc,GACd,SAAU,GACV,MAAO,UAA4B,CACjC,IAAI6F,EAASH,GAAU,IAAI,IAAI,EAC/B,GAAI,CAACG,EAAQ,MAAM,IAAI,UAAU,6GAA8G,EAC/I,MAAO,CACL,OAAQA,EAAO,MACjB,CACF,CACF,CACF,CAAC,EAGG,OAAO,OAAW,KACpB,OAAO,eAAeF,GAAc,UAAW,OAAO,YAAa,CAAE,MAAO,QAAS,CAAC,EAGxF,OAAO,iBAAiBA,GAAe,CACrC,mBAAoB,CAClB,aAAc,GACd,SAAU,GACV,MAAO,SAA6BG,EAA8C,CAChF,MAAO,CAAC,EAAE,OACR,KAAK,aAAa,mBAAmBA,CAAgB,EACrD,KAAK,eAAe,mBAAmBA,CAAgB,EACvD,KAAK,YAAc,KAAK,YAAY,mBAAmBA,CAAgB,EAAI,CAAC,EAC5E,CAAC,EAAE,OAAOA,GAAoB,CAAC,CAAC,EAAE,OAAO,SAAUvH,EAAQ,CACzD,OAAOkH,GAAa,KAAKlH,CAAM,CACjC,CAAC,CACH,EAAE,OAAO,SAAUa,EAAG,EAAG2B,EAAG,CAAE,OAAOA,EAAE,QAAQ3B,CAAC,IAAM,CAAE,CAAC,CAC3D,CACF,CACF,CAAC,EAED,IAAO2G,GAAQH,GC7+CA,SAARI,GAAoCC,EAAK,CAC9C,MAAO,CAAC,EAAEA,GAAOA,EAAI,SAAW,OAAOA,EAAI,SAAY,UAAY,OAAO,KAAKA,CAAG,EAAE,SAAW,EACjG,CCQO,IAAMC,GAAN,KAAsB,CAE3B,YAAY,CACV,uBAAAC,EAAyB,GACzB,eAAAC,EAAiB,GACjB,kBAAAC,EAAoB,EACtB,EAAI,CAAC,EAAG,CAEN,KAAK,mBAAqB,SAAS,uBAAuB,EAE1D,KAAK,wBAA0B,CAAC,CAACF,EAEjC,KAAK,gBAAkBC,EAEvB,KAAK,mBAAqBC,EAM1B,KAAK,UAAY,CAAC,EAMlB,KAAK,uBAAyB,IAAI,IAMlC,KAAK,wBAA0B,CAAC,EAMhC,KAAK,+BAAiC,CAAC,EAEvC,KAAK,oBAAsB,CACzB,YAAa,GAEb,eAAgB,IAAI,GACtB,EAEA,KAAK,kBAAoB,CAEvB,eAAgB,IAAI,GACtB,EAQA,IAAMC,EAAgB,SAAS,gBAAgB,aAAa,oBAAoB,EAGhF,KAAK,iCAAmC,EAAQA,EAE5C,KAAK,mCACP,KAAK,OAASA,GAAiB,QAC/B,KAAK,6BAA6B,GAG/B,SAAS,gBAAgB,OAC5B,SAAS,gBAAgB,KAAO,KAAK,QAAU,SAIjD,KAAK,gCAAgC,CACvC,CAGA,8BAA+B,CAyB7B,KAAK,8BAAgC,SAAS,gBAAgB,MAAQ,IACxE,CAEA,UAAW,CACT,KAAK,mCAAmC,CAC1C,CAKA,IAAI,QAAS,CACX,OAAI,KAAK,iCACA,KAAK,UAAY,GAEnB,SAAS,gBAAgB,IAClC,CAKA,IAAI,OAAOC,EAAO,CAEhB,IAAIC,EACA,KAAK,kCACPA,EAAmC,KAAK,SACxC,KAAK,SAAWD,EACZ,KAAK,gCAAkC,MACzC,KAAK,sBAAsBA,CAAK,IAGlCC,EAAY,SAAS,gBAAgB,KACrC,KAAK,sBAAsBD,CAAK,GAG7BA,EAAM,SAAS,GAAG,GACrB,KAAK,qBAAqBA,CAAK,EAGjC,KAAK,iBAAiBA,EAAOC,CAAS,CACxC,CAMA,sBAAsBC,EAAQ,CAC5B,KAAK,mCAAmC,EACxC,SAAS,gBAAgB,KAAOA,EAChC,KAAK,gCAAgC,CACvC,CAQA,qBAAqBF,EAAO,CAC1B,MAAM,IAAI,MAAM;AAAA,0BACMA,CAAK;AAAA;AAAA;AAAA,KAG1B,CACH,CAKA,IAAI,iBAAkB,CACpB,OAAI,OAAO,KAAK,+BAA+B,KAAK,MAAM,GAAM,SACvD,QAAQ,IAAI,OAAO,OAAO,KAAK,+BAA+B,KAAK,MAAM,CAAC,CAAC,EAE7E,QAAQ,QAAQ,CACzB,CAEA,OAAQ,CACN,KAAK,UAAY,CAAC,EAClB,KAAK,uBAAyB,IAAI,IAClC,KAAK,wBAA0B,CAAC,EAChC,KAAK,+BAAiC,CAAC,CACzC,CAQA,QAAQE,EAAQC,EAAWC,EAAM,CAC/B,GAAI,KAAK,oBAAoBF,EAAQC,CAAS,EAC5C,MAAM,IAAI,MACR,cAAcA,CAAS,4CAA4CD,CAAM,IAC3E,EAGF,KAAK,UAAUA,CAAM,EAAI,KAAK,UAAUA,CAAM,GAAK,CAAC,EACpD,KAAK,UAAUA,CAAM,EAAEC,CAAS,EAAIC,CACtC,CAMA,qBAAqBC,EAASC,EAAQ,CACpC,KAAK,uBAAuB,IAAID,EAASC,CAAM,CACjD,CAQA,eAAeC,EAAY,CAAE,OAAAL,CAAO,EAAI,CAAC,EAAG,CAC1C,OAAO,QAAQ,IACbK,EAAW,IAETJ,GAAa,KAAK,cAAcA,EAAW,CAAE,OAAAD,CAAO,CAAC,CACvD,CACF,CACF,CAQA,cAAcM,EAAc,CAAE,OAAAN,EAAS,KAAK,MAAO,EAAI,CAAE,OAAQ,KAAK,MAAO,EAAG,CAC9E,IAAMO,EAAkB,OAAOD,GAAiB,SAE1CL,EACJM,EAAkB,OAAO,KAAKD,CAAY,EAAE,CAAC,EAAIA,EAGnD,GAAI,KAAK,oBAAoBN,EAAQC,CAAS,EAC5C,OAAO,QAAQ,QAAQ,EAGzB,IAAMO,EAAwB,KAAK,iCAAiCR,EAAQC,CAAS,EACrF,OAAIO,GAIG,KAAK,mBAAmBR,EAAQM,EAAcC,EAAiBN,CAAS,CACjF,CASA,IAAIQ,EAAMC,EAAMC,EAAO,CAAC,EAAG,CACzB,IAAMX,EAASW,EAAK,OAASA,EAAK,OAAS,KAAK,OAC1CC,EAAU,KAAK,mBAAmBH,EAAMT,CAAM,EACpD,OAAKY,EAGa,IAAIC,GAAcD,EAASZ,CAAM,EAClC,OAAOU,CAAI,EAHnB,EAIX,CAGA,iCAAkC,CAC3B,KAAK,6BACR,KAAK,2BAA6B,IAAI,iBAAiBI,GAAa,CAClEA,EAAU,QAAQC,GAAY,CACxB,KAAK,iCACH,SAAS,gBAAgB,OAAS,QAEpC,KAAK,8BAAgC,KACrC,KAAK,sBAAsB,KAAK,MAAM,GAEtC,KAAK,8BAAgC,SAAS,gBAAgB,KAGhE,KAAK,iBAAiB,SAAS,gBAAgB,KAAMA,EAAS,UAAY,EAAE,CAEhF,CAAC,CACH,CAAC,GAEH,KAAK,2BAA2B,QAAQ,SAAS,gBAAiB,CAChE,WAAY,GACZ,gBAAiB,CAAC,MAAM,EACxB,kBAAmB,EACrB,CAAC,CACH,CAGA,oCAAqC,CAC/B,KAAK,4BACP,KAAK,2BAA2B,WAAW,CAE/C,CAOA,oBAAoBf,EAAQC,EAAW,CACrC,MAAO,CAAC,EAAE,KAAK,UAAUD,CAAM,GAAK,KAAK,UAAUA,CAAM,EAAEC,CAAS,EACtE,CAOA,iCAAiCD,EAAQC,EAAW,CAClD,OAAI,KAAK,+BAA+BD,CAAM,EACrC,KAAK,+BAA+BA,CAAM,EAAEC,CAAS,EAEvD,IACT,CAUA,mBAAmBD,EAAQM,EAAcC,EAAiBN,EAAW,CACnE,IAAMG,EAAS,KAAK,oBAAoBE,EAAcC,EAAiBN,CAAS,EAC1Ee,EAAgB,KAAK,2BAA2BZ,EAAQJ,EAAQC,CAAS,EAC/E,YAAK,6BAA6BD,EAAQC,EAAWe,CAAa,EAC3DA,EAAc,KAKnBC,GAAO,CAEL,GACE,KAAK,+BAA+BjB,CAAM,GAC1C,KAAK,+BAA+BA,CAAM,EAAEC,CAAS,IAAMe,EAC3D,CACA,IAAMd,EAAOgB,GAAmBD,CAAG,EAAIA,EAAI,QAAUA,EACrD,KAAK,QAAQjB,EAAQC,EAAWC,CAAI,CACtC,CACF,CACF,CACF,CASA,oBAAoBI,EAAcC,EAAiBN,EAAW,CAC5D,IAAIG,EAAS,KAAK,wBAAwBH,CAAS,EAYnD,GAXKG,IACCG,GAEFH,EAD+DE,EACxCL,CAAS,EAChC,KAAK,wBAAwBA,CAAS,EAAIG,IAE1CA,EAAS,KAAK,uBAAuBH,CAAS,EAC9C,KAAK,wBAAwBA,CAAS,EAAIG,IAI1C,CAACA,EACH,MAAM,IAAI,MAAM,cAAcH,CAAS,2BAA2B,EAGpE,YAAK,wBAAwBA,CAAS,EAAIG,EAEnCA,CACT,CAWA,2BAA2BA,EAAQJ,EAAQC,EAAWN,EAAiB,KAAK,gBAAiB,CAC3F,OAAOS,EAAOJ,EAAQC,CAAS,EAAE,MAAM,IAAM,CAC3C,IAAMkB,EAAO,KAAK,mBAAmBnB,CAAM,EAC3C,OAAOI,EAAOe,EAAMlB,CAAS,EAAE,MAAM,IAAM,CACzC,GAAIN,EACF,OAAO,KAAK,2BAA2BS,EAAQT,EAAgBM,EAAW,EAAE,EAAE,MAC5E,IAAM,CACJ,IAAMmB,EAAe,KAAK,mBAAmBzB,CAAc,EAC3D,MAAM,IAAI,MACR,uBAAuBM,CAAS,yBAAyBD,CAAM,yBAAyBL,CAAc,qEACtDK,CAAM,+BAA+BmB,CAAI,uBAAuBxB,CAAc,cAAcyB,CAAY,KAC1J,CACF,CACF,EAEF,MAAM,IAAI,MACR,uBAAuBnB,CAAS,iBAAiBD,CAAM,8DACdA,CAAM,+BAA+BmB,CAAI,KACpF,CACF,CAAC,CACH,CAAC,CACH,CAQA,6BAA6BnB,EAAQC,EAAWoB,EAAS,CAClD,KAAK,+BAA+BrB,CAAM,IAC7C,KAAK,+BAA+BA,CAAM,EAAI,CAAC,GAEjD,KAAK,+BAA+BA,CAAM,EAAEC,CAAS,EAAIoB,CAC3D,CAOA,uBAAuBpB,EAAW,CAEhC,OAAW,CAACqB,EAAKxB,CAAK,IAAK,KAAK,uBAAwB,CACtD,IAAMyB,EAAmB,OAAOD,GAAQ,UAAYA,IAAQrB,EACtDuB,EACJ,OAAOF,GAAQ,UAAYA,EAAI,YAAY,OAAS,UAAYA,EAAI,KAAKrB,CAAS,EACpF,GAAIsB,GAAoBC,EACtB,OAAO1B,CAEX,CACA,OAAO,IAET,CAQA,mBAAmBE,EAAQ,CACzB,OAAOA,EAAO,UAAU,EAAG,CAAC,CAC9B,CAOA,iBAAiByB,EAAMC,KAAaC,EAAS,CAC3C,KAAK,mBAAmB,iBAAiBF,EAAMC,EAAU,GAAGC,CAAO,CACrE,CAOA,oBAAoBF,EAAMC,KAAaC,EAAS,CAC9C,KAAK,mBAAmB,oBAAoBF,EAAMC,EAAU,GAAGC,CAAO,CACxE,CAKA,cAAcC,EAAO,CACnB,KAAK,mBAAmB,cAAcA,CAAK,CAC7C,CAQA,iBAAiBC,EAAW9B,EAAW,CAErC,KAAK,cAAc,IAAI,YAAY,kBAAkB,CAAC,EAClD8B,IAAc9B,IAGd,KAAK,yBACP,KAAK,gBAAgB8B,EAAW9B,CAAS,EACzC,KAAK,gBAAgB,KAAK,IAAM,CAC9B,KAAK,cAAc,IAAI,YAAY,gBAAiB,CAAE,OAAQ,CAAE,UAAA8B,EAAW,UAAA9B,CAAU,CAAE,CAAC,CAAC,CAC3F,CAAC,GAED,KAAK,cAAc,IAAI,YAAY,gBAAiB,CAAE,OAAQ,CAAE,UAAA8B,EAAW,UAAA9B,CAAU,CAAE,CAAC,CAAC,EAE7F,CAOA,gBAAgB8B,EAAW9B,EAAW,CACpC,IAAM+B,EAAsB,KAAK,UAAU/B,CAAS,GAAK,CAAC,EACpDgC,EAAsB,KAAK,UAAUF,CAAS,GAAK,CAAC,EAC1D,OAAO,KAAKC,CAAmB,EAAE,QAAQ7B,GAAa,CAC3B8B,EAAoB9B,CAAS,GAEpD,KAAK,cAAcA,EAAW,CAC5B,OAAQ4B,CACV,CAAC,CAEL,CAAC,CACH,CAQA,mBAAmBpB,EAAMT,EAAQ,CAC/B,GAAI,OAAOS,GAAS,SAClB,OAAO,KAAK,kBAAkBA,EAAMT,CAAM,EAE5C,IAAMgC,EAAe,MAAM,KAAKvB,CAAI,EAAE,QAAQ,EAC1Ca,EACAV,EACJ,KAAOoB,EAAa,QAGlB,GAFAV,EAAMU,EAAa,IAAI,EACvBpB,EAAU,KAAK,kBAAkBU,EAAKtB,CAAM,EACxCY,EACF,OAAOA,CAIb,CAUA,kBAAkBU,EAAKtB,EAAQ,CAC7B,GAAI,CAACsB,GAAOA,EAAI,QAAQ,GAAG,IAAM,GAC/B,MAAM,IAAI,MACR,oCAAoCA,CAAG,6CACzC,EAEF,GAAM,CAACW,EAAIC,CAAW,EAAIZ,EAAI,MAAM,GAAG,EACjCjB,EAAa,KAAK,UAAUL,CAAM,EAClCmC,EAAW9B,EAAaA,EAAW4B,CAAE,EAAI,CAAC,EAE1CG,EADQF,EAAY,MAAM,GAAG,EACd,OAMnB,CAACtB,EAASyB,IAAU,OAAOzB,GAAY,SAAWA,EAAQyB,CAAI,EAAIzB,EAClEuB,CACF,EAEA,OAAO,OAAOC,IAAW,KAAK,mBAAqBd,EAAM,GAAG,CAC9D,CAKA,8BAA8B,CAAE,OAAAtB,EAAQ,cAAAsC,CAAc,EAAG,CACvD,KAAK,kBAAkB,eAAe,IAAItC,EAAQsC,CAAa,CACjE,CAKA,gCAAgC,CAAE,OAAAtC,EAAQ,cAAAsC,CAAc,EAAG,CACzD,KAAK,oBAAoB,eAAe,IAAItC,EAAQsC,CAAa,CACnE,CACF,ECjlBO,IAAIC,GACTC,GAAiB,IAAI,kCAAkC,GACvD,IAAIC,GAAgB,CAClB,uBAAwB,GACxB,eAAgB,OAClB,CAAC,ECFI,IAAMC,GAAN,KAAiB,CACtB,aAAc,CACZ,KAAK,UAAY,GAEjB,KAAK,QAAU,CAAC,CAClB,CAMA,IAAIC,EAAM,CACR,KAAK,QAAQ,KAAKA,CAAI,EACjB,KAAK,YAER,KAAK,SAAW,IAAI,QAAQC,GAAW,CAErC,KAAK,eAAiBA,CACxB,CAAC,EACD,KAAK,MAAM,EAEf,CAGA,MAAM,OAAQ,CACZ,KAAK,UAAY,GACjB,MAAM,KAAK,QAAQ,CAAC,EAAE,EACtB,KAAK,QAAQ,MAAM,EACf,KAAK,QAAQ,OAAS,EACxB,KAAK,MAAM,GAEX,KAAK,UAAY,GACb,KAAK,gBACP,KAAK,eAAe,EAG1B,CACF,ECvCO,SAASC,GAAWC,EAAK,CAC9B,OAAOA,EAAI,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAI,MAAM,CAAC,CAClD,CCiBA,IAAMC,GAAmCC,GAEvC,cAAcA,CAAW,CACvB,aAAc,CACZ,MAAM,EAMN,KAAK,yBAA2B,CAAC,CACnC,CAOA,aAAaC,EAAmB,CAC9B,MAAM,aAAaA,CAAiB,EACpC,KAAK,0BAA0B,CACjC,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,yBAAyB,UAAY,EAC5C,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3B,KAAK,yBAAyB,UAAY,EAC5C,CASA,OAAO,0BAA0BC,EAAMC,EAAUC,EAAU,CAEzD,IAAMC,EAAa,KAAK,kBACxB,OAAIA,EAAW,IAAIH,CAAI,GAAKG,EAAW,IAAIH,CAAI,EAAE,WACxCG,EAAW,IAAIH,CAAI,EAAE,WAAWC,EAAUC,CAAQ,EAEpDD,IAAaC,CACtB,CAGA,2BAA4B,CAC1B,IAAME,EAAK,KAAK,yBACVC,EAEF,KAAK,YAGTD,EAAG,YAAc,GAEbA,EAAG,OACL,MAAM,KAAKA,EAAG,KAAK,EAAE,QAAQJ,GAAQ,CAE/BK,EAAK,0BAA0BL,EAAM,KAAKA,CAAI,EAAG,MAAS,GAC5D,KAAK,WAAWA,EAAM,MAAS,CAEnC,CAAC,CAEL,CAMA,cAAcA,EAAME,EAAU,CAC5B,MAAM,cAAcF,EAAME,CAAQ,EAElC,KAAK,yBAA2B,KAAK,0BAA4B,CAAC,EAClE,IAAME,EAAK,KAAK,yBAEVC,EAEF,KAAK,YAGJD,EAAG,YAMCC,EAAK,0BAA0BL,EAAM,KAAKA,CAAI,EAAGE,CAAQ,GAChE,KAAK,WAAWF,EAAME,CAAQ,GAN9BE,EAAG,MAAQA,EAAG,OAAS,IAAI,IAE3BA,EAAG,MAAM,IAAIJ,CAAI,EAMrB,CAeA,WAAWA,EAAME,EAAU,CAAC,CAC9B,EAEWI,GAAqBC,EAAYV,EAAgC,ECzHvE,IAAMW,GAAN,cAAqCC,CAAW,CACrD,WAAW,YAAa,CACtB,MAAO,CACL,aAAc,CAAE,UAAW,EAAM,CACnC,CACF,CAWA,iBAAiB,CAAE,QAAAC,CAAQ,EAAG,CAC5B,OAAOA,CACT,CAKA,QAAQC,EAAmB,CACzB,MAAM,QAAQA,CAAiB,EAC3B,KAAK,cAAgB,KAAK,aAAa,CAAC,GAC1C,KAAK,aAAa,OAAQ,KAAK,aAAa,CAAC,EAAE,IAAI,EACnD,KAAK,YAAc,KAAK,aAAa,CAAC,EAAE,KACxC,OAAO,aAAa,KAAK,aAAa,EAGlC,KAAK,cAAgB,YACvB,KAAK,cAAgB,OAAO,WAAW,IAAM,CAC3C,KAAK,gBAAgB,MAAM,EAE3B,KAAK,aAAe,CAAC,CACvB,EAAG,GAAI,IAEA,KAAK,cAAgB,WAC9B,KAAK,gBAAgB,MAAM,CAE/B,CAEA,QAAS,CACP,OAAOC;AAAA,QACH,KAAK,cACP,KAAK,aAAa,IAChB,CAAC,CAAE,QAAAF,EAAS,KAAAG,EAAM,UAAAC,CAAU,IAAMF;AAAA,YAC9B,KAAK,iBAAiB,CAAE,QAAAF,EAAS,KAAAG,EAAM,UAAAC,CAAU,CAAC,CAAC;AAAA,SAEzD,CAAC;AAAA,KAEL,CACF,ECnDO,IAAMC,GAAN,cAAwB,WAAY,CAKzC,YAAYC,EAAOC,EAAQ,CACzB,MAAM,EAGN,KAAK,QAAUD,EAEf,KAAK,SAAWC,GAAU,CAAC,EAE3B,KAAK,KAAOA,GAAQ,MAAQ,OAC9B,CAQA,OAAO,cAAgB,GAUvB,OAAO,MAAQ,GAef,QAAQC,EAAYF,EAAOC,EAAQ,CAEjC,GAAI,CAD0C,KAAK,YACzC,cACR,MAAM,IAAI,MACR,sGACF,EAEF,MAAO,EACT,CAgBA,IAAI,MAAME,EAAG,CACX,KAAK,QAAUA,EAKf,KAAK,cAAc,IAAI,MAAM,eAAe,CAAC,CAC/C,CAEA,IAAI,OAAQ,CACV,OAAO,KAAK,OACd,CAiBA,IAAI,OAAOC,EAAG,CACZ,KAAK,SAAWA,EAKhB,KAAK,cAAc,IAAI,MAAM,gBAAgB,CAAC,CAChD,CAEA,IAAI,QAAS,CACX,OAAO,KAAK,QACd,CA4BA,MAAM,YAAYC,EAAM,CACtB,IAAMC,EAAwC,KAAK,YAC7CC,EAAe,CACnB,KAAMD,EAAK,cACX,KAAM,KAAK,KACX,OAAQ,KAAK,MACb,OAAQ,KAAK,OACb,GAAGD,CACL,EACA,GAAI,KAAK,OAAO,WAAY,CAC1B,GAAI,OAAO,KAAK,OAAO,YAAe,WACpC,OAAO,KAAK,OAAO,WAAWE,CAAY,EAE5C,MAAM,IAAI,MACR,6FAA6F,OAAO,KACjG,OAAO,UAAU,EACtB,CACF,CACA,OAAOD,EAAK,WAAWC,CAAY,CACrC,CAmBA,aAAa,WAAWF,EAAM,CAC5B,MAAO,0CAA0C,KAAK,IAAI,6CAC5D,CAqBA,qBAAqBG,EAAa,CAAC,CAenC,wBAAwBA,EAAa,CAAC,CAWtC,gBAAiB,CAAC,CACpB,EC3OO,IAAMC,GAAN,cAA8BC,EAAU,CAW7C,iBAAiB,CACf,wBAAAC,EACA,qBAAAC,EACA,0BAAAC,EACA,WAAAC,CACF,EAAG,CAED,MAAO,EACT,CACF,ECtBO,IAAMC,GAAN,cAAuBC,EAAU,CACtC,WAAW,eAAgB,CACzB,MAAO,UACT,CAMA,WAAW,kBAAmB,CAC5B,MAAO,CACL,WACA,WACA,QACA,UACA,aACA,SACA,aACA,WACA,UACA,MACF,CACF,CAMA,WAAW,iBAAkB,CAC3B,MAAO,CAAC,QAAS,SAAU,UAAU,CACvC,CAaA,qBAAqB,CAAE,WAAYC,CAAU,EAAG,CAC9C,GAAIA,EAAW,CACb,IAAMC,EAAOD,EAAU,aAAa,MAAM,GAAK,GACzCE,EAAiBF,EAAU,QAAQ,YAAY,EAC/CG,EAAuC,KAAK,aAC9CA,EAAK,iBAAiB,SAASF,CAAI,GAAKE,EAAK,gBAAgB,SAASD,CAAc,IACtFF,EAAU,aAAa,gBAAiB,MAAM,CAElD,CACF,CAOA,wBAAwB,CAAE,WAAYA,CAAU,EAAG,CAC7CA,GACFA,EAAU,gBAAgB,eAAe,CAE7C,CACF,ECzCA,SAASI,GAAUC,EAAS,CAAC,EAAGC,EAAS,CAAC,EAAG,CAC3C,OAAOD,EAAO,OAAOE,GAAK,CAACD,EAAO,SAASC,CAAC,CAAC,EAAE,OAAOD,EAAO,OAAOC,GAAK,CAACF,EAAO,SAASE,CAAC,CAAC,CAAC,CAC/F,CASO,IAAMC,GAA8BC,GAEzC,cAAcC,EACZC,GAAmBC,GAAcC,GAAUC,GAAoBL,CAAU,CAAC,CAAC,CAAC,CAC9E,CAAE,CACA,WAAW,gBAAiB,CAK1B,MAAO,CACL,GAHE,MAAM,YAGc,eACtB,2BAA4BM,EAC9B,CACF,CAGA,WAAW,YAAa,CACtB,MAAO,CACL,WAAY,CAAE,UAAW,EAAM,EAC/B,eAAgB,CAAE,UAAW,EAAM,EACnC,sBAAuB,CAAE,UAAW,EAAM,EAC1C,iBAAkB,CAChB,KAAM,MACN,UAAW,qBACX,QAAS,GACT,UAAW,CACT,cAA4CC,GAASA,EAAM,MAAM,GAAG,EACpE,YAAsCA,GAASA,EAAM,KAAK,GAAG,CAC/D,CACF,EACA,iBAAkB,CAAE,UAAW,EAAM,EACrC,UAAW,CACT,KAAM,QACN,UAAW,aACX,QAAS,EACX,EACA,kBAAmB,CAAE,UAAW,EAAM,EACtC,uBAAwB,CAAE,UAAW,EAAM,EAC3C,yBAA0B,CAAE,UAAW,EAAM,CAC/C,CACF,CAOA,WAAW,iBAAkB,CAC3B,MAAO,CAAC,OAAO,CACjB,CAMA,IAAI,OAAQ,CAUV,MAAO,CACL,GAAG,MAAM,MACT,SAAU,IAAM,CACd,IAAMC,EAAa,KAAK,oBAAoB,0BAA0B,EACtE,OAAAA,EAAW,aAAa,gBAAiB,0BAA0B,EAC5DA,CACT,CACF,CACF,CAOA,IAAI,gBAAiB,CACnB,MAAO,CAAC,GAAG,KAAK,WAAY,GAAG,KAAK,iBAAiB,CACvD,CAEA,aAAc,CACZ,MAAM,EAoBN,KAAK,eAAiB,CAAC,EAgBvB,KAAK,iBAAmB,CAAC,EASzB,KAAK,sBAAwB,CAAC,EAO9B,KAAK,iBAAmB,CAAC,EAOzB,KAAK,UAAY,GAWjB,KAAK,WAAa,CAAC,EAWnB,KAAK,kBAAoB,CAAC,EAO1B,KAAK,uBAAyB,EAM9B,KAAK,uBAAyB,CAAC,EAM/B,KAAK,wBAA0B,CAAC,EAOhC,KAAK,mBAAqB,CAAC,EAM3B,KAAK,uBAAyB,CAAC,EAM/B,KAAK,4BAA8B,CAAC,EAOpC,KAAK,yBAA2B,GAGhC,KAAK,oBAAsB,KAAK,oBAAoB,KAAK,IAAI,EAE7D,KAAK,yBAA2B,KAAK,yBAAyB,KAAK,IAAI,CACzE,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxBC,GAAS,iBAAiB,gBAAiB,KAAK,wBAAwB,CAC1E,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3BA,GAAS,oBAAoB,gBAAiB,KAAK,wBAAwB,CAC7E,CAKA,aAAaC,EAAmB,CAC9B,MAAM,aAAaA,CAAiB,EACpC,KAAK,sBAAwB,GAC7B,KAAK,SAAS,EACV,KAAK,qBAAuB,SAC9B,KAAK,iBAAiB,sBAAuB,IAAM,CACjD,KAAK,yBAA2B,EAClC,CAAC,CAEL,CAMA,WAAWC,EAAMC,EAAU,CAwBzB,GAvBA,MAAM,WAAWD,EAAMC,CAAQ,EAC3BD,IAAS,cAEX,KAAK,kBAAkB,EACvB,KAAK,SAAS,CAAE,mBAAoB,EAAK,CAAC,GACjCA,IAAS,cAClB,KAAK,SAAS,CAAE,mBAAoB,EAAK,CAAC,EAI1C,CACE,UACA,QACA,YACA,UACA,YACA,iBACA,QACF,EAAE,SAASA,CAAI,GAEf,KAAK,6BAA6B,EAGhCA,IAAS,mBAAoB,CAG3B,KAAK,YACP,KAAK,WAAW,aAAa,eAAgB,GAAG,KAAK,uBAAuB,OAAO,CAAC,EAAE,EAIxF,IAAME,EAAOlB,GAAU,KAAK,iBAAkBiB,CAAQ,EAClDC,EAAK,OAAS,GAChB,KAAK,cAAc,IAAI,MAAM,0BAA2B,CAAE,QAAS,EAAK,CAAC,CAAC,EAE5EA,EAAK,QAAQC,GAAQ,CACnB,KAAK,cACH,IAAI,MAAM,mBAAmBC,GAAWD,CAAI,CAAC,UAAW,CAAE,QAAS,EAAK,CAAC,CAC3E,CACF,CAAC,CACH,CAEIH,IAAS,yBACEhB,GAAU,KAAK,sBAAuBiB,CAAQ,EAClD,OAAS,GAChB,KAAK,cAAc,IAAI,MAAM,+BAAgC,CAAE,QAAS,EAAK,CAAC,CAAC,CAGrF,CA4BA,MAAM,SAAS,CAAE,mBAAAI,CAAmB,EAAI,CAAC,EAAG,CAC1C,GAAI,KAAK,SAAU,CACjB,KAAK,yBAAyB,EAC9B,KAAK,mBAAmB,CAAE,OAAQ,OAAQ,SAAU,EAAK,CAAC,EAC1D,KAAK,yBAAyB,EAC9B,MACF,CACK,KAAK,wBAIV,KAAK,uBAAyB,KAAK,mBAC/BA,GAIF,KAAK,yBAAyB,EAEhC,MAAM,KAAK,oBAAoB,EACjC,CAKA,MAAM,qBAAsB,CAS1B,KAAK,iBAAmB,IAAI,QAAQC,GAAW,CAC7C,KAAK,0BAA4BA,CACnC,CAAC,EAID,IAAMV,EACJ,KAAK,sBAAsBW,GAAc,KAAK,WAAW,UAAY,KAAK,WAGtEC,EAAoB,KAAK,eAAe,KAAKC,GAAKA,aAAaC,EAAQ,EAc7E,GADgB,KAAK,UAAUd,CAAK,EACvB,CACPY,IACF,KAAK,uBAAyB,CAAC,CAAE,UAAWA,EAAmB,QAAS,EAAK,CAAC,GAEhF,KAAK,mBAAmB,CAAE,OAAQ,MAAO,CAAC,EAC1C,MACF,CAGA,IAAiCG,EAAqB,KAAK,eAAe,OACtEF,GAAK,EAAEA,aAAaG,KAAoB,EAAEH,aAAaC,GACzD,EAC+BG,EAAiBF,EAAmB,OAAOF,GAEjE,CADwCA,EAAE,YACnC,KACf,EAC8BK,EAAkBH,EAAmB,OAAOF,GAC1BA,EAAE,YACpC,KACd,EAKH,KAAK,wBAAwBI,EAAgBjB,EAAO,CAClD,SAAU,EAAQkB,EAAgB,MACpC,CAAC,EAKD,MAAM,KAAK,yBAAyBA,EAAiBlB,CAAK,CAC5D,CASA,wBAAwBiB,EAAgBjB,EAAO,CAAE,SAAAmB,CAAS,EAAG,CACvDF,EAAe,SACjB,KAAK,uBAAyBA,EAC3B,IAAIJ,IAAM,CACT,UAAWA,EACX,QAAwCA,EAAE,QAAQb,EAAOa,EAAE,MAAO,CAAE,KAAM,IAAK,CAAC,CAClF,EAAE,EACD,OAAOA,GAAK,EAAQA,EAAE,OAAQ,GAEnC,KAAK,mBAAmB,CAAE,OAAQ,OAAQ,SAAAM,CAAS,CAAC,CACtD,CAQA,MAAM,yBAAyBD,EAAiBlB,EAAO,CACrD,GAAIkB,EAAgB,OAAQ,CAC1B,KAAK,UAAY,GACjB,IAAME,EAAiBF,EAAgB,IAAIL,GAAKA,EAAE,QAAQb,EAAOa,EAAE,MAAO,CAAE,KAAM,IAAK,CAAC,CAAC,EACnFQ,EAAwB,MAAM,QAAQ,IAAID,CAAc,EAE9D,KAAK,wBAA0BC,EAC5B,IAAI,CAACC,EAAGC,KAAO,CACd,UAAWL,EAAgBK,CAAC,EAC5B,QAAwCF,EAAsBE,CAAC,CACjE,EAAE,EACD,OAAOV,GAAK,EAAQA,EAAE,OAAQ,EAEjC,KAAK,mBAAmB,CAAE,OAAQ,OAAQ,CAAC,EAC3C,KAAK,UAAY,EACnB,CACF,CAOA,0BAA0BW,EAAyB,CACjD,IAAMC,EACJ,KAAK,eAAe,OAAOZ,GAElB,CADwCA,EAAE,YACnC,OAASA,aAAaG,EACrC,EAGH,OAAKS,EAAiB,OAKlB,KAAK,SAAS,KAAK,UAAU,GAC/B,KAAK,4BAA8B,CAAC,EAC7B,CAAC,GAIHA,EACJ,IAAIZ,IAAM,CACT,UAAWA,EACX,QACEA,EAAE,iBAAiB,CACjB,wBAAyBW,EAAwB,IAAIE,GAASA,EAAM,SAAS,EAC7E,qBAAsB,KAAK,uBAAuB,IAAIA,GAASA,EAAM,SAAS,EAC9E,0BAA2B,KAAK,4BAA4B,IAC1DA,GAASA,EAAM,SACjB,CACF,CAAC,CAEL,EAAE,EACD,OAAOb,GAAK,EAAQA,EAAE,OAAQ,EAvBxB,CAAC,CAwBZ,CASA,mBAAmB,CAAE,OAAAc,EAAQ,SAAAR,CAAS,EAAG,CACvC,IAAMS,EAAsB,CAAC,GAAG,KAAK,uBAAwB,GAAG,KAAK,uBAAuB,EAEtFC,EACJ,KAAK,0BAA0BD,CAAmB,EAEpD,KAAK,mBAAqB,CAAC,GAAGC,EAAe,GAAGD,CAAmB,EAKnE,IAAME,EAH+C,KAAK,YAG5B,gBAAgB,OAC5C,CAACC,EAAKxB,KAAU,CAAE,GAAGwB,EAAK,CAACxB,CAAI,EAAG,CAAC,CAAE,GACrC,CAAC,CACH,EACA,KAAK,mBAAmB,QAAQ,CAAC,CAAE,UAAAyB,EAAW,QAAAC,CAAQ,IAAM,CACrDH,EAAiBE,EAAU,IAAI,IAClCF,EAAiBE,EAAU,IAAI,EAAI,CAAC,GAEtC,IAAME,EAAyCF,EAAU,YACzDF,EAAiBE,EAAU,IAAI,EAAEE,EAAM,aAAa,EAAID,CAC1D,CAAC,EACD,KAAK,iBAAmBH,EAExB,KAAK,eAAiB,CACpB,GAAG,IAAI,IAAI,KAAK,mBAAmB,IAAI,CAAC,CAAE,UAAAE,CAAU,IAAMA,EAAU,IAAI,CAAC,CAC3E,EAEA,KAAK,cAAc,IAAI,MAAM,qBAAsB,CAAE,QAAS,EAAK,CAAC,CAAC,GACjEL,IAAW,SAAW,CAACR,IACrB,KAAK,2BACP,KAAK,0BAA0B,EAAI,CAGzC,CAKA,0BAA2B,CACzB,KAAK,uBAAyB,CAAC,EAC/B,KAAK,wBAA0B,CAAC,CAClC,CAMA,oBAAoB,EAAG,EACjB,EAAE,OAAS,iBAAmB,EAAE,OAAS,mBAC3C,KAAK,SAAS,CAElB,CAKA,mBAAoB,CAClB,IAAMgB,EAAS,CAAC,gBAAiB,gBAAgB,EAC7C,KAAK,kBACP,KAAK,iBAAiB,QAAQtB,GAAK,CACjCsB,EAAO,QAAQC,GAAK,CACdvB,EAAE,qBACJA,EAAE,oBAAoBuB,EAAG,KAAK,mBAAmB,CAErD,CAAC,EACDvB,EAAE,wBAAwB,IAAI,CAChC,CAAC,EAEH,KAAK,eAAe,QAAQA,GAAK,CAC/B,GAAI,EAAEA,aAAawB,IAAY,CAG7B,IAAMC,EAAe,qEADH,MAAM,QAAQzB,CAAC,EAAI,QAAU,OAAOA,CAC6C,mFAEnG,cAAQ,MAAMyB,EAAc,IAAI,EAC1B,IAAI,MAAMA,CAAY,CAC9B,CAEA,GADqD,KAAK,YACjD,gBAAgB,QAAQzB,EAAE,IAAI,IAAM,GAAI,CAC/C,IAAMqB,EAAyCrB,EAAE,YAE3CyB,EAAe,uDAAuDzB,EAAE,IAAI,cAAcqB,EAAM,aAAa,wGAEnH,cAAQ,MAAMI,EAAc,IAAI,EAC1B,IAAI,MAAMA,CAAY,CAC9B,CAIAH,EAAO,QAAQI,GAAa,CACtB1B,EAAE,kBACJA,EAAE,iBAAiB0B,EAAWH,GAAK,CAEjC,KAAK,oBAAoBA,EAAG,CAAE,UAAWvB,CAAE,CAAC,CAC9C,CAAC,CAEL,CAAC,EACDA,EAAE,qBAAqB,IAAI,CAC7B,CAAC,EACD,KAAK,iBAAmB,KAAK,cAC/B,CAOA,UAAUA,EAAG,CACX,OAAI,OAAO,KAAK,UAAa,WACpB,KAAK,SAASA,CAAC,EAGtB,KAAK,aAAe,MAAQ,OAAO,KAAK,WAAe,KAAe,KAAK,aAAe,EAE9F,CAuBA,MAAM,sBAAsB2B,EAAmB,CAC7C,IAAIC,EAAY,MAAM,KAAK,UAC3B,OAAO,QAAQ,IACbD,EAAkB,IAAI,MAAO,CAAE,UAAAR,EAAW,QAAAC,CAAQ,KAC5CD,EAAU,OAAO,YACnBS,EAAY,MAAMT,EAAU,OAAO,WAS9B,CAAE,QANO,MAAMA,EAAU,YAAY,CAC1C,WAAY,KAAK,WACjB,YAAa,KACb,UAAAS,EACA,QAAAR,CACF,CAAC,EACiB,KAAMD,EAAU,KAAM,UAAAA,CAAU,EACnD,CACH,CACF,CAiBA,0BAA2B,CACzB,GAAM,CAAE,cAAAU,CAAc,EAAI,KACrBA,IAIA,KAAK,kBACR,KAAK,gBAAkB,IAAIC,IAGzB,KAAK,iBAAiB,OAAS,EACjC,KAAK,gBAAgB,IAAI,SAAY,CAEnC,IAAMC,EAAwB,KAAK,6BAA6B,CAC9D,iBAAkB,KAAK,mBAAmB,IAAIlB,GAASA,EAAM,SAAS,CACxE,CAAC,EAED,KAAK,oBAAsBkB,EACxB,IAAI/B,GAED,KAAK,mBAAmB,KAAKS,GAAKT,IAAMS,EAAE,SAAS,CAGtD,EACA,OAAO,OAAO,EAEb,KAAK,oBAAoB,OAAS,IACpC,KAAK,4BAA8B,KAAK,qBAG1C,IAAMuB,EAAa,MAAM,KAAK,sBAAsB,KAAK,mBAAmB,EAC5EH,EAAc,aAAeG,EAAW,OAASA,EAAa,CAAC,CACjE,CAAC,EAED,KAAK,gBAAgB,IAAI,SAAY,CACnCH,EAAc,aAAe,CAAC,CAChC,CAAC,EAEH,KAAK,iBAAmB,KAAK,gBAAgB,SAC/C,CAYA,0BAA0BnC,EAAMuC,EAAM,CACpC,MAAO,EACT,CAMA,IAAI,wBAAyB,CAC3B,MAAO,CAAE,WAAY,KAAK,WAAY,GAAI,IAAK,CACjD,CAwBA,kBACEvC,EACAuC,EAAO,KAAK,uBACZC,EAAmB,KAAK,0BAA0B,KAAK,IAAI,EAC3D,CACA,OAAOA,EAAiBxC,EAAMuC,CAAI,CACpC,CAOA,uBAAuBvC,EAAM,CAC3B,OACE,KAAK,gBACL,KAAK,eAAe,SAASA,CAAI,GACjC,KAAK,uBACL,KAAK,sBAAsB,SAASA,CAAI,CAE5C,CAKA,QAAQJ,EAAmB,CAGzB,GAFA,MAAM,QAAQA,CAAiB,EAG7BA,EAAkB,IAAI,uBAAuB,GAC7CA,EAAkB,IAAI,gBAAgB,EACtC,CACA,IAAM6C,EAA+C,KAAK,YAE1D,KAAK,iBACHA,EAAK,gBACF,IAAIzC,GAAS,KAAK,uBAAuBA,CAAI,EAAIA,EAAO,MAAU,EAClE,OAAO,OAAO,EAEnB,KAAK,yBAAyB,CAChC,CAOA,GALIJ,EAAkB,IAAI,0BAA0B,GAAK,KAAK,2BAC5D,KAAK,SAAS,CAAE,mBAAoB,EAAK,CAAC,EAC1C,KAAK,yBAA2B,IAG9BA,EAAkB,IAAI,kBAAkB,EAAG,CAC7C,IAAM8C,EACJ9C,EAAkB,IAAI,kBAAkB,EAEtC8C,GACF,OAAO,QAAQ,KAAK,gBAAgB,EAAE,QAAQ,CAAC,CAAC1C,EAAM2C,CAAW,IAAM,CAEnED,EAAW1C,CAAI,GACf,KAAK,UAAU2C,CAAW,IAAM,KAAK,UAAUD,EAAW1C,CAAI,CAAC,GAE/D,KAAK,cAAc,IAAI,YAAY,GAAGA,CAAI,eAAgB,CAAE,OAAQ2C,CAAY,CAAC,CAAC,CAEtF,CAAC,CAEL,CACF,CAKA,8BAA+B,CAI7B,IAAMC,EAH+C,KAAK,YAInD,gBACF,IAAI5C,GACH,KAAK,kBACHA,EACA,KAAK,uBACL,KAAK,0BAA0B,KAAK,IAAI,CAC1C,EACIA,EACA,MACN,EACC,OAAO,OAAO,EAGf,KAAK,UAAU,KAAK,qBAAqB,IAAM,KAAK,UAAU4C,CAAwB,IACxF,KAAK,sBAAwBA,EAEjC,CAUA,6BAA6B,CAAE,iBAAAC,CAAiB,EAAG,CAEjD,IAAMC,EAD+C,KAAK,YACvC,gBAWnB,OATYD,EACT,OAAOvC,GACN,KAAK,kBACHA,EAAE,KACF,KAAK,uBACL,KAAK,0BAA0B,KAAK,IAAI,CAC1C,CACF,EACC,KAAK,CAACyC,EAAGC,IAAMF,EAAM,QAAQC,EAAE,IAAI,EAAID,EAAM,QAAQE,EAAE,IAAI,CAAC,EACpD,MAAM,EAAG,KAAK,sBAAsB,CACjD,CACF,EAEWC,GAAgBC,EAAYjE,EAA2B,EC31BpE,IAAMkE,GAA4BC,GAEhC,cAA0BC,GAAcC,EAAiBF,CAAU,CAAC,CAAE,CAEpE,WAAW,YAAa,CACtB,MAAO,CACL,eAAgB,CAAE,UAAW,EAAM,EACnC,gBAAiB,CAAE,UAAW,EAAM,EACpC,cAAe,CAAE,UAAW,EAAM,CACpC,CACF,CAMA,cAAcG,EAAMC,EAAQ,CAC1B,MAAM,cAAcD,EAAMC,CAAM,EAE5BD,IAAS,cAAgB,KAAK,aAAeC,GAC/C,KAAK,qBAAqB,CAAE,WAAY,KAAK,UAAW,EAAG,CAAE,WAAYA,CAAO,CAAC,EAE/ED,IAAS,mBAAqB,KAAK,kBAAoBC,GACzD,KAAK,iBAAiB,CAAE,OAAQ,YAAa,CAAC,EAE5CD,IAAS,kBAAoB,KAAK,iBAAmBC,GACvD,KAAK,iBAAiB,CAAE,OAAQ,WAAY,CAAC,CAEjD,CAKA,IAAI,OAAQ,CACV,OAAQ,KAAK,YAAc,KAAK,WAAW,OAAU,KAAK,SAAW,EACvE,CAGA,IAAI,MAAMC,EAAO,CAEX,KAAK,YACP,KAAK,WAAW,MAAQA,EAExB,KAAK,QAAU,QAEf,KAAK,QAAUA,CAEnB,CAqBA,aAAaC,EAAGC,EAAM,CAEtB,CAUA,OAAOD,EAAGC,EAAM,CACd,OAAOD,CACT,CAYA,UAAUA,EAAGC,EAAM,CACjB,OAAOD,CACT,CASA,WAAWA,EAAG,CACZ,OAAOA,IAAM,OAAYA,EAAI,EAC/B,CASA,aAAaA,EAAG,CACd,OAAOA,IAAM,OAAY,GAAKA,CAChC,CAcA,iBAAiB,CAAE,OAAAE,CAAO,EAAI,CAAE,OAAQ,IAAK,EAAG,CAC1C,KAAK,4BAGT,KAAK,0BAA4B,GAC7BA,IAAW,UACTA,IAAW,aAEb,KAAK,WAAa,KAAK,aAAa,KAAK,eAAe,EAC/CA,IAAW,cACpB,KAAK,WAAa,KAAK,YAAY,IAGnCA,IAAW,cACb,KAAK,eAAiB,KAAK,eAAe,GAExCA,IAAW,eACb,KAAK,gBAAkB,KAAK,WAAW,KAAK,UAAU,GAExD,KAAK,iCAAiC,EACtC,KAAK,0BAA4B,GACjC,KAAK,gBAAkB,KAAK,MAC9B,CAOA,YAAYH,EAAQ,KAAK,eAAgB,CAIvC,GAAIA,IAAU,GAKZ,MAAO,GAKT,GAAI,OAAOA,GAAU,SAInB,OAWF,IAAMI,EAAS,KAAK,OAAOJ,EAAO,KAAK,aAAa,EACpD,OAAOI,IAAW,OAAYA,EAAS,IAAIC,GAAYL,CAAK,CAC9D,CAMA,gBAAiB,CAYf,OACE,KAAK,sBACL,KAAK,gBAAgB,QACrB,KAAK,eAAe,SAAS,OAAO,GACpC,KAAK,WAEE,KAAK,WAAa,KAAK,MAAQ,OAGpC,KAAK,sBAAsBK,GAItB,KAAK,WAAW,UAGlB,KAAK,UAAU,KAAK,WAAY,KAAK,aAAa,CAC3D,CAQA,wBAAwBC,EAAM,CAC5B,KAAK,iBAAiB,CAAE,OAAQ,OAAQ,CAAC,EACzC,KAAK,gCAAgC,GAAGA,CAAI,CAC9C,CASA,mCAAmCA,EAAM,CAEvC,KAAK,cAEH,IAAI,YAAY,sBAAuB,CACrC,QAAS,GACT,OAAiD,CAC/C,SAAU,CAAC,IAAI,EACf,kBAAmB,EAAQ,KAAK,oBAClC,CACF,CAAC,CACH,CACF,CASA,mBAAoB,CACb,KAAK,yBACR,KAAK,qBAAqB,EAE5B,IAAMC,EAAgB,KAAK,eAC3B,KAAK,WAAa,KAAK,YAAY,KAAK,KAAK,EAIzCA,IAAkB,KAAK,gBAAkB,KAAK,kBAAoB,KAAK,OACzE,KAAK,iBAAiB,CAE1B,CAMA,sBAAuB,CACrB,IAAMC,EAAmB,KAAK,MAC1BC,EAAoB,KAAK,MAAM,OAGjC,KAAK,YACL,mBAAoB,KAAK,YACQ,KAAK,YAAa,OAAS,UAE5DA,EAA2C,KAAK,WAAW,gBAE7D,IAAMC,EAAoB,KAAK,aAAa,KAAK,MAAO,CACtD,GAAG,KAAK,cACR,kBAAAD,EACA,cAAe,KAAK,eACtB,CAAC,EAGD,GADA,KAAK,gBAAkBD,EACnBE,IAAsB,QAK1B,GAAI,OAAOA,GAAsB,SAC/B,KAAK,MAAQA,UACJ,OAAOA,GAAsB,SAAU,CAChD,GAAM,CAAE,UAAAC,EAAW,WAAAC,CAAW,EAAIF,EAClC,KAAK,MAAQC,EACTC,GAAc,KAAK,YAAc,mBAAoB,KAAK,aAC5D,KAAK,WAAW,eAAiBA,EACjC,KAAK,WAAW,aAAeA,EAEnC,EACF,CASA,kCAAmC,CAC7B,KAAK,eAAe,IAEtB,KAAK,MAAQ,OAAO,KAAK,eAAmB,IAAc,KAAK,eAAiB,GAEpF,CAUA,gBAAiB,CACf,MAAO,CAAC,KAAK,oBACf,CASA,kBAAmB,CAGjB,KAAK,cAAc,IAAI,MAAM,qBAAsB,CAAE,QAAS,EAAK,CAAC,CAAC,CACvE,CAGA,qBAAsB,CAGpB,KAAK,qBAAuB,GAC5B,KAAK,kBAAkB,EACvB,KAAK,qBAAuB,EAC9B,CAKA,qBAAqB,CAAE,KAAAC,CAAK,EAAG,CACzBA,IAAS,mBACX,KAAK,wBAA0B,GACtBA,IAAS,mBAClB,KAAK,wBAA0B,GAE/B,KAAK,kBAAkB,EAE3B,CAEA,aAAc,CACZ,MAAM,EAUN,KAAK,SAAW,SAKhB,KAAK,cAA8C,CAAC,EAapD,KAAK,eAAiB,OAiBtB,KAAK,gBAAkB,OAavB,KAAK,WAAa,GASlB,KAAK,qBAAuB,GAK5B,KAAK,gBAAkB,GACvB,KAAK,qBAAuB,KAAK,qBAAqB,KAAK,IAAI,EAE/D,KAAK,iBAAiB,qBAAsB,KAAK,mBAAmB,EAEpE,KAAK,iBAAiB,QAAS,KAAK,SAAS,EAK7C,KAAK,iCAAmC,KAAK,iCAAiC,KAAK,IAAI,EAKvF,KAAK,oCAAsC,IAAM,CAG/C,WAAW,KAAK,gCAAgC,CAClD,CACF,CAKA,WAAY,CACV,KAAK,WAAa,GAClB,KAAK,cAAc,KAAO,SAC1B,WAAW,IAAM,CACf,KAAK,WAAa,GAClB,KAAK,cAAc,KAAO,MAC5B,CAAC,CACH,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EAOpB,OAAO,KAAK,WAAe,KAC7B,KAAK,kBAAkB,EAGzB,KAAK,gBAAkB,KAAK,MAE5B,KAAK,iCAAiC,EAElC,KAAK,aACP,KAAK,WAAW,iBAAiB,KAAK,SAAU,KAAK,mCAAmC,EACxF,KAAK,WAAW,iBAAiB,QAAS,KAAK,gBAAgB,EAC/D,KAAK,WAAW,iBAAiB,mBAAoB,KAAK,oBAAoB,EAC9E,KAAK,WAAW,iBAAiB,iBAAkB,KAAK,oBAAoB,EAEhF,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EACvB,KAAK,aACP,KAAK,WAAW,oBAAoB,QAAS,KAAK,gBAAgB,EAClE,KAAK,WAAW,oBACd,KAAK,SAEH,KAAK,mCAET,EACA,KAAK,WAAW,oBAAoB,mBAAoB,KAAK,oBAAoB,EACjF,KAAK,WAAW,oBAAoB,iBAAkB,KAAK,oBAAoB,EAEnF,CACF,EAEWC,GAAcC,EAAYrB,EAAyB,ECxjBhE,IAAMsB,GAAsCC,GAE1C,cAAoCC,EAAiBD,CAAU,CAAE,CAE/D,WAAW,YAAa,CACtB,MAAO,CACL,QAAS,CAAE,KAAM,QAAS,QAAS,EAAK,EACxC,MAAO,CAAE,KAAM,QAAS,QAAS,EAAK,EACtC,OAAQ,CAAE,KAAM,QAAS,QAAS,EAAK,EACvC,UAAW,CAAE,UAAW,EAAM,EAC9B,UAAW,CAAE,UAAW,EAAM,CAChC,CACF,CAMA,cAAcE,EAAMC,EAAQ,CAC1B,MAAM,cAAcD,EAAMC,CAAM,EAC5BD,IAAS,WAAa,KAAK,UAAYC,GACzC,KAAK,kBAAkB,EAGrBD,IAAS,eAGX,KAAK,OAAS,CAAC,KAAK,SAAS,GAG3BA,IAAS,SAAW,KAAK,QAAUC,GACrC,KAAK,gBAAgB,CAEzB,CAEA,aAAc,CACZ,MAAM,EAMN,KAAK,QAAU,GAMf,KAAK,MAAQ,GAQb,KAAK,UAAY,GAMjB,KAAK,OAAS,GAed,KAAK,YAAc,OAOnB,KAAK,mBAAqB,sBAM1B,KAAK,eAAiB,KAAK,eAAe,KAAK,IAAI,EAMnD,KAAK,qBAAuB,KAAK,qBAAqB,KAAK,IAAI,CACjE,CAKA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,iBAAiB,KAAK,YAAa,KAAK,cAAc,EAC3D,KAAK,iBAAiB,KAAK,mBAAoB,KAAK,oBAAoB,EACxE,KAAK,qBAAqB,CAC5B,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3B,KAAK,oBAAoB,KAAK,YAAa,KAAK,cAAc,EAC9D,KAAK,oBAAoB,KAAK,mBAAoB,KAAK,oBAAoB,CAC7E,CAQA,sBAAuB,CACrB,KAAK,MAAQ,GACb,KAAK,UAAY,CAAC,KAAK,SAAS,CAClC,CAOA,gBAAiB,CACf,KAAK,QAAU,GACf,KAAK,UAAY,CAAC,KAAK,SAAS,CAClC,CAMA,sBAAuB,CACrB,KAAK,MAAQ,EACf,CAKA,uBAAwB,CACtB,KAAK,QAAU,GACf,KAAK,UAAY,GACjB,KAAK,MAAQ,GACb,KAAK,UAAY,CAAC,KAAK,SAAS,CAClC,CAMA,mBAAoB,CAElB,KAAK,cAAc,IAAI,MAAM,kBAAmB,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CACpF,CAMA,iBAAkB,CAEhB,KAAK,cAAc,IAAI,MAAM,gBAAiB,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CAClF,CAyBA,0BAA0BC,EAAMC,EAAM,CACpC,OAAQA,EAAK,SAAWA,EAAK,OAAUA,EAAK,WAAaA,EAAK,SAChE,CAKA,IAAI,wBAAyB,CAC3B,MAAO,CAEL,GAAG,MAAM,uBACT,UAAW,KAAK,UAChB,QAAS,KAAK,QACd,MAAO,KAAK,MACZ,OAAQ,KAAK,OACb,UAAW,KAAK,SAClB,CACF,CACF,EAEWC,GAAwBC,EAAYR,EAAmC,ECnN7E,IAAMS,GAAN,cAAwBC,EAC7BC,GAAsBC,GAAWC,GAAYC,GAAcC,GAAUC,CAAU,CAAC,CAAC,CAAC,CAAC,CACrF,CAAE,CAIA,aAAaC,EAAmB,CAC9B,MAAM,aAAaA,CAAiB,EAEpC,KAAK,mBAAqB,KAAK,UACjC,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,UAAY,KAAK,UAAU,KAAK,IAAI,EACzC,KAAK,WAAW,iBAAiB,SAAU,KAAK,SAAS,EACzD,KAAK,UAAU,IAAI,YAAY,CACjC,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3B,KAAK,WAAW,oBAAoB,SAAU,KAAK,SAAS,CAC9D,CAEA,uBAAwB,CACtB,MAAM,sBAAsB,EAC5B,KAAK,UAAY,EACnB,CAMA,OAAQ,CACN,KAAK,WAAa,KAAK,mBACvB,KAAK,sBAAsB,CAC7B,CAMA,OAAQ,CAEN,KAAK,WAAa,EACpB,CAMA,WAAY,CAEV,KAAK,cAAc,IAAI,MAAM,qBAAsB,CAAE,QAAS,EAAK,CAAC,CAAC,CACvE,CAKA,IAAI,wBAAyB,CAC3B,MAAO,CAAE,GAAG,MAAM,uBAAwB,QAAS,KAAK,OAAQ,CAClE,CAKA,IAAI,gBAAiB,CACnB,OAAO,KAAK,UACd,CACF,ECDO,IAAMC,GAAN,cAAqC,KAAM,CAMhD,OAAQ,CACN,OAAO,OAAO,KAAK,IAAI,EAAE,OAAOC,GAAK,OAAO,MAAM,OAAOA,CAAC,CAAC,CAAC,CAC9D,CACF,EC5EA,IAAMC,GAAmCC,GAGvC,cAAcC,GAAqBD,CAAU,CAAE,CAE7C,WAAW,YAAa,CACtB,MAAO,CACL,kBAAmB,CAAE,KAAM,OAAQ,CACrC,CACF,CAEA,aAAc,CACZ,MAAM,EAON,KAAK,aAAe,IAAIE,GAaxB,KAAK,kBAAoB,GAEzB,KAAK,2BAA6B,KAAK,2BAA2B,KAAK,IAAI,EAC3E,KAAK,kCAAoC,KAAK,kCAAkC,KAAK,IAAI,EAEzF,KAAK,iBACH,wBACmD,KAAK,0BAC1D,EACA,KAAK,iBACH,4BACmD,KAAK,iCAC1D,EAQA,KAAK,aAAe,IAAI,QAAQ,CAACC,EAASC,IAAW,CACnD,KAAK,sBAAwBD,EAC7B,KAAK,qBAAuBC,CAC9B,CAAC,EAMD,KAAK,qBAAuB,IAAI,QAAQ,CAACD,EAASC,IAAW,CAC3D,KAAK,8BAAgCD,EACrC,KAAK,6BAA+BC,CACtC,CAAC,EACD,KAAK,qBAAqB,KAAO,GACjC,KAAK,qBAAqB,KACxB,IAAM,CACJ,KAAK,qBAAqB,KAAO,GACjC,KAAK,sBAAsB,MAAS,CACtC,EACA,IAAM,CACJ,WAAK,qBAAqB,KAAO,GACjC,KAAK,qBAAqB,MAAS,EAC7B,IAAI,MACR,0EACF,CACF,CACF,CACF,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,sBAAsB,CAC7B,CAMA,uBAAwB,CACtB,QAAQ,QAAQ,EAAE,KAAK,IAAM,KAAK,8BAA8B,MAAS,CAAC,CAC5E,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAEvB,KAAK,qBAAqB,OAAS,IACrC,QAAQ,QAAQ,EAAE,KAAK,IAAM,CAC3B,QAAQ,QAAQ,EAAE,KAAK,IAAM,CAC3B,KAAK,6BAA6B,CACpC,CAAC,CACH,CAAC,CAEL,CAMA,wBAAwBC,EAAI,CAC1B,OAAO,KAAK,aAAa,KAAKC,GAAaA,IAAcD,CAAE,CAC7D,CAMA,eAAeE,EAAOC,EAAiB,CAarC,GAVAD,EAAM,iBAAyD,KAG3DC,GAAmB,EACrB,KAAK,aAAa,OAAOA,EAAiB,EAAGD,CAAK,EAElD,KAAK,aAAa,KAAKA,CAAK,EAI1B,KAAK,kBAAmB,CAC1B,GAAM,CAAE,KAAAE,CAAK,EAAIF,EACjB,GAAIE,IAAS,KAAK,KAChB,cAAQ,KAAK,cAAeF,CAAK,EAC3B,IAAI,UAAU,mCAAmCE,CAAI,kBAAkB,EAG/E,GAAIA,EAAK,OAAO,EAAE,IAAM,KACjB,MAAM,QAAQ,KAAK,aAAaA,CAAI,CAAC,IACxC,KAAK,aAAaA,CAAI,EAAI,IAAIP,IAE5BM,EAAkB,EACpB,KAAK,aAAaC,CAAI,EAAE,OAAOD,EAAiB,EAAGD,CAAK,EAExD,KAAK,aAAaE,CAAI,EAAE,KAAKF,CAAK,UAE3B,CAAC,KAAK,aAAaE,CAAI,EAChC,KAAK,aAAaA,CAAI,EAAIF,MAE1B,eAAQ,KAAK,cAAeA,CAAK,EAC3B,IAAI,UACR,SAASE,CAAI,kEACf,CAEJ,CACF,CAKA,kBAAkBF,EAAO,CAEvB,IAAMG,EAAQ,KAAK,aAAa,QAAQH,CAAK,EAM7C,GALIG,EAAQ,IACV,KAAK,aAAa,OAAOA,EAAO,CAAC,EAI/B,KAAK,kBAAmB,CAC1B,GAAM,CAAE,KAAAD,CAAK,EAAIF,EACjB,GAAIE,EAAK,OAAO,EAAE,IAAM,MAAQ,KAAK,aAAaA,CAAI,EAAG,CACvD,IAAME,EAAM,KAAK,aAAaF,CAAI,EAAE,QAAQF,CAAK,EAC7CI,EAAM,IACR,KAAK,aAAaF,CAAI,EAAE,OAAOE,EAAK,CAAC,CAEzC,MAAW,KAAK,aAAaF,CAAI,GAC/B,OAAO,KAAK,aAAaA,CAAI,CAEjC,CACF,CAOA,2BAA2BG,EAAI,CAC7B,IAAML,EAAQK,EAAG,OAAO,QAKxB,GAJIL,IAAU,MAIV,KAAK,wBAAwBA,CAAK,EAEpC,OAEFK,EAAG,gBAAgB,EAInB,IAAIJ,EAAkB,GACtB,GAAI,KAAK,cAAgB,MAAM,QAAQ,KAAK,YAAY,GAEtD,OAAW,CAACK,EAAGC,CAAW,IAAK,KAAK,aAAa,QAAQ,EAGvD,GAAI,EAAAA,EAAY,wBAAwBP,CAAK,EAAI,KAAK,6BAE/C,CAELC,EAAkBK,EAClB,KACF,EAGJ,KAAK,eAAeN,EAAOC,CAAe,CAC5C,CAMA,kCAAkCI,EAAI,CACpC,IAAMG,EAAU,KAAK,aAAaH,EAAG,OAAO,OAAO,EAC/CG,IACF,KAAK,aAAaH,EAAG,OAAO,OAAO,EAAIG,EACvC,OAAO,KAAK,aAAaH,EAAG,OAAO,OAAO,EAE9C,CAMA,8BAA8BA,EAAI,CAChC,IAAML,EAAQK,EAAG,OAAO,QACpBL,IAAU,MAIT,KAAK,wBAAwBA,CAAK,IAIvCK,EAAG,gBAAgB,EAEnB,KAAK,kBAAkBL,CAAK,EAC9B,CACF,EAEWS,GAAqBC,EAAYlB,EAAgC,EC1Q9E,IAAMmB,GAAqCC,GAEzC,cAAmCC,GAAYC,GAAWC,EAAiBH,CAAU,CAAC,CAAC,CAAE,CAEvF,WAAW,YAAa,CACtB,MAAO,CACL,aAAc,CAAE,KAAM,OAAQ,QAAS,EAAK,CAC9C,CACF,CAEA,aAAc,CACZ,MAAM,EAMN,KAAK,aAAe,MACtB,CAMA,IAAI,YAAa,CACf,OAA8D,MAAM,UACtE,CAGA,IAAI,gBAAiB,CACnB,IAAMI,EAAS,KAAK,WACpB,OAAIA,GAAUA,EAAO,eACZA,EAAO,eAET,CACT,CAEA,IAAI,eAAeC,EAAO,CACxB,IAAMD,EAAS,KAAK,WAChBA,GAAUA,EAAO,iBACnBA,EAAO,eAAiBC,EAE5B,CAGA,IAAI,cAAe,CACjB,IAAMD,EAAS,KAAK,WACpB,OAAIA,GAAUA,EAAO,aACZA,EAAO,aAET,CACT,CAEA,IAAI,aAAaC,EAAO,CACtB,IAAMD,EAAS,KAAK,WAChBA,GAAUA,EAAO,eACnBA,EAAO,aAAeC,EAE1B,CAMA,IAAI,OAAQ,CACV,OAAQ,KAAK,YAAc,KAAK,WAAW,OAAU,KAAK,SAAW,EACvE,CAMA,IAAI,MAAMA,EAAO,CAEX,KAAK,YAEH,KAAK,WAAW,QAAUA,GAC5B,KAAK,0BAA0BA,CAAK,EAGtC,KAAK,QAAU,QAEf,KAAK,QAAUA,CAEnB,CAOA,0BAA0BC,EAAU,CAElC,GAAI,KAAK,QAIP,GAAI,CAEF,GAAI,EAAE,KAAK,sBAAsB,mBAAoB,CACnD,IAAMC,EAAQ,KAAK,WAAW,eAC9B,KAAK,WAAW,MAAQD,EAGxB,KAAK,WAAW,eAAiBC,EACjC,KAAK,WAAW,aAAeA,CACjC,CACF,MAAgB,CAEd,KAAK,WAAW,MAAQD,CAC1B,MAEA,KAAK,WAAW,MAAQA,CAE5B,CAKA,kCAAmC,CAEjC,GADA,MAAM,iCAAiC,EACnC,KAAK,eAAe,GAAK,KAAK,QAChC,GAAI,CAEF,KAAK,WAAW,eAAiB,KAAK,WAAW,MAAM,MAEzD,MAAY,CAAC,CAEjB,CAKA,IAAI,gBAAiB,CACnB,OAAO,KAAK,UACd,CACF,EAEWE,GAAuBC,EAAYV,EAAkC,EClJ3E,IAAMW,GAAN,cAAsCC,EAAU,CACrD,WAAW,eAAgB,CACzB,MAAO,yBACT,CAQA,QAAQC,EAAOC,EAASC,EAAQ,CAE9B,OADiBA,GAAQ,KAAK,8BAA8B,OAAO,CAErE,CAEA,aAAa,YAAa,CACxB,MAAO,EACT,CACF,ECQA,IAAMC,GAA+BC,GAEnC,cAA6BC,GAC3BC,EAAiBC,GAAcC,GAAcC,GAAUL,CAAU,CAAC,CAAC,CAAC,CACtE,CAAE,CAEA,WAAW,YAAa,CACtB,MAAO,CACL,UAAW,CAAE,KAAM,QAAS,QAAS,EAAK,EAC1C,QAAS,CAAE,KAAM,QAAS,QAAS,EAAK,EACxC,MAAO,CAAE,KAAM,QAAS,QAAS,EAAK,EACtC,QAAS,CAAE,KAAM,QAAS,QAAS,EAAK,EACxC,UAAW,CAAE,KAAM,QAAS,QAAS,EAAK,CAC5C,CACF,CAMA,IAAI,YAAa,CACf,OAAO,IACT,CAKA,IAAI,YAAa,CACf,OAAO,KAAK,wBAAwB,YAAY,CAClD,CAEA,IAAI,WAAWM,EAAQ,CACjB,KAAK,uBACP,KAAK,sBAAwB,GAC7B,KAAK,qBAAqB,KAAK,IAAM,CACnC,KAAK,+BAA+B,aAAcA,CAAM,CAC1D,CAAC,GAED,KAAK,+BAA+B,aAAcA,CAAM,CAE5D,CAKA,IAAI,iBAAkB,CACpB,OAAO,KAAK,wBAAwB,iBAAiB,CACvD,CAEA,IAAI,gBAAgBA,EAAQ,CACtB,KAAK,4BACP,KAAK,2BAA6B,GAClC,KAAK,qBAAqB,KAAK,IAAM,CACnC,KAAK,+BAA+B,kBAAmBA,CAAM,CAC/D,CAAC,GAED,KAAK,+BAA+B,kBAAmBA,CAAM,CAEjE,CAKA,IAAI,gBAAiB,CACnB,OAAO,KAAK,wBAAwB,gBAAgB,CACtD,CAEA,IAAI,eAAeA,EAAQ,CACzB,KAAK,+BAA+B,iBAAkBA,CAAM,CAC9D,CAKA,IAAI,WAAY,CACd,OAAO,KAAK,qBAAqB,WAAW,CAC9C,CAEA,aAAc,CACZ,MAAM,EAGN,KAAK,MAAQ,GAKb,KAAK,SAAW,GAKhB,KAAK,UAAY,GAKjB,KAAK,MAAQ,GAKb,KAAK,QAAU,GAKf,KAAK,QAAU,GAGf,KAAK,qBAAuB,GAE5B,KAAK,sBAAwB,GAE7B,KAAK,2BAA6B,GAElC,KAAK,sBAAwB,KAAK,sBAAsB,KAAK,IAAI,EAEjE,KAAK,iBAAiB,UAAW,KAAK,YAAY,EAClD,KAAK,iBAAiB,WAAY,KAAK,WAAW,EAClD,KAAK,iBAAiB,gBAAiB,KAAK,UAAU,EACtD,KAAK,iBAAiB,qBAAsB,KAAK,0BAA0B,EAE3E,KAAK,kBAAoB,CAAC,IAAIC,EAAyB,EAEvD,KAAK,mCAAqC,IAAI,IAG9C,KAAK,gBAAkB,CAAE,WAAY,CAAC,EAAG,gBAAiB,CAAC,CAAE,CAC/D,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,aAAa,OAAQ,OAAO,EAEjC,KAAK,aAAa,KAAK,IAAM,CAC3B,KAAK,sBAAwB,GAC7B,KAAK,2BAA6B,GAClC,KAAK,wBAAwB,CAC/B,CAAC,CACH,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAEvB,KAAK,kCACP,SAAS,oBAAoB,QAAS,KAAK,qBAAqB,EAChE,KAAK,gCAAkC,IAEzC,KAAK,mCAAmC,MAAM,CAChD,CAEA,yBAA0B,CACxB,KAAK,aAAa,QAAQC,GAAM,CAC1B,OAAOA,EAAG,sBAAyB,YACrCA,EAAG,qBAAqB,CAE5B,CAAC,CACH,CAKA,uCAAwC,CACtC,KAAK,qBAAqB,KAAK,IAAM,CACnC,KAAK,uCAAuC,CAC9C,CAAC,CACH,CAKA,QAAQC,EAAmB,CACzB,MAAM,QAAQA,CAAiB,EAE3BA,EAAkB,IAAI,UAAU,IAC9B,KAAK,SACP,KAAK,8BAA8B,EAEnC,KAAK,qCAAqC,GAI1CA,EAAkB,IAAI,SAAS,GAC7B,KAAK,UAAY,IACnB,KAAK,4BAA4B,CAGvC,CAEA,6BAA8B,CACvB,KAAK,kCACR,SAAS,iBAAiB,QAAS,KAAK,qBAAqB,EAC7D,KAAK,gCAAkC,GAE3C,CAKA,sBAAsBC,EAAO,CACC,CAAC,KAAK,SAA8BA,EAAM,MAAO,IAE3E,KAAK,QAAU,GAEnB,CAEA,+BAAgC,CAC9B,KAAK,aAAa,QAAQC,GAAS,CAC7BA,EAAM,yBACRA,EAAM,wBAAwB,CAElC,CAAC,CACH,CAEA,sCAAuC,CACrC,KAAK,aAAa,QAAQA,GAAS,CAC7BA,EAAM,4BACRA,EAAM,2BAA2B,CAErC,CAAC,CACH,CAGA,qBAAsB,CACpB,OAAOC;AAAA;AAAA;AAAA;AAAA,OAKT,CAMA,aAAc,CACZ,KAAK,UAAY,GACjB,KAAK,aAAa,QAAQD,GAAS,CAC7B,OAAOA,EAAM,aAAgB,WAC/BA,EAAM,YAAY,EAElBA,EAAM,UAAY,EAEtB,CAAC,CACH,CAKA,YAAa,CACX,KAAK,aAAa,QAAQA,GAAS,CAC7B,OAAOA,EAAM,YAAe,WAC9BA,EAAM,WAAW,EACR,OAAOA,EAAM,OAAU,YAChCA,EAAM,MAAM,CAEhB,CAAC,EAED,KAAK,sBAAsB,CAC7B,CAKA,YAAa,CACX,KAAK,aAAa,QAAQA,GAAS,CAC7B,OAAOA,EAAM,YAAe,WAC9BA,EAAM,WAAW,EACR,OAAOA,EAAM,OAAU,YAChCA,EAAM,MAAM,CAEhB,CAAC,EAED,KAAK,sBAAsB,CAC7B,CAKA,uBAAwB,CACtB,KAAK,UAAY,GACjB,KAAK,QAAU,GACf,KAAK,MAAQ,GACb,KAAK,aAAa,QAAQE,GAAe,CACnC,OAAOA,EAAY,uBAA0B,YAC/CA,EAAY,sBAAsB,CAEtC,CAAC,CACH,CAcA,8BAA8BL,EAAIM,EAAM,CACtC,MAAO,CAACN,EAAG,QACb,CAQA,wBAAwBO,EAAUC,EAAU,CAC1C,IAAMC,EAAS,CAAC,EAGVC,EAAYF,GAAY,KAAK,8BAGnC,YAAK,aAAa,MAAM,EAAE,QAAQG,GAAQ,CACxC,IAAMC,EAAO,KAAK,aAAaD,CAAI,EAC/BC,aAAgBC,GAClBJ,EAAOE,CAAI,EAAIC,EAAK,OAAOZ,GAAMU,EAAUV,EAAIO,CAAQ,CAAC,EAAE,IAAIP,GAAMA,EAAGO,CAAQ,CAAC,EACvEG,EAAUE,EAAML,CAAQ,IAC7B,OAAOK,EAAK,yBAA4B,WAC1CH,EAAOE,CAAI,EAAIC,EAAK,wBAAwBL,CAAQ,EAEpDE,EAAOE,CAAI,EAAIC,EAAKL,CAAQ,EAGlC,CAAC,EACME,CACT,CAOA,4BAA4BF,EAAUO,EAAO,CAC3C,KAAK,aAAa,QAAQd,GAAM,CAC9BA,EAAGO,CAAQ,EAAIO,CACjB,CAAC,CACH,CAOA,+BAA+BP,EAAUT,EAAQ,CAC3CA,GAAU,OAAOA,GAAW,UAC9B,OAAO,KAAKA,CAAM,EAAE,QAAQa,GAAQ,CAC9B,MAAM,QAAQ,KAAK,aAAaA,CAAI,CAAC,GACvC,KAAK,aAAaA,CAAI,EAAE,QACtB,CAA4BX,EAA0Be,IAAU,CAC9Df,EAAGO,CAAQ,EAAIT,EAAOa,CAAI,EAAEI,CAAK,CACnC,CACF,EAEE,KAAK,aAAaJ,CAAI,EACxB,KAAK,aAAaA,CAAI,EAAEJ,CAAQ,EAAIT,EAAOa,CAAI,EAE/C,KAAK,gBAAgBJ,CAAQ,EAAEI,CAAI,EAAIb,EAAOa,CAAI,CAEtD,CAAC,CAEL,CAMA,mBAAmBJ,EAAU,CAC3B,OAAO,OAAO,KAAK,KAAK,YAAY,EAAE,KAAKI,GACrC,MAAM,QAAQ,KAAK,aAAaA,CAAI,CAAC,EAChC,KAAK,aAAaA,CAAI,EAAE,KAAiCX,GAAO,CAAC,CAACA,EAAGO,CAAQ,CAAC,EAEhF,CAAC,CAAC,KAAK,aAAaI,CAAI,EAAEJ,CAAQ,CAC1C,CACH,CAKA,8BAA8BS,EAAO,CACnC,OAAO,OAAO,KAAK,KAAK,YAAY,EAAE,KAAKL,GACrC,MAAM,QAAQ,KAAK,aAAaA,CAAI,CAAC,EAChC,KAAK,aAAaA,CAAI,EAAE,KAAiCX,GAC9D,GAAQA,EAAG,gBAAkBA,EAAG,eAAe,SAASgB,CAAK,EAC/D,EAEK,GACL,KAAK,aAAaL,CAAI,EAAE,gBACtB,KAAK,aAAaA,CAAI,EAAE,eAAe,SAASK,CAAK,EAE1D,CACH,CAMA,qBAAqBT,EAAU,CAC7B,OAAO,OAAO,KAAK,KAAK,YAAY,EAAE,MAAMI,GACtC,MAAM,QAAQ,KAAK,aAAaA,CAAI,CAAC,EAChC,KAAK,aAAaA,CAAI,EAAE,MAAkCX,GAAO,CAAC,CAACA,EAAGO,CAAQ,CAAC,EAEjF,CAAC,CAAC,KAAK,aAAaI,CAAI,EAAEJ,CAAQ,CAC1C,CACH,CAWA,2BAA2BU,EAAI,CACzBA,GAAM,KAAK,wBAAoDA,EAAG,MAAO,GAC3E,KAAK,SAAS,CAElB,CAEA,cAAe,CACb,KAAK,QAAU,KAAK,mBAAmB,SAAS,CAClD,CAKA,YAAYA,EAAI,CACd,IAAMC,EAAS,KAAK,aAAa,KAAK,aAAa,OAAS,CAAC,EACzDD,EAAG,SAAWC,IAChB,KAAK,QAAU,IAEjB,KAAK,QAAU,EACjB,CAEA,YAAa,CACX,KAAK,MAAQ,KAAK,mBAAmB,OAAO,CAC9C,CAqBA,4CAA6C,CAE3C,IAAIC,EADwC,KAE5C,KAAOA,GAAQ,CAEb,IAAMC,EAAsBD,EAAO,4BAA4B,EAC5CE,GAA+BD,EAAqB,CAAE,QAAS,EAAK,CAAC,EAC7E,QAAQpB,GAAM,CACvB,KAAK,mCAAmC,IAAIA,CAAE,CAChD,CAAC,EAEDmB,EAASA,EAAO,gBAClB,CACF,CAKA,qBAAqBhB,EAAO,CAC1B,KAAK,mCAAmC,QAAQH,GAAM,CAChD,OAAOG,EAAM,sBAAyB,YACxCA,EAAM,qBAAqBH,EAAI,CAAE,QAAS,EAAM,CAAC,CAErD,CAAC,CACH,CAKA,uBAAuBG,EAAO,CAC5B,KAAK,mCAAmC,QAAQH,GAAM,CAChD,OAAOG,EAAM,2BAA8B,YAC7CA,EAAM,0BAA0BH,CAAE,CAEtC,CAAC,CACH,CAQA,eAAeG,EAAOmB,EAAiB,CAcrC,GAbA,MAAM,eAAenB,EAAOmB,CAAe,EACvC,KAAK,UACPnB,EAAM,wBAAwB,EAE3B,KAAK,mCAAmC,MAC3C,KAAK,2CAA2C,EAElD,KAAK,qBAAqBA,CAAK,EAC/B,KAAK,SAAS,CAAE,mBAAoB,EAAK,CAAC,EAEtC,OAAOA,EAAM,qBAAwB,YAAc,KAAK,YAC1DA,EAAM,oBAAoB,KAAK,WAAY,CAAE,QAAS,EAAM,CAAC,EAE3D,CAACA,EAAM,WAAY,CACrB,IAAMoB,EAAQ,KAAK,gBACfA,EAAM,YAAcA,EAAM,WAAWpB,EAAM,IAAI,EAEjDA,EAAM,WAAaoB,EAAM,WAAWpB,EAAM,IAAI,EACrCoB,EAAM,iBAAmBA,EAAM,gBAAgBpB,EAAM,IAAI,IAElEA,EAAM,gBAAkBoB,EAAM,gBAAgBpB,EAAM,IAAI,EAE5D,CACF,CAKA,IAAI,oBAAqB,CACvB,OAAO,KAAK,wBAAwB,oBAAoB,CAC1D,CAMA,kBAAkBH,EAAI,CACpB,MAAM,kBAAkBA,CAAE,EAC1B,KAAK,SAAS,CAAE,mBAAoB,EAAK,CAAC,EAEtC,OAAOA,EAAG,0BAA6B,YAAc,KAAK,YAC5DA,EAAG,yBAAyB,KAAK,WAAY,CAAE,QAAS,EAAM,CAAC,EAEjE,KAAK,uBAAuBA,CAAE,CAChC,CACF,EAEWwB,GAAiBC,EAAYlC,EAA4B,ECrjB/D,IAAMmC,GAAN,cAA2BC,GAAeC,CAAU,CAAE,CAC3D,aAAc,CACZ,MAAM,EAKN,KAAK,kBAAoB,GAMzB,KAAK,mBAAqB,UAC5B,CACF,EClCA,IAAMC,GAAqB,IAAM,CAC/B,MAAM,IAAI,MACR,mFACF,CACF,EAQaC,GAAN,cAAuBC,EAAa,CACzC,aAAc,CACZ,MAAM,EAEN,KAAK,QAAU,KAAK,QAAQ,KAAK,IAAI,EAErC,KAAK,OAAS,KAAK,OAAO,KAAK,IAAI,CACrC,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,4BAA4B,EAGjC,KAAK,gBAAgB,MAAM,CAC7B,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3B,KAAK,4BAA4B,CACnC,CAEA,IAAI,WAAY,CACd,OAAuC,KAAK,cAAc,MAAM,CAClE,CAEA,QAAS,CACH,KAAK,UAGP,KAAK,UAAU,cAAc,IAAI,MAAM,SAAU,CAAE,WAAY,EAAK,CAAC,CAAC,EAEtEF,GAAmB,CAEvB,CAMA,QAAQG,EAAI,CACVA,EAAG,eAAe,EAClBA,EAAG,gBAAgB,EACnB,KAAK,YAAY,EACjB,KAAK,cAAc,IAAI,MAAM,SAAU,CAAE,QAAS,EAAK,CAAC,CAAC,CAC3D,CAEA,OAAQ,CACF,KAAK,UACP,KAAK,UAAU,MAAM,EAErBH,GAAmB,CAEvB,CAMA,OAAOG,EAAI,CACTA,EAAG,eAAe,EAClBA,EAAG,gBAAgB,EACnB,KAAK,WAAW,EAChB,KAAK,cAAc,IAAI,MAAM,QAAS,CAAE,QAAS,EAAK,CAAC,CAAC,CAC1D,CAGA,6BAA8B,CAC5B,KAAK,UAAU,iBAAiB,SAAU,KAAK,OAAO,EACtD,KAAK,UAAU,iBAAiB,QAAS,KAAK,MAAM,CACtD,CAGA,6BAA8B,CAC5B,KAAK,UAAU,oBAAoB,SAAU,KAAK,OAAO,EACzD,KAAK,UAAU,oBAAoB,QAAS,KAAK,MAAM,CACzD,CACF,ECzFA,eAAe,OAAO,YAAaC,EAAQ,ECKpC,IAAMC,GAAN,cAAwBC,GAAqBC,EAAS,CAAE,CAE7D,WAAW,YAAa,CACtB,MAAO,CASL,SAAU,CACR,KAAM,QACN,UAAW,WACX,QAAS,EACX,EACA,KAAM,CACJ,KAAM,OACN,QAAS,EACX,EACA,YAAa,CACX,KAAM,OACN,QAAS,EACX,CACF,CACF,CAEA,IAAI,OAAQ,CACV,MAAO,CACL,GAAG,MAAM,MACT,MAAO,IAAM,CAEX,IAAMC,EAAS,SAAS,cAAc,OAAO,EACvCC,EAAQ,KAAK,aAAa,OAAO,EACvC,OAAIA,GACFD,EAAO,aAAa,QAASC,CAAK,EAE7BD,CACT,CACF,CACF,CAMA,IAAI,YAAa,CACf,OAAwC,MAAM,UAChD,CAEA,aAAc,CACZ,MAAM,EACN,KAAK,SAAW,GAChB,KAAK,KAAO,OACZ,KAAK,YAAc,EACrB,CAMA,cAAcE,EAAMC,EAAU,CAC5B,MAAM,cAAcD,EAAMC,CAAQ,EAC9BD,IAAS,YACX,KAAK,mBAAmB,CAE5B,CAGA,aAAaE,EAAmB,CAC9B,MAAM,aAAaA,CAAiB,EACpC,KAAK,mBAAmB,CAC1B,CAGA,QAAQA,EAAmB,CACzB,MAAM,QAAQA,CAAiB,EAC3BA,EAAkB,IAAI,MAAM,IAC9B,KAAK,WAAW,KAAO,KAAK,MAG1BA,EAAkB,IAAI,aAAa,IACrC,KAAK,WAAW,YAAc,KAAK,aAGjCA,EAAkB,IAAI,UAAU,IAClC,KAAK,WAAW,SAAW,KAAK,SAChC,KAAK,SAAS,GAGZA,EAAkB,IAAI,MAAM,IAC9B,KAAK,WAAW,KAAO,KAAK,MAG1BA,EAAkB,IAAI,cAAc,IACtC,KAAK,WAAW,aAAsC,KAAK,aAE/D,CAGA,oBAAqB,CACf,KAAK,aACP,KAAK,WAAW,SAAW,KAAK,SAEpC,CACF,EC/GA,eAAe,OAAO,aAAcC,EAAS,ECA7C,IAAMC,GAAqDC,GAAMA,EAAE,MAAQ,KAAOA,EAAE,MAAQ,QACtFC,GAA0DD,GAAMA,EAAE,MAAQ,IAwBnEE,GAAN,cAAyBC,GAA0BC,CAAU,CAAE,CACpE,WAAW,YAAa,CACtB,MAAO,CACL,OAAQ,CAAE,KAAM,QAAS,QAAS,EAAK,EACvC,KAAM,CAAE,KAAM,OAAQ,QAAS,EAAK,CACtC,CACF,CAEA,QAAS,CACP,OAAOC,qCAAwC,KAAK,SAAS,wBAC/D,CAEA,WAAW,QAAS,CAClB,MAAO,CACLC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA4EF,CACF,CAEA,aAAc,CACZ,MAAM,EACN,KAAK,KAAO,SACZ,KAAK,OAAS,GAEd,KAAK,UAAY,UAAU,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,EAAG,EAAE,CAAC,GAC/DC,GAAiB,QACnB,KAAK,eAAe,KAAK,IAAM,CACxB,KAAK,aAAa,iBAAiB,GACtC,KAAK,aAAa,kBAAmB,KAAK,SAAS,CAEvD,CAAC,EAEH,KAAK,cAAc,CACrB,CAEA,mBAAoB,CAClB,MAAM,kBAAkB,EACnB,KAAK,aAAa,MAAM,GAC3B,KAAK,aAAa,OAAQ,QAAQ,CAEtC,CAKA,QAAQC,EAAmB,CACzB,MAAM,QAAQA,CAAiB,EAE3BA,EAAkB,IAAI,UAAU,GAClC,KAAK,aAAa,gBAAiB,GAAG,KAAK,QAAQ,EAAE,CAEzD,CAKA,eAAgB,CACd,KAAK,iBAAiB,YAAa,KAAK,kBAAkB,EAC1D,KAAK,iBAAiB,UAAW,KAAK,gBAAgB,EACtD,KAAK,iBAAiB,QAAS,KAAK,cAAc,CACpD,CAKA,oBAAqB,CACnB,KAAK,OAAS,GACd,IAAMC,EAAiB,IAAM,CAC3B,KAAK,OAAS,GACd,SAAS,oBAAoB,UAAWA,CAAc,EACtD,KAAK,oBAAoB,UAAWA,CAAc,CACpD,EACA,SAAS,iBAAiB,UAAWA,CAAc,EACnD,KAAK,iBAAiB,UAAWA,CAAc,CACjD,CAMA,iBAAiBC,EAAO,CACtB,GAAI,KAAK,QAAU,CAACX,GAAqBW,CAAK,EAAG,CAC3CT,GAA0BS,CAAK,GACjCA,EAAM,eAAe,EAEvB,MACF,CAEIT,GAA0BS,CAAK,GACjCA,EAAM,eAAe,EAGvB,KAAK,OAAS,GAId,IAAMC,EAAeC,GAAc,CAC7Bb,GAAqBa,CAAU,IACjC,KAAK,OAAS,GACd,SAAS,oBAAoB,QAASD,EAAc,EAAI,EAE5D,EACA,SAAS,iBAAiB,QAASA,EAAc,EAAI,CACvD,CAMA,eAAeD,EAAO,CACpB,GAAIX,GAAqBW,CAAK,EAAG,CAE/B,GAAIA,EAAM,QAAUA,EAAM,SAAW,KACnC,OAGF,KAAK,MAAM,CACb,CACF,CACF,EC1NA,eAAe,OAAO,cAAeG,EAAU,ECIxC,IAAMC,GAAN,cAA0BC,CAAW,CAC1C,OAAO,OAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgDhB,OAAO,WAAa,CAClB,KAAM,CAAE,KAAM,QAAS,QAAS,EAAK,CACvC,EAEA,aAAc,CACZ,MAAM,EACN,KAAK,KAAO,GACZ,KAAK,SAAW,GAChB,KAAK,MAAQ,GACb,KAAK,SAAW,EAClB,CAEA,YAAa,CACX,KAAK,KAAO,EACd,CAEA,QAAS,CACP,OAAOC;AAAA,0BACe,KAAK,KAAO,OAAS,EAAE;AAAA;AAAA,yCAER,KAAK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAO1B,KAAK,QAAQ;AAAA,uCACH,GACrB,KAAK,SAAW,EAAE,OAAO,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAMzB,KAAK,KAAK;AAAA,uCACA,GACrB,KAAK,MAAQ,EAAE,OAAO,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAMtB,KAAK,QAAQ;AAAA,uCACH,GACrB,KAAK,SAAW,EAAE,OAAO,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWrD,CACF,EAEA,eAAe,OAAO,gBAAiBH,EAAW,EC/G3C,IAAMI,GAAN,cAA8BC,CAAW,CAC9C,OAAO,OAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoChB,aAAc,CACZ,IAAMC,EAAQ,KAAK,WAAW,cAAc,eAAe,EACvDA,IACFA,EAAM,KAAO,GAEjB,CACA,QAAS,CACP,OAAOC;AAAA;AAAA;AAAA,yBAGc,KAAK,WAAW;AAAA;AAAA;AAAA,KAIvC,CACF,EAEA,eAAe,OAAO,mBAAoBJ,EAAe,ECvDlD,IAAMK,GAAN,cAA8BC,CAAW,CAC9C,OAAO,OAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0BhB,QAAS,CACP,OAAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOT,CACF,EAEA,eAAe,OAAO,mBAAoBH,EAAe,ECtClD,IAAMI,GAAN,cAA0BC,CAAW,CAC1C,OAAO,OAASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAmBhB,QAAS,CACP,OAAOC;AAAA;AAAA;AAAA;AAAA;AAAA,KAMT,CACF,EAEA,eAAe,OAAO,eAAgBH,EAAW,EC3BjD,IAAMI,GAAO,IAAI,IAAI,6BAA8B,YAAY,GAAG,EAAE,KAE9DC,GAAN,cAAyBC,CAAW,CAClC,OAAO,WAAa,CAClB,OAAQ,CAAE,KAAM,MAAO,CACzB,EAEA,aAAc,CACZ,MAAM,EACN,KAAK,OAAS,cAChB,CAEA,QAAS,CACP,OAAOC;AAAA;AAAA;AAAA;AAAA,KAKT,CACF,EAEA,eAAe,OAAO,eAAgBF,EAAU",
  "names": ["global", "globalThis", "supportsAdoptingStyleSheets", "ShadowRoot", "ShadyCSS", "nativeShadow", "Document", "prototype", "CSSStyleSheet", "constructionToken", "Symbol", "cssTagCache", "WeakMap", "CSSResult", "cssText", "strings", "safeToken", "this", "Error", "_strings", "styleSheet", "_styleSheet", "cacheable", "length", "get", "replaceSync", "set", "toString", "unsafeCSS", "value", "String", "css", "values", "reduce", "acc", "v", "idx", "adoptStyles", "renderRoot", "styles", "adoptedStyleSheets", "map", "s", "style", "document", "createElement", "nonce", "setAttribute", "textContent", "appendChild", "getCompatibleStyle", "sheet", "rule", "cssRules", "is", "defineProperty", "getOwnPropertyDescriptor", "getOwnPropertyNames", "getOwnPropertySymbols", "getPrototypeOf", "Object", "global", "globalThis", "trustedTypes", "emptyStringForBooleanAttribute", "emptyScript", "polyfillSupport", "reactiveElementPolyfillSupport", "JSCompiler_renameProperty", "prop", "_obj", "defaultConverter", "value", "type", "Boolean", "Array", "JSON", "stringify", "fromValue", "Number", "parse", "e", "notEqual", "old", "defaultPropertyDeclaration", "attribute", "String", "converter", "reflect", "hasChanged", "Symbol", "metadata", "litPropertyMetadata", "WeakMap", "ReactiveElement", "HTMLElement", "initializer", "this", "__prepare", "_initializers", "push", "observedAttributes", "finalize", "__attributeToPropertyMap", "keys", "name", "options", "state", "elementProperties", "set", "noAccessor", "key", "descriptor", "getPropertyDescriptor", "prototype", "get", "v", "call", "oldValue", "requestUpdate", "configurable", "enumerable", "hasOwnProperty", "superCtor", "Map", "finalized", "props", "properties", "propKeys", "p", "createProperty", "attr", "__attributeNameForProperty", "elementStyles", "finalizeStyles", "styles", "isArray", "Set", "flat", "Infinity", "reverse", "s", "unshift", "getCompatibleStyle", "toLowerCase", "constructor", "super", "__instanceProperties", "isUpdatePending", "hasUpdated", "__reflectingProperty", "__initialize", "__updatePromise", "Promise", "res", "enableUpdating", "_$changedProperties", "__saveInstanceProperties", "forEach", "i", "controller", "__controllers", "add", "renderRoot", "isConnected", "hostConnected", "delete", "instanceProperties", "size", "createRenderRoot", "shadowRoot", "attachShadow", "shadowRootOptions", "adoptStyles", "connectedCallback", "c", "_requestedUpdate", "disconnectedCallback", "hostDisconnected", "_old", "_$attributeToProperty", "attrValue", "toAttribute", "removeAttribute", "setAttribute", "ctor", "propName", "getPropertyOptions", "fromAttribute", "_$changeProperty", "__enqueueUpdate", "has", "__reflectingProperties", "reject", "result", "scheduleUpdate", "performUpdate", "wrapped", "shouldUpdate", "changedProperties", "willUpdate", "hostUpdate", "update", "__markUpdated", "_$didUpdate", "_changedProperties", "hostUpdated", "firstUpdated", "updated", "updateComplete", "getUpdateComplete", "__propertyToAttribute", "mode", "reactiveElementVersions", "global", "globalThis", "trustedTypes", "policy", "createPolicy", "createHTML", "s", "boundAttributeSuffix", "marker", "Math", "random", "toFixed", "slice", "markerMatch", "nodeMarker", "d", "document", "createMarker", "createComment", "isPrimitive", "value", "isArray", "Array", "isIterable", "Symbol", "iterator", "SPACE_CHAR", "textEndRegex", "commentEndRegex", "comment2EndRegex", "tagEndRegex", "RegExp", "singleQuoteAttrEndRegex", "doubleQuoteAttrEndRegex", "rawTextElement", "tag", "type", "strings", "values", "_$litType$", "html", "svg", "mathml", "noChange", "for", "nothing", "templateCache", "WeakMap", "walker", "createTreeWalker", "trustFromTemplateString", "tsa", "stringFromTSA", "hasOwnProperty", "Error", "getTemplateHtml", "l", "length", "attrNames", "rawTextEndRegex", "regex", "i", "attrName", "match", "attrNameEndIndex", "lastIndex", "exec", "test", "end", "startsWith", "push", "Template", "constructor", "options", "node", "this", "parts", "nodeIndex", "attrNameIndex", "partCount", "el", "createElement", "currentNode", "content", "wrapper", "firstChild", "replaceWith", "childNodes", "nextNode", "nodeType", "hasAttributes", "name", "getAttributeNames", "endsWith", "realName", "statics", "getAttribute", "split", "m", "index", "ctor", "PropertyPart", "BooleanAttributePart", "EventPart", "AttributePart", "removeAttribute", "tagName", "textContent", "emptyScript", "append", "data", "indexOf", "_options", "innerHTML", "resolveDirective", "part", "parent", "attributeIndex", "currentDirective", "__directives", "__directive", "nextDirectiveConstructor", "_$initialize", "_$resolve", "TemplateInstance", "template", "_$parts", "_$disconnectableChildren", "_$template", "_$parent", "parentNode", "_$isConnected", "fragment", "creationScope", "importNode", "partIndex", "templatePart", "ChildPart", "nextSibling", "ElementPart", "_$setValue", "__isConnected", "startNode", "endNode", "_$committedValue", "_$startNode", "_$endNode", "isConnected", "directiveParent", "_$clear", "_commitText", "_commitTemplateResult", "_commitNode", "_commitIterable", "insertBefore", "_insert", "createTextNode", "result", "_$getTemplate", "h", "_update", "instance", "_clone", "get", "set", "itemParts", "itemPart", "item", "start", "from", "_$notifyConnectionChanged", "n", "remove", "element", "fill", "String", "valueIndex", "noCommit", "change", "v", "_commitValue", "setAttribute", "toggleAttribute", "super", "newListener", "oldListener", "shouldRemoveListener", "capture", "once", "passive", "shouldAddListener", "removeEventListener", "addEventListener", "event", "call", "host", "handleEvent", "polyfillSupport", "global", "litHtmlPolyfillSupport", "Template", "ChildPart", "litHtmlVersions", "push", "render", "value", "container", "options", "partOwnerNode", "renderBefore", "part", "endNode", "insertBefore", "createMarker", "_$setValue", "LitElement", "ReactiveElement", "constructor", "this", "renderOptions", "host", "__childPart", "createRenderRoot", "renderRoot", "super", "renderBefore", "firstChild", "changedProperties", "value", "render", "hasUpdated", "isConnected", "update", "connectedCallback", "setConnected", "disconnectedCallback", "noChange", "globalThis", "litElementHydrateSupport", "polyfillSupport", "litElementPolyfillSupport", "globalThis", "litElementVersions", "push", "global", "window", "supportsAdoptingStyleSheets", "ShadowRoot", "ShadyCSS", "nativeShadow", "Document", "prototype", "CSSStyleSheet", "constructionToken", "Symbol", "cssTagCache", "WeakMap", "CSSResult", "constructor", "cssText", "strings", "safeToken", "this", "Error", "_strings", "styleSheet", "_styleSheet", "cacheable", "length", "get", "replaceSync", "set", "toString", "unsafeCSS", "value", "String", "css", "values", "reduce", "acc", "v", "idx", "adoptStyles", "renderRoot", "styles", "adoptedStyleSheets", "map", "s", "forEach", "style", "document", "createElement", "nonce", "setAttribute", "textContent", "appendChild", "getCompatibleStyle", "sheet", "rule", "cssRules", "global", "window", "trustedTypes", "emptyStringForBooleanAttribute", "emptyScript", "polyfillSupport", "reactiveElementPolyfillSupport", "defaultConverter", "toAttribute", "value", "type", "Boolean", "Object", "Array", "JSON", "stringify", "fromAttribute", "fromValue", "Number", "parse", "e", "notEqual", "old", "defaultPropertyDeclaration", "attribute", "String", "converter", "reflect", "hasChanged", "finalized", "ReactiveElement", "HTMLElement", "constructor", "super", "this", "__instanceProperties", "Map", "isUpdatePending", "hasUpdated", "__reflectingProperty", "__initialize", "static", "initializer", "finalize", "_a", "_initializers", "push", "observedAttributes", "attributes", "elementProperties", "forEach", "v", "p", "attr", "__attributeNameForProperty", "__attributeToPropertyMap", "set", "name", "options", "state", "noAccessor", "prototype", "hasOwnProperty", "key", "Symbol", "descriptor", "getPropertyDescriptor", "defineProperty", "get", "oldValue", "requestUpdate", "configurable", "enumerable", "superCtor", "getPrototypeOf", "props", "properties", "propKeys", "getOwnPropertyNames", "getOwnPropertySymbols", "createProperty", "elementStyles", "finalizeStyles", "styles", "isArray", "Set", "flat", "Infinity", "reverse", "s", "unshift", "getCompatibleStyle", "toLowerCase", "__updatePromise", "Promise", "res", "enableUpdating", "_$changedProperties", "__saveInstanceProperties", "i", "addController", "controller", "__controllers", "renderRoot", "isConnected", "_b", "hostConnected", "call", "removeController", "splice", "indexOf", "_v", "createRenderRoot", "shadowRoot", "attachShadow", "shadowRootOptions", "adoptStyles", "connectedCallback", "c", "_requestedUpdate", "disconnectedCallback", "hostDisconnected", "attributeChangedCallback", "_old", "_$attributeToProperty", "__propertyToAttribute", "attrValue", "undefined", "removeAttribute", "setAttribute", "ctor", "propName", "getPropertyOptions", "shouldRequestUpdate", "has", "__reflectingProperties", "__enqueueUpdate", "async", "reject", "result", "scheduleUpdate", "performUpdate", "shouldUpdate", "changedProperties", "willUpdate", "hostUpdate", "update", "__markUpdated", "_$didUpdate", "_changedProperties", "hostUpdated", "firstUpdated", "updated", "updateComplete", "getUpdateComplete", "k", "mode", "_d", "reactiveElementVersions", "global", "window", "trustedTypes", "policy", "createPolicy", "createHTML", "s", "boundAttributeSuffix", "marker", "Math", "random", "String", "slice", "markerMatch", "nodeMarker", "d", "document", "createMarker", "createComment", "isPrimitive", "value", "isArray", "Array", "isIterable", "Symbol", "iterator", "SPACE_CHAR", "textEndRegex", "commentEndRegex", "comment2EndRegex", "tagEndRegex", "RegExp", "singleQuoteAttrEndRegex", "doubleQuoteAttrEndRegex", "rawTextElement", "tag", "type", "strings", "values", "_$litType$", "html", "svg", "noChange", "for", "nothing", "templateCache", "WeakMap", "walker", "createTreeWalker", "trustFromTemplateString", "tsa", "stringFromTSA", "hasOwnProperty", "Error", "getTemplateHtml", "l", "length", "attrNames", "rawTextEndRegex", "regex", "i", "attrName", "match", "attrNameEndIndex", "lastIndex", "exec", "test", "end", "startsWith", "push", "undefined", "Template", "constructor", "options", "node", "this", "parts", "nodeIndex", "attrNameIndex", "partCount", "el", "createElement", "currentNode", "content", "svgElement", "firstChild", "remove", "append", "childNodes", "nextNode", "nodeType", "hasAttributes", "attrsToRemove", "name", "getAttributeNames", "endsWith", "realName", "statics", "getAttribute", "toLowerCase", "split", "m", "index", "ctor", "PropertyPart", "BooleanAttributePart", "EventPart", "AttributePart", "removeAttribute", "tagName", "textContent", "emptyScript", "data", "indexOf", "static", "_options", "innerHTML", "resolveDirective", "part", "parent", "attributeIndex", "currentDirective", "_a", "__directives", "__directive", "nextDirectiveConstructor", "_b", "call", "_$initialize", "_c", "_d", "_$resolve", "TemplateInstance", "template", "_$parts", "_$disconnectableChildren", "_$template", "_$parent", "parentNode", "_$isConnected", "_clone", "fragment", "creationScope", "importNode", "partIndex", "templatePart", "ChildPart", "nextSibling", "ElementPart", "_update", "_$setValue", "startNode", "endNode", "_$committedValue", "_$startNode", "_$endNode", "__isConnected", "isConnected", "directiveParent", "_$clear", "_commitText", "_commitTemplateResult", "_commitNode", "_commitIterable", "_insert", "insertBefore", "createTextNode", "result", "_$getTemplate", "h", "instance", "get", "set", "itemParts", "itemPart", "item", "start", "from", "_$notifyConnectionChanged", "n", "setConnected", "element", "fill", "valueIndex", "noCommit", "change", "v", "_commitValue", "setAttribute", "emptyStringForBooleanAttribute", "super", "newListener", "oldListener", "shouldRemoveListener", "capture", "once", "passive", "shouldAddListener", "removeEventListener", "addEventListener", "handleEvent", "event", "host", "_$LH", "_boundAttributeSuffix", "_marker", "_markerMatch", "_HTML_RESULT", "_getTemplateHtml", "_TemplateInstance", "_isIterable", "_resolveDirective", "_ChildPart", "_AttributePart", "_BooleanAttributePart", "_EventPart", "_PropertyPart", "_ElementPart", "polyfillSupport", "litHtmlPolyfillSupport", "litHtmlVersions", "render", "container", "partOwnerNode", "renderBefore", "LitElement", "ReactiveElement", "constructor", "this", "renderOptions", "host", "__childPart", "createRenderRoot", "renderRoot", "super", "_a", "_b", "renderBefore", "firstChild", "update", "changedProperties", "value", "render", "hasUpdated", "isConnected", "connectedCallback", "setConnected", "disconnectedCallback", "noChange", "globalThis", "litElementHydrateSupport", "call", "polyfillSupport", "litElementPolyfillSupport", "_c", "globalThis", "litElementVersions", "push", "brand", "Symbol", "for", "unwrapStaticValue", "value", "r", "stringsCache", "Map", "withStatic", "coreTag", "strings", "values", "l", "length", "staticValue", "dynamicValue", "staticStrings", "dynamicValues", "s", "i", "hasStatics", "unwrapStaticValue", "push", "key", "join", "get", "raw", "set", "html", "coreHtml", "svg", "coreSvg", "slotAssignedElements", "_a", "window", "HTMLSlotElement", "prototype", "assignedElements", "slot", "opts", "assignedNodes", "filter", "node", "nodeType", "Node", "ELEMENT_NODE", "PartType", "ATTRIBUTE", "CHILD", "PROPERTY", "BOOLEAN_ATTRIBUTE", "EVENT", "ELEMENT", "directive", "c", "values", "_$litDirective$", "Directive", "constructor", "_partInfo", "_$isConnected", "this", "_$parent", "_$initialize", "part", "parent", "attributeIndex", "__part", "__attributeIndex", "_$resolve", "props", "update", "_part", "render", "_ChildPart", "ChildPart", "_$LH", "isPrimitive", "value", "isTemplateResult", "value", "type", "isCompiledTemplateResult", "_a", "h", "isSingleExpression", "part", "strings", "createMarker", "document", "createComment", "insertPart", "containerPart", "refPart", "container", "_$startNode", "parentNode", "refNode", "_$endNode", "startNode", "insertBefore", "endNode", "ChildPart", "options", "nextSibling", "oldParent", "_$parent", "parentChanged", "newConnectionState", "_a", "_$reparentDisconnectables", "call", "_$notifyConnectionChanged", "_$isConnected", "start", "n", "setChildPartValue", "value", "directiveParent", "_$setValue", "RESET_VALUE", "setCommittedValue", "_$committedValue", "getCommittedValue", "removePart", "end", "remove", "clearPart", "_$clear", "notifyChildrenConnectedChanged", "parent", "isConnected", "children", "_$disconnectableChildren", "obj", "_b", "_a", "o", "e", "removeDisconnectableFromParent", "_$parent", "delete", "size", "addDisconnectableToParent", "Set", "has", "add", "installDisconnectAPI", "reparentDisconnectables", "newParent", "this", "notifyChildPartConnectedChanged", "isClearingValue", "fromPartIndex", "value", "_$committedValue", "Array", "isArray", "i", "length", "type", "PartType", "CHILD", "_c", "_$notifyConnectionChanged", "_d", "_$reparentDisconnectables", "AsyncDirective", "Directive", "constructor", "_$initialize", "part", "attributeIndex", "super", "_$isConnected", "_$AO", "isClearingDirective", "reconnected", "call", "disconnected", "setValue", "isSingleExpression", "__part", "_$setValue", "newValues", "__attributeIndex", "forAwaitOf", "async", "iterable", "callback", "v", "PseudoWeakRef", "constructor", "ref", "this", "_ref", "disconnect", "reconnect", "deref", "Pauser", "_promise", "_resolve", "get", "pause", "_a", "Promise", "resolve", "resume", "call", "AsyncReplaceDirective", "AsyncDirective", "constructor", "this", "__weakThis", "PseudoWeakRef", "__pauser", "Pauser", "render", "value", "_mapper", "noChange", "update", "_part", "mapper", "isConnected", "disconnected", "__value", "i", "weakThis", "pauser", "forAwaitOf", "async", "v", "get", "_this", "deref", "commitValue", "_index", "setValue", "disconnect", "pause", "reconnected", "reconnect", "resume", "asyncReplace", "directive", "asyncAppend", "directive", "AsyncReplaceDirective", "constructor", "partInfo", "super", "type", "PartType", "CHILD", "Error", "update", "part", "params", "this", "__childPart", "commitValue", "value", "index", "clearPart", "newPart", "insertPart", "setChildPartValue", "getStringsFromTemplateResult", "result", "isCompiledTemplateResult", "h", "strings", "cache", "directive", "Directive", "constructor", "partInfo", "super", "this", "_templateCache", "WeakMap", "render", "v", "update", "containerPart", "_valueKey", "isTemplateResult", "_value", "vKey", "childPart", "getCommittedValue", "pop", "cachedContainerPart", "get", "fragment", "document", "createDocumentFragment", "nothing", "setConnected", "set", "setCommittedValue", "insertPart", "cachedPart", "clearPart", "classMap", "directive", "Directive", "constructor", "partInfo", "super", "type", "PartType", "ATTRIBUTE", "name", "_a", "strings", "length", "Error", "render", "classInfo", "Object", "keys", "filter", "key", "join", "update", "part", "this", "_previousClasses", "Set", "_staticClasses", "split", "s", "has", "add", "classList", "element", "forEach", "remove", "delete", "value", "_b", "noChange", "initialValue", "guard", "directive", "Directive", "constructor", "this", "_previousValue", "render", "_value", "f", "update", "_part", "value", "Array", "isArray", "length", "every", "v", "i", "noChange", "from", "live", "directive", "Directive", "constructor", "partInfo", "super", "type", "PartType", "PROPERTY", "ATTRIBUTE", "BOOLEAN_ATTRIBUTE", "Error", "isSingleExpression", "render", "value", "update", "part", "noChange", "nothing", "element", "name", "hasAttribute", "getAttribute", "String", "setCommittedValue", "lastElementForContextAndCallback", "WeakMap", "ref", "directive", "AsyncDirective", "render", "_ref", "nothing", "update", "part", "refChanged", "this", "_updateRefValue", "undefined", "_lastElementForRef", "_element", "_context", "_a", "options", "host", "element", "context", "globalThis", "lastElementForCallback", "get", "set", "call", "value", "t", "_b", "_c", "disconnected", "reconnected", "generateMap", "list", "start", "end", "map", "Map", "i", "set", "repeat", "directive", "Directive", "constructor", "partInfo", "super", "type", "PartType", "CHILD", "Error", "_getValuesAndKeys", "items", "keyFnOrTemplate", "template", "keyFn", "keys", "values", "index", "item", "render", "this", "update", "containerPart", "oldParts", "getCommittedValue", "newValues", "newKeys", "Array", "isArray", "_itemKeys", "oldKeys", "_a", "newParts", "newKeyToIndexMap", "oldKeyToIndexMap", "oldHead", "oldTail", "length", "newHead", "newTail", "setChildPartValue", "insertPart", "has", "oldIndex", "get", "oldPart", "newPart", "removePart", "setCommittedValue", "noChange", "important", "importantFlag", "styleMap", "directive", "Directive", "constructor", "partInfo", "super", "type", "PartType", "ATTRIBUTE", "name", "_a", "strings", "length", "Error", "render", "styleInfo", "Object", "keys", "reduce", "style", "prop", "value", "includes", "replace", "toLowerCase", "update", "part", "element", "this", "_previousStyleProperties", "Set", "add", "forEach", "delete", "removeProperty", "isImportant", "endsWith", "setProperty", "slice", "noChange", "templateContent", "directive", "Directive", "constructor", "partInfo", "super", "type", "PartType", "CHILD", "Error", "render", "template", "this", "_previousTemplate", "noChange", "document", "importNode", "content", "UnsafeHTMLDirective", "Directive", "constructor", "partInfo", "super", "this", "_value", "nothing", "type", "PartType", "CHILD", "Error", "directiveName", "render", "value", "_templateResult", "noChange", "strings", "raw", "_$litType$", "resultType", "values", "unsafeHTML", "directive", "UnsafeSVGDirective", "UnsafeHTMLDirective", "directiveName", "resultType", "unsafeSVG", "directive", "isPromise", "x", "isPrimitive", "then", "_infinity", "UntilDirective", "AsyncDirective", "constructor", "this", "__lastRenderedIndex", "__values", "__weakThis", "PseudoWeakRef", "__pauser", "Pauser", "render", "args", "i", "find", "_a", "noChange", "update", "_part", "previousValues", "previousLength", "length", "weakThis", "pauser", "isConnected", "disconnected", "value", "Promise", "resolve", "async", "result", "get", "_this", "deref", "index", "indexOf", "setValue", "disconnect", "pause", "reconnected", "reconnect", "resume", "until", "directive", "appliedClassMixins", "wasMixinPreviouslyApplied", "mixin", "superClass", "klass", "dedupeMixin", "mixedClass", "version", "versions", "supportsScopedRegistry", "ScopedElementsMixinImplementation", "superclass", "value", "styles", "_args", "registry", "scopedElements", "shadowRootOptions", "elementStyles", "tagName", "klass", "options", "createdRoot", "S", "registeredClass", "ScopedElementsMixin", "dedupeMixin", "DisabledMixinImplementation", "superclass", "value", "name", "oldValue", "DisabledMixin", "dedupeMixin", "DisabledWithTabIndexMixinImplementation", "superclass", "DisabledMixin", "value", "name", "oldValue", "changedProperties", "DisabledWithTabIndexMixin", "dedupeMixin", "SlotMixinImplementation", "superclass", "template", "tempRenderTarget", "creationScope", "host", "D", "slotName", "el", "slotContent", "nodes", "t", "node", "SlotMixin", "dedupeMixin", "checkChrome", "flavor", "isChromium", "winNav", "vendorName", "isOpera", "isIEedge", "isIOSChrome", "browserDetection", "uuid", "prefix", "windowWithOptionalPolyfill", "polyfilledNodes", "applyFocusVisiblePolyfillWhenNeeded", "node", "FocusMixinImplementation", "superclass", "ev", "FocusMixin", "dedupeMixin", "moveDownConditions", "getAriaElementsInRightDomOrder", "descriptionElements", "reverse", "putPrecedingSiblingsAndLocalParentsFirst", "a", "b", "pos", "browserDetection", "descriptionEls", "el", "Unparseable", "value", "FormRegisteringMixinImplementation", "superclass", "FormRegisteringMixin", "dedupeMixin", "FormControlMixinImplementation", "superclass", "FormRegisteringMixin", "DisabledMixin", "SlotMixin", "newValue", "oldValue", "value", "label", "helpText", "uuid", "changedProperties", "_inputNode", "_labelNode", "_helpTextNode", "_feedbackNode", "additionalSlots", "additionalSlot", "element", "attrName", "nodes", "reorder", "insideNodes", "n", "outsideNodes", "getAriaElementsInRightDomOrder", "string", "x", "child", "A", "modelValue", "Unparseable", "isNumberValue", "i", "idPrefix", "slotName", "el", "ev", "target", "isEndpoint", "isSelfInitializing", "isChildGroupInitializing", "parentFormPath", "formPath", "FormControlMixin", "dedupeMixin", "sym", "globalThisOrWindow", "SingletonManagerClass", "key", "value", "singletonManager", "SingletonManagerClass", "createCommonjsModule", "fn", "module", "LONG", "SHORT", "NARROW", "NUMERIC", "TWODIGIT", "formatMessageFormats", "pattern", "options", "currency", "syms", "size", "parts", "integer", "n", "fraction", "i", "current", "lookupClosestLocale", "locale", "available", "locales", "l", "ll", "candidate", "zero", "one", "two", "few", "many", "other", "f", "v", "plurals", "formatMessageInterpret", "exports", "ast", "types", "interpretAST", "elements", "parent", "join", "element", "interpretElement", "args", "message", "e", "part", "value", "id", "type", "offset", "formatter", "defaults", "getArg", "children", "key", "getFrmt", "frmt", "a", "ii", "interpretNumber", "style", "interpretDuration", "fs", "fm", "fh", "sep", "s", "h", "m", "dur", "interpretDateTime", "interpretPlural", "pluralType", "pluralRules", "select", "returnOther", "clause", "interpretSelect", "formatMessageInterpret_1", "formatMessageInterpret_2", "formatMessageParse", "ARG_OPN", "ARG_CLS", "ARG_SEP", "NUM_ARG", "TAG_OPN", "TAG_CLS", "TAG_END", "TAG_SELF_CLS", "ESC", "OFFSET", "simpleTypes", "submTypes", "parseAST", "parentType", "length", "start", "text", "parseText", "expected", "parsePlaceholder", "isHashSpecial", "isAngleSpecial", "isArgStyle", "char", "isWhitespace", "code", "skipWhitespace", "tag", "parseTag", "parseId", "arg", "parsePluralOffset", "parseSubMessages", "parseSimpleFormat", "index", "format", "tagsType", "end", "closeId", "isTag", "isDigit", "selector", "parseSubMessage", "found", "lines", "line", "column", "errorMessage", "SyntaxError", "formatMessageParse_1", "supportedExp", "internals", "MessageFormat", "messageFormat", "values", "requestedLocales", "MessageFormat_default", "isLocalizeESModule", "obj", "LocalizeManager", "autoLoadOnLocaleChange", "fallbackLocale", "showKeyAsFallback", "initialLocale", "value", "oldLocale", "locale", "namespace", "data", "pattern", "loader", "namespaces", "namespaceObj", "isDynamicImport", "existingLoaderPromise", "keys", "vars", "opts", "message", "MessageFormat_default", "mutations", "mutation", "loaderPromise", "obj", "isLocalizeESModule", "lang", "fallbackLang", "promise", "key", "isMatchingString", "isMatchingRegexp", "type", "listener", "options", "event", "newLocale", "oldLocaleNamespaces", "newLocaleNamespaces", "reversedKeys", "ns", "namesString", "messages", "result", "name", "postProcessor", "localize", "singletonManager", "LocalizeManager", "AsyncQueue", "task", "resolve", "pascalCase", "str", "SyncUpdatableMixinImplementation", "superclass", "changedProperties", "name", "newValue", "oldValue", "properties", "ns", "ctor", "SyncUpdatableMixin", "dedupeMixin", "LionValidationFeedback", "s", "message", "changedProperties", "x", "type", "validator", "Validator", "param", "config", "modelValue", "p", "c", "data", "ctor", "composedData", "formControl", "ResultValidator", "Validator", "regularValidationResult", "prevValidationResult", "prevShownValidationResult", "validators", "Required", "Validator", "inputNode", "role", "elementTagName", "ctor", "arrayDiff", "array1", "array2", "x", "ValidateMixinImplementation", "superclass", "FormControlMixin", "SyncUpdatableMixin", "DisabledMixin", "SlotMixin", "ScopedElementsMixin", "LionValidationFeedback", "value", "feedbackEl", "localize", "changedProperties", "name", "oldValue", "diff", "type", "pascalCase", "clearCurrentResult", "resolve", "Unparseable", "requiredValidator", "v", "Required", "filteredValidators", "ResultValidator", "syncValidators", "asyncValidators", "hasAsync", "resultPromises", "asyncExecutionResults", "r", "i", "regularValidationResult", "resultValidators", "entry", "source", "syncAndAsyncOutcome", "resultOutCome", "validationStates", "acc", "validator", "outcome", "vCtor", "events", "e", "Validator", "errorMessage", "eventName", "validationResults", "fieldName", "_feedbackNode", "AsyncQueue", "prioritizedValidators", "messageMap", "meta", "currentCondition", "ctor", "prevStates", "feedbackObj", "newShouldShowFeedbackFor", "validationResult", "types", "a", "b", "ValidateMixin", "dedupeMixin", "FormatMixinImplementation", "superclass", "ValidateMixin", "FormControlMixin", "name", "oldVal", "value", "v", "opts", "source", "result", "Unparseable", "args", "prevFormatted", "unprocessedValue", "currentCaretIndex", "preprocessedValue", "viewValue", "caretIndex", "type", "FormatMixin", "dedupeMixin", "InteractionStateMixinImplementation", "superclass", "FormControlMixin", "name", "oldVal", "type", "meta", "InteractionStateMixin", "dedupeMixin", "LionField", "FormControlMixin", "InteractionStateMixin", "FocusMixin", "FormatMixin", "ValidateMixin", "SlotMixin", "s", "changedProperties", "FormControlsCollection", "k", "FormRegistrarMixinImplementation", "superclass", "FormRegisteringMixin", "FormControlsCollection", "resolve", "reject", "el", "exitingEl", "child", "indexToInsertAt", "name", "index", "idx", "ev", "i", "formElement", "element", "FormRegistrarMixin", "dedupeMixin", "NativeTextFieldMixinImplementation", "superclass", "FormatMixin", "FocusMixin", "FormControlMixin", "native", "value", "newValue", "start", "NativeTextFieldMixin", "dedupeMixin", "FormElementsHaveNoError", "Validator", "value", "options", "config", "FormGroupMixinImplementation", "superclass", "FormRegistrarMixin", "FormControlMixin", "ValidateMixin", "DisabledMixin", "SlotMixin", "values", "FormElementsHaveNoError", "el", "changedProperties", "event", "child", "x", "formElement", "type", "property", "filterFn", "result", "_filterFn", "name", "elem", "FormControlsCollection", "value", "index", "state", "ev", "lastEl", "parent", "descriptionElements", "getAriaElementsInRightDomOrder", "indexToInsertAt", "pVals", "FormGroupMixin", "dedupeMixin", "LionFieldset", "FormGroupMixin", "s", "throwFormNodeError", "LionForm", "LionFieldset", "ev", "LionForm", "LionInput", "NativeTextFieldMixin", "LionField", "native", "value", "name", "oldValue", "changedProperties", "LionInput", "isKeyboardClickEvent", "e", "isSpaceKeyboardClickEvent", "LionButton", "DisabledWithTabIndexMixin", "s", "x", "i", "browserDetection", "changedProperties", "mouseupHandler", "event", "keyupHandler", "keyupEvent", "LionButton", "SignInModal", "r", "i", "x", "HeaderComponent", "r", "i", "modal", "x", "FooterComponent", "r", "i", "x", "MainSection", "r", "i", "x", "logo", "LitLionApp", "r", "x"]
}
